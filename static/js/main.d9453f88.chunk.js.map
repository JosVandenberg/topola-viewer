{"version":3,"sources":["analytics.ts","chart.tsx","details.tsx","gedcom_util.ts","load_data.ts","intro.tsx","top_bar.tsx","app.tsx","index.tsx"],"names":["analyticsEvent","action","data","window","gtag","zoomed","parent","d3","node","parentElement","scrollLeft","transform","x","scrollTop","y","scrolled","clientWidth","clientHeight","call","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","e","target","result","inlineImage","_callee6","image","href","response","dataUrl","regenerator_default","a","wrap","_context6","prev","next","baseVal","abrupt","fetch","sent","t0","console","warn","stop","this","inlineImages","_callee7","svg","images","_context7","Array","from","getElementsByTagName","all","map","loadImage","Image","src","URL","createObjectURL","addEventListener","drawOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","type","toBlob","Chart","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","chart","inherits","createClass","key","value","_this2","undefined","initialRender","innerHTML","createChart","json","props","chartType","HourglassChart","renderer","DetailedRenderer","svgSelector","indiCallback","info","onSelection","animate","updateSvgSize","locale","context","intl","chartInfo","render","startIndi","selection","id","baseGeneration","generation","on","scaleExtent","translateExtent","size","dx","origin","dy","offsetX","offsetY","svgTransition","transition","delay","duration","attr","tween","i","t","renderChart","prevProps","react","getElementById","cloneNode","removeAttribute","XMLSerializer","serializeToString","_getSvgContentsWithInlinedImages","asyncToGenerator","mark","_callee","_context","_this3","printWindow","style","position","top","left","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","_downloadSvg","_callee2","contents","_context2","getSvgContentsWithInlinedImages","Blob","saveAs","_drawOnCanvas2","_callee3","_context3","t1","_downloadPng","_callee4","_context4","_downloadPdf","_callee5","doc","_context5","jsPDF","orientation","unit","format","addImage","save","React","contextTypes","intlShape","EVENT_TAGS","EXCLUDED_TAGS","TAG_DESCRIPTIONS","Map","translateTag","tag","index_es","defaultMessage","get","DATE_QUALIFIERS","formatDate","date","hasDay","day","hasMonth","month","hasYear","year","text","dateObject","Date","qualifier","toLowerCase","formatOptions","formatMessage","Intl","DateTimeFormat","join","translateDate","gedcomDate","dateOrRange","getDate","dateRange","fromDate","toDate","to","translatedFromDate","translatedToDate","formatDateRage","joinLines","lines","line","Linkify_default","properties","getData","entry","tree","forEach","subentry","last","push","noteDetails","nameDetails","className","split","filter","name","getDetails","entries","tags","detailsFunction","flatMap","element","getOtherDetails","includes","toConsumableArray","note","dataDetails","Details","_React$Component","gedcom","indis","indi","find","place","eventDetails","pointerToId","pointer","substring","prepareGedcom","head","fams","sortFamilyChildren","fam","children","newChildren","sort","idToIndiMap","indiId1","indiId2","b","idComparison","indi1","indi2","birth1","birth","birth2","date1","date2","birthDatesComparator","assign","sortChildren","newFams","filterImages","newIndis","imageUrl","fileName","match","has","newIndi","startsWith","filterImage","getSoftware","sour","getSelection","prepareData","cacheId","parseGedcom","gedcomEntriesToJson","Error","chartData","convertGedcom","serializedData","JSON","stringify","sessionStorage","setItem","loadFromUrl","_x","_x2","_loadFromUrl","url","handleCors","cachedData","urlToFetch","getItem","parse","status","statusText","loadGedcom","_x3","_x4","_x5","_loadGedcom","hash","GedcomLink","Link","pathname","search","queryString","Intro","Card","Content","Header","values","link","loadFileAsText","file","evt","readAsText","isImageFileName","lower","endsWith","TopBar","state","loadUrlDialogOpen","inputRef","_handleUpload","event","files","filesArray","gedcomFile","imageMap","imageFileNames","event_value","md5","history","setState","loadFromUrlModal","Modal","onClose","handleClose","centered","Icon","txt","Form","onSubmit","handleLoad","Input","placeholder","fluid","onChange","handleUrlChange","ref","Actions","Button","secondary","onClick","primary","chartMenus","showingChart","Menu","Item","as","onPrint","Dropdown","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","attached","inverted","color","handleLoadFromUrl","accept","multiple","handleUpload","htmlFor","ErrorMessage","Message","negative","message","App","loading","chartRef","location","gen","String","renderMainArea","chart_Chart","showSidePanel","Responsive","minWidth","details_Details","error","Loader","active","componentDidUpdate","_componentDidUpdate","getParam","parsedGen","_data","software","_selection","Number","isNaN","replace","isNewData","event_label","Route","top_bar_TopBar","downloadPdf","downloadPng","downloadSvg","Switch","exact","path","component","Redirect","addLocaleData","locale_en","locale_pl","messages","pl","messages_pl","language","navigator","browser","detect","ReactDOM","querySelector","HashRouter"],"mappings":"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","file":"static/js/main.d9453f88.chunk.js","sourcesContent":["/** Sends an event to Google Analytics. */\nexport function analyticsEvent(action: string, data?: any) {\n  (window as any).gtag('event', action, data);\n}\n","import * as d3 from 'd3';\nimport * as React from 'react';\nimport jsPDF from 'jspdf';\nimport {intlShape} from 'react-intl';\nimport {saveAs} from 'file-saver';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n} from 'topola';\n\n/** Called when the view is dragged with the mouse. */\nfunction zoomed() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement!;\n  parent.scrollLeft = -d3.event.transform.x;\n  parent.scrollTop = -d3.event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  d3.select(parent).call(d3.zoom().translateTo, x, y);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\n  });\n}\n\nasync function inlineImage(image: SVGImageElement) {\n  const href = image.href.baseVal;\n  if (!href) {\n    return;\n  }\n  try {\n    const response = await fetch(href);\n    const blob = await response.blob();\n    const dataUrl = await loadAsDataUrl(blob);\n    image.href.baseVal = dataUrl;\n  } catch (e) {\n    console.warn('Failed to load image:', e);\n  }\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nasync function inlineImages(svg: Element): Promise<void> {\n  const images = Array.from(svg.getElementsByTagName('image'));\n  await Promise.all(images.map(inlineImage));\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = URL.createObjectURL(blob);\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    image.addEventListener('load', () => resolve(image));\n  });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawOnCanvas(image: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  // Scale image for better quality.\n  canvas.width = image.width * 2;\n  canvas.height = image.height * 2;\n\n  const ctx = canvas.getContext('2d')!;\n  const oldFill = ctx.fillStyle;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = oldFill;\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, type);\n  });\n}\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  onSelection: (indiInfo: IndiInfo) => void;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class Chart extends React.PureComponent<ChartProps, {}> {\n  private chart?: ChartHandle;\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(args: {initialRender: boolean} = {initialRender: false}) {\n    if (args.initialRender) {\n      (d3.select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: HourglassChart,\n        renderer: DetailedRenderer,\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.context.intl.locale,\n      });\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = d3.select('#chart');\n    const parent = (svg.node() as HTMLElement).parentElement as Element;\n\n    d3.select(parent)\n      .on('scroll', scrolled)\n      .call(\n        d3\n          .zoom()\n          .scaleExtent([1, 1])\n          .translateExtent([[0, 0], chartInfo.size])\n          .on('zoom', zoomed),\n      );\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0];\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1];\n    const offsetX = d3.max([0, (parent.clientWidth - chartInfo.size[0]) / 2]);\n    const offsetY = d3.max([0, (parent.clientHeight - chartInfo.size[1]) / 2]);\n    const svgTransition = svg\n      .transition()\n      .delay(200)\n      .duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0])\n      .attr('height', chartInfo.size[1]);\n    if (args.initialRender) {\n      parent.scrollLeft = -dx;\n      parent.scrollTop = -dy;\n    } else {\n      svgTransition\n        .tween('scrollLeft', scrollLeftTween(-dx))\n        .tween('scrollTop', scrollTopTween(-dy));\n    }\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    this.renderChart({initialRender: this.props.data !== prevProps.data});\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <svg id=\"chart\" />\n      </div>\n    );\n  }\n\n  private getSvgContents() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  private async getSvgContentsWithInlinedImages() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    await inlineImages(svg);\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  async downloadSvg() {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    saveAs(blob, 'topola.svg');\n  }\n\n  private async drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    return await drawOnCanvas(await loadImage(blob));\n  }\n\n  async downloadPng() {\n    const canvas = await this.drawOnCanvas();\n    const blob = await canvasToBlob(canvas, 'image/png');\n    saveAs(blob, 'topola.png');\n  }\n\n  async downloadPdf() {\n    const canvas = await this.drawOnCanvas();\n    const doc = new jsPDF({\n      orientation: canvas.width > canvas.height ? 'l' : 'p',\n      unit: 'pt',\n      format: [canvas.width, canvas.height],\n    });\n    doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n    doc.save('topola.pdf');\n  }\n}\n","import * as React from 'react';\nimport flatMap from 'array.prototype.flatmap';\nimport Linkify from 'react-linkify';\nimport {Date as TopolaDate, DateRange, getDate} from 'topola';\nimport {FormattedMessage, InjectedIntl} from 'react-intl';\nimport {GedcomData} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {intlShape} from 'react-intl';\n\ninterface Props {\n  gedcom: GedcomData;\n  indi: string;\n}\n\nconst EVENT_TAGS = ['BIRT', 'BAPM', 'CHR', 'DEAT', 'BURI'];\nconst EXCLUDED_TAGS = ['NAME', 'SEX', 'FAMC', 'FAMS', 'SOUR', 'NOTE'];\nconst TAG_DESCRIPTIONS = new Map([\n  ['BAPM', 'Baptism'],\n  ['BIRT', 'Birth'],\n  ['BURI', 'Burial'],\n  ['CHR', 'Christening'],\n  ['DEAT', 'Death'],\n  ['EMAIL', 'E-mail'],\n  ['OCCU', 'Occupation'],\n  ['TITL', 'Title'],\n  ['WWW', 'WWW'],\n]);\n\nfunction translateTag(tag: string) {\n  return (\n    <FormattedMessage\n      id={`gedcom.${tag}`}\n      defaultMessage={TAG_DESCRIPTIONS.get(tag) || tag}\n    />\n  );\n}\n\nconst DATE_QUALIFIERS = new Map([\n  ['abt', 'about'],\n  ['cal', 'calculated'],\n  ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: InjectedIntl) {\n  const hasDay = date.day !== undefined;\n  const hasMonth = date.month !== undefined;\n  const hasYear = date.year !== undefined;\n  if (!hasDay && !hasMonth && !hasYear) {\n    return date.text || '';\n  }\n  const dateObject = new Date(\n    hasYear ? date.year! : 0,\n    hasMonth ? date.month! - 1 : 0,\n    hasDay ? date.day! : 1,\n  );\n\n  const qualifier = date.qualifier && date.qualifier.toLowerCase();\n  const translatedQualifier =\n    qualifier &&\n    intl.formatMessage({\n      id: `date.${qualifier}`,\n      defaultMessage: DATE_QUALIFIERS.get(qualifier) || qualifier,\n    });\n\n  const formatOptions = {\n    day: hasDay ? 'numeric' : undefined,\n    month: hasMonth ? 'long' : undefined,\n    year: hasYear ? 'numeric' : undefined,\n  };\n  const translatedDate = new Intl.DateTimeFormat(\n    intl.locale,\n    formatOptions,\n  ).format(dateObject);\n\n  return [translatedQualifier, translatedDate].join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: InjectedIntl) {\n  const fromDate = dateRange.from;\n  const toDate = dateRange.to;\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\n  const translatedToDate = toDate && formatDate(toDate, intl);\n  if (translatedFromDate && translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.between',\n        defaultMessage: 'between {from} and {to}',\n      },\n      {from: translatedFromDate, to: translatedToDate},\n    );\n  }\n  if (translatedFromDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.after',\n        defaultMessage: 'after {from}',\n      },\n      {from: translatedFromDate},\n    );\n  }\n  if (translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.before',\n        defaultMessage: 'before {to}',\n      },\n      {to: translatedToDate},\n    );\n  }\n  return '';\n}\n\nfunction translateDate(gedcomDate: string, intl: InjectedIntl) {\n  const dateOrRange = getDate(gedcomDate);\n  if (!dateOrRange) {\n    return '';\n  }\n  if (dateOrRange.date) {\n    return formatDate(dateOrRange.date, intl);\n  }\n  if (dateOrRange.dateRange) {\n    return formatDateRage(dateOrRange.dateRange, intl);\n  }\n  return '';\n}\n\nfunction joinLines(lines: (JSX.Element | string)[]) {\n  return (\n    <>\n      {lines.map((line) => (\n        <>\n          <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n          <br />\n        </>\n      ))}\n    </>\n  );\n}\n\n/**\n * Returns the data for the given GEDCOM entry as an array of lines. Supports\n * continuations with CONT and CONC.\n */\nfunction getData(entry: GedcomEntry) {\n  const result = [entry.data];\n  entry.tree.forEach((subentry) => {\n    if (subentry.tag === 'CONC' && subentry.data) {\n      const last = result.length - 1;\n      result[last] += subentry.data;\n    } else if (subentry.tag === 'CONT' && subentry.data) {\n      result.push(subentry.data);\n    }\n  });\n  return result;\n}\n\nfunction eventDetails(entry: GedcomEntry, intl: InjectedIntl) {\n  const lines = [];\n  const date = entry.tree.find((subentry) => subentry.tag === 'DATE');\n  if (date && date.data) {\n    lines.push(translateDate(date.data, intl));\n  }\n  const place = entry.tree.find((subentry) => subentry.tag === 'PLAC');\n  if (place && place.data) {\n    lines.push(...getData(place));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction dataDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(...getData(entry));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n  return joinLines(getData(entry).map((line) => <i>{line}</i>));\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n  return (\n    <h2 className=\"ui header\">\n      {entry.data\n        .split('/')\n        .filter((name) => !!name)\n        .map((name) => (\n          <>\n            {name}\n            <br />\n          </>\n        ))}\n    </h2>\n  );\n}\n\nfunction getDetails(\n  entries: GedcomEntry[],\n  tags: string[],\n  detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n  return flatMap(tags, (tag) =>\n    entries\n      .filter((entry) => entry.tag === tag)\n      .map((entry) => detailsFunction(entry)),\n  )\n    .filter((element) => element !== null)\n    .map((element) => <div className=\"ui segment\">{element}</div>);\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n  return entries\n    .filter(\n      (entry) =>\n        !EXCLUDED_TAGS.includes(entry.tag) && !EVENT_TAGS.includes(entry.tag),\n    )\n    .map((entry) => dataDetails(entry))\n    .filter((element) => element !== null)\n    .map((element) => <div className=\"ui segment\">{element}</div>);\n}\n\nexport class Details extends React.Component<Props, {}> {\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    const entries = this.props.gedcom.indis[this.props.indi].tree;\n\n    return (\n      <div className=\"ui segments\" id=\"details\">\n        {getDetails(entries, ['NAME'], nameDetails)}\n        {getDetails(entries, EVENT_TAGS, (entry) =>\n          eventDetails(entry, this.context.intl as InjectedIntl),\n        )}\n        {getOtherDetails(entries)}\n        {getDetails(entries, ['NOTE'], noteDetails)}\n      </div>\n    );\n  }\n}\n","import {JsonFam, JsonGedcomData, JsonIndi, gedcomEntriesToJson} from 'topola';\nimport {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\n\nexport interface GedcomData {\n  head: GedcomEntry;\n  indis: {[key: string]: GedcomEntry};\n  fams: {[key: string]: GedcomEntry};\n}\n\nexport interface TopolaData {\n  chartData: JsonGedcomData;\n  gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nfunction pointerToId(pointer: string): string {\n  return pointer.substring(1, pointer.length - 1);\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\n  const indis: {[key: string]: GedcomEntry} = {};\n  const fams: {[key: string]: GedcomEntry} = {};\n  entries.forEach((entry) => {\n    if (entry.tag === 'INDI') {\n      indis[pointerToId(entry.pointer)] = entry;\n    } else if (entry.tag === 'FAM') {\n      fams[pointerToId(entry.pointer)] = entry;\n    }\n  });\n  return {head, indis, fams};\n}\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const idToIndiMap = new Map<string, JsonIndi>();\n  gedcom.indis.forEach((indi) => {\n    idToIndiMap[indi.id] = indi;\n  });\n\n  return (indiId1: string, indiId2: string) => {\n    const idComparison = strcmp(indiId1, indiId2);\n    const indi1: JsonIndi = idToIndiMap[indiId1];\n    const indi2: JsonIndi = idToIndiMap[indiId2];\n    const birth1 = indi1 && indi1.birth;\n    const birth2 = indi2 && indi2.birth;\n    const date1 =\n      birth1 && (birth1.date || (birth1.dateRange && birth1.dateRange.from));\n    const date2 =\n      birth2 && (birth2.date || (birth2.dateRange && birth2.dateRange.from));\n    if (!date1 || !date1.year || !date2 || !date2.year) {\n      return idComparison;\n    }\n    if (date1.year !== date2.year) {\n      return date1.year - date2.year;\n    }\n    if (!date1.month || !date2.month) {\n      return idComparison;\n    }\n    if (date1.month !== date2.month) {\n      return date1.month - date2.month;\n    }\n    if (date1.day && date2.day && date1.day !== date2.day) {\n      return date1.month - date2.month;\n    }\n    return idComparison;\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(fam: JsonFam, gedcom: JsonGedcomData): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(birthDatesComparator(gedcom));\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, gedcom));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n  if (indi.imageUrl) {\n    const fileName = indi.imageUrl.match(/[^/\\\\]*$/)![0];\n    if (images.has(fileName)) {\n      const newIndi = Object.assign({}, indi);\n      newIndi.imageUrl = images.get(fileName);\n      return newIndi;\n    }\n  }\n  if (!indi.imageUrl || indi.imageUrl.startsWith('http')) {\n    return indi;\n  }\n  const newIndi = Object.assign({}, indi);\n  delete newIndi.imageUrl;\n  return newIndi;\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n  gedcom: JsonGedcomData,\n  images: Map<string, string>,\n): JsonGedcomData {\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n  gedcom: string,\n  images: Map<string, string>,\n): TopolaData {\n  const entries = parseGedcom(gedcom);\n  const json = gedcomEntriesToJson(entries);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new Error('Failed to read GEDCOM file');\n  }\n\n  return {\n    chartData: filterImages(sortChildren(json), images),\n    gedcom: prepareGedcom(entries),\n  };\n}\n\nexport function getSoftware(head: GedcomEntry): string | null {\n  const sour =\n    head && head.tree && head.tree.find((entry) => entry.tag === 'SOUR');\n  const name =\n    sour && sour.tree && sour.tree.find((entry) => entry.tag === 'NAME');\n  return (name && name.data) || null;\n}\n","import {convertGedcom, TopolaData} from './gedcom_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  indi?: string,\n  generation?: number,\n): IndiInfo {\n  return {\n    id: indi || data.indis[0].id,\n    generation: generation || 0,\n  };\n}\n\nfunction prepareData(\n  gedcom: string,\n  cacheId: string,\n  images?: Map<string, string>,\n): TopolaData {\n  const data = convertGedcom(gedcom, images || new Map());\n  const serializedData = JSON.stringify(data);\n  try {\n    sessionStorage.setItem(cacheId, serializedData);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n  return data;\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport async function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<TopolaData> {\n  const cachedData = sessionStorage.getItem(url);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  const urlToFetch = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/' + url\n    : url;\n\n  const response = await window.fetch(urlToFetch);\n  if (response.status !== 200) {\n    throw new Error(response.statusText);\n  }\n  const gedcom = await response.text();\n  return prepareData(gedcom, url);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport async function loadGedcom(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n): Promise<TopolaData> {\n  const cachedData = sessionStorage.getItem(hash);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  if (!gedcom) {\n    throw new Error('Error loading data. Please upload your file again.');\n  }\n  return prepareData(gedcom, hash, images);\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Card} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\n/** The intro page. */\nexport function Intro() {\n  return (\n    <Card className=\"intro\">\n      <Card.Content>\n        <Card.Header>\n          <FormattedMessage\n            id=\"intro.title\"\n            defaultMessage=\"Topola Genealogy Viewer\"\n          />\n        </Card.Header>\n      </Card.Content>\n      <Card.Content>\n        <p>\n          <FormattedMessage\n            id=\"intro.description\"\n            defaultMessage={\n              'Topola Genealogy is a genealogy tree viewer that lets you' +\n              ' browse the structure of the family.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.instructions\"\n            defaultMessage={\n              'Use the LOAD FROM URL or LOAD FROM FILE buttons above to load' +\n              ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n              ' existing genealogy programs and web sites.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.examples\"\n            defaultMessage={\n              'Here are some examples from the web that you can view:'\n            }\n          />\n        </p>\n        <ul>\n          <li>\n            <GedcomLink\n              url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n              text=\"Karol Wojtyła\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n              GENPOL\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n              text=\"Shakespeare\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n              webtreeprint.com\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"http://genealogyoflife.com/tng/gedcom/HarryPotter.ged\"\n              text=\"Harry Potter\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://famousfamilytrees.blogspot.com/\">\n              Famous Family Trees\n            </a>\n            )\n          </li>\n        </ul>\n        <p>\n          <b>\n            <FormattedMessage id=\"intro.privacy\" defaultMessage=\"Privacy\" />\n          </b>\n          :\n          <FormattedMessage\n            id=\"intro.privacy_note\"\n            defaultMessage={\n              'When using the \"load from file\" option, this site does not' +\n              ' send your data anywhere and files loaded from disk do not' +\n              ' leave your computer. When using \"load from URL\", data is' +\n              ' passed through the {link} service to deal with an issue with' +\n              ' cross-site file loading in the browser (CORS).'\n            }\n            values={{\n              link: (\n                <a href=\"https://cors-anywhere.herokuapp.com/\">cors-anywhere</a>\n              ),\n            }}\n          />\n        </p>\n      </Card.Content>\n    </Card>\n  );\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport md5 from 'md5';\nimport {analyticsEvent} from './analytics';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {\n  Header,\n  Button,\n  Icon,\n  Menu,\n  Modal,\n  Input,\n  Form,\n  Dropdown,\n} from 'semantic-ui-react';\n\n/** Menus and dialogs state. */\ninterface State {\n  loadUrlDialogOpen: boolean;\n  url?: string;\n}\n\ninterface Props {\n  showingChart: boolean;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\nfunction loadFileAsText(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsText(file);\n  });\n}\n\nfunction isImageFileName(fileName: string) {\n  const lower = fileName.toLowerCase();\n  return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\nexport class TopBar extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {loadUrlDialogOpen: false};\n  inputRef?: Input;\n\n  /** Handles the \"Upload file\" button. */\n  async handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const filesArray = Array.from(files);\n    (event.target as HTMLInputElement).value = ''; // Reset the file input.\n    analyticsEvent('upload_files_selected', {\n      event_value: files.length,\n    });\n\n    const gedcomFile =\n      files.length === 1\n        ? files[0]\n        : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n          files[0];\n\n    // Convert uploaded images to object URLs.\n    const images = filesArray\n      .filter(\n        (file) => file.name !== gedcomFile.name && isImageFileName(file.name),\n      )\n      .map((file) => ({\n        name: file.name,\n        url: URL.createObjectURL(file),\n      }));\n    const imageMap = new Map(\n      images.map((entry) => [entry.name, entry.url] as [string, string]),\n    );\n\n    const data = await loadFileAsText(gedcomFile);\n    const imageFileNames = images\n      .map((image) => image.name)\n      .sort()\n      .join('|');\n    // Hash GEDCOM contents with uploaded image file names.\n    const hash = md5(md5(data) + imageFileNames);\n    this.props.history.push({\n      pathname: '/view',\n      search: queryString.stringify({file: hash}),\n      state: {data, images: imageMap},\n    });\n  }\n\n  /** Opens the \"Load from URL\" dialog. */\n  handleLoadFromUrl() {\n    this.setState(\n      Object.assign({}, this.state, {loadUrlDialogOpen: true}),\n      () => this.inputRef!.focus(),\n    );\n  }\n\n  /** Cancels the \"Load from URL\" dialog. */\n  handleClose() {\n    this.setState(Object.assign({}, this.state, {loadUrlDialogOpen: false}));\n  }\n\n  /** Upload button clicked in the \"Load from URL\" dialog. */\n  handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        loadUrlDialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      analyticsEvent('url_selected');\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  handleUrlChange(event: React.SyntheticEvent) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: (event.target as HTMLInputElement).value,\n      }),\n    );\n  }\n\n  render() {\n    const loadFromUrlModal = (\n      <Modal\n        open={this.state.loadUrlDialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e) => this.handleUrlChange(e)}\n              ref={(ref) => (this.inputRef = ref!)}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://cors-anywhere.herokuapp.com/\">\n                      cors-anywhere.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n\n    const chartMenus = this.props.showingChart ? (\n      <>\n        <Menu.Item as=\"a\" onClick={() => this.props.onPrint()}>\n          <Icon name=\"print\" />\n          <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n        </Menu.Item>\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"download\" />\n              <FormattedMessage id=\"menu.download\" defaultMessage=\"Download\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => this.props.onDownloadPdf()}>\n              <FormattedMessage id=\"menu.pdf_file\" defaultMessage=\"PDF file\" />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.props.onDownloadPng()}>\n              <FormattedMessage id=\"menu.png_file\" defaultMessage=\"PNG file\" />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.props.onDownloadSvg()}>\n              <FormattedMessage id=\"menu.svg_file\" defaultMessage=\"SVG file\" />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    ) : null;\n\n    return (\n      <Menu attached=\"top\" inverted color=\"blue\" size=\"large\">\n        <Link to=\"/\">\n          <Menu.Item>\n            <b>Topola Genealogy</b>\n          </Menu.Item>\n        </Link>\n        <Menu.Item as=\"a\" onClick={() => this.handleLoadFromUrl()}>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </Menu.Item>\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged,image/*\"\n          id=\"fileInput\"\n          multiple\n          onChange={(e) => this.handleUpload(e)}\n        />\n        <label htmlFor=\"fileInput\">\n          <Menu.Item as=\"a\">\n            <Icon name=\"folder open\" />\n            <FormattedMessage\n              id=\"menu.load_from_file\"\n              defaultMessage=\"Load from file\"\n            />\n          </Menu.Item>\n        </label>\n        {chartMenus}\n        <Menu.Item\n          as=\"a\"\n          href=\"https://github.com/PeWu/topola-viewer\"\n          position=\"right\"\n          target=\"_blank\"\n        >\n          <FormattedMessage\n            id=\"menu.github\"\n            defaultMessage=\"Source on GitHub\"\n          />\n        </Menu.Item>\n        {loadFromUrlModal}\n      </Menu>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {analyticsEvent} from './analytics';\nimport {Chart} from './chart';\nimport {Details} from './details';\nimport {getSelection, loadFromUrl, loadGedcom} from './load_data';\nimport {IndiInfo} from 'topola';\nimport {Intro} from './intro';\nimport {Loader, Message, Responsive} from 'semantic-ui-react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {TopBar} from './top_bar';\nimport {TopolaData, getSoftware} from './gedcom_util';\n\n/** Shows an error message. */\nexport function ErrorMessage(props: {message: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>Failed to load file</Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface State {\n  /** Loaded data. */\n  data?: TopolaData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Hash of the GEDCOM contents. */\n  hash?: string;\n  /** Error to display. */\n  error?: string;\n  /** True if currently loading. */\n  loading: boolean;\n  /** URL of the data that is loaded or is being loaded. */\n  url?: string;\n  /** Whether the side panel is shoen. */\n  showSidePanel?: boolean;\n}\n\nexport class App extends React.Component<RouteComponentProps, {}> {\n  state: State = {loading: false};\n  chartRef: Chart | null = null;\n\n  private isNewData(\n    hash: string | undefined,\n    url: string | undefined,\n  ): boolean {\n    return (\n      !!(hash && hash !== this.state.hash) || !!(url && this.state.url !== url)\n    );\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  async componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      return;\n    }\n    const gedcom = this.props.location.state && this.props.location.state.data;\n    const images =\n      this.props.location.state && this.props.location.state.images;\n    const search = queryString.parse(this.props.location.search);\n    const getParam = (name: string) => {\n      const value = search[name];\n      return typeof value === 'string' ? value : undefined;\n    };\n    const url = getParam('url');\n    const indi = getParam('indi');\n    const parsedGen = Number(getParam('gen'));\n    const generation = !isNaN(parsedGen) ? parsedGen : undefined;\n    const hash = getParam('file');\n    const handleCors = getParam('handleCors') !== 'false'; // True by default.\n    const showSidePanel = getParam('sidePanel') !== 'false'; // True by default.\n\n    if (!url && !hash) {\n      this.props.history.replace({pathname: '/'});\n    } else if (this.isNewData(hash, url)) {\n      try {\n        // Set loading state.\n        this.setState(\n          Object.assign({}, this.state, {\n            data: undefined,\n            selection: undefined,\n            hash,\n            error: undefined,\n            loading: true,\n            url,\n          }),\n        );\n        const data = hash\n          ? await loadGedcom(hash, gedcom, images)\n          : await loadFromUrl(url!, handleCors);\n        analyticsEvent(hash ? 'upload_file_loaded' : 'url_file_loaded');\n        if (images && images.size) {\n          analyticsEvent('images_uploaded');\n        }\n        const software = getSoftware(data.gedcom.head);\n        if (software) {\n          analyticsEvent('gedcom_software', {event_label: software});\n        }\n\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            hash,\n            selection: getSelection(data.chartData, indi, generation),\n            error: undefined,\n            loading: false,\n            url,\n            showSidePanel,\n          }),\n        );\n      } catch (error) {\n        analyticsEvent(hash ? 'upload_file_error' : 'url_file_error');\n        // Set error state.\n        this.setState(\n          Object.assign({}, this.state, {\n            error: error.message,\n            loading: false,\n          }),\n        );\n      }\n    } else if (this.state.data && this.state.selection) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(\n        this.state.data.chartData,\n        indi,\n        generation,\n      );\n      if (\n        this.state.selection.id !== selection.id ||\n        this.state.selection.generation !== selection.generation\n      ) {\n        this.setState(\n          Object.assign({}, this.state, {\n            selection,\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    analyticsEvent('selection_changed');\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    search.indi = selection.id;\n    search.gen = String(selection.generation);\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  };\n\n  private renderMainArea = () => {\n    if (this.state.data && this.state.selection) {\n      return (\n        <div id=\"content\">\n          <Chart\n            data={this.state.data.chartData}\n            onSelection={this.onSelection}\n            selection={this.state.selection}\n            ref={(ref) => (this.chartRef = ref)}\n          />\n          {this.state.showSidePanel ? (\n            <Responsive minWidth={768} id=\"sidePanel\">\n              <Details\n                gedcom={this.state.data.gedcom}\n                indi={this.state.selection.id}\n              />\n            </Responsive>\n          ) : null}\n        </div>\n      );\n    }\n    if (this.state.error) {\n      return <ErrorMessage message={this.state.error!} />;\n    }\n    return <Loader active size=\"large\" />;\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              showingChart={\n                !!(\n                  this.props.history.location.pathname === '/view' &&\n                  this.state.data &&\n                  this.state.selection\n                )\n              }\n              onPrint={() => {\n                analyticsEvent('print');\n                this.chartRef && this.chartRef.print();\n              }}\n              onDownloadPdf={() => {\n                analyticsEvent('download_pdf');\n                this.chartRef && this.chartRef.downloadPdf();\n              }}\n              onDownloadPng={() => {\n                analyticsEvent('download_png');\n                this.chartRef && this.chartRef.downloadPng();\n              }}\n              onDownloadSvg={() => {\n                analyticsEvent('download_svg');\n                this.chartRef && this.chartRef.downloadSvg();\n              }}\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n","import * as locale_en from 'react-intl/locale-data/en';\nimport * as locale_pl from 'react-intl/locale-data/pl';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_pl from './translations/pl.json';\nimport {addLocaleData} from 'react-intl';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\naddLocaleData([...locale_en, ...locale_pl]);\n\nconst messages = {\n  pl: messages_pl,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Router>\n        <Route component={App} />\n      </Router>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}