{"version":3,"sources":["chart.tsx","details.tsx","gedcom_util.ts","load_data.ts","intro.tsx","top_bar.tsx","app.tsx","index.tsx"],"names":["zoomed","parent","d3","node","parentElement","scrollLeft","transform","x","scrollTop","y","scrolled","clientWidth","clientHeight","call","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","e","target","result","loadImage","image","Image","src","URL","createObjectURL","addEventListener","drawOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","Chart","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","chart","inherits","createClass","key","value","_this2","undefined","initialRender","innerHTML","createChart","json","props","data","chartType","HourglassChart","renderer","DetailedRenderer","svgSelector","indiCallback","info","onSelection","animate","updateSvgSize","locale","context","intl","chartInfo","render","startIndi","selection","id","baseGeneration","generation","svg","on","scaleExtent","translateExtent","size","dx","origin","dy","offsetX","offsetY","svgTransition","transition","delay","duration","attr","tween","i","t","renderChart","prevProps","react","getElementById","cloneNode","removeAttribute","XMLSerializer","serializeToString","promises","from","getElementsByTagName","map","href","baseVal","fetch","then","response","dataUrl","catch","console","warn","all","inlineImages","_this3","printWindow","style","position","top","left","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","getSvgContentsWithInlinedImages","contents","Blob","type","saveAs","toBlob","canvasToBlob","doc","jsPDF","orientation","unit","format","addImage","save","React","contextTypes","intlShape","EVENT_TAGS","EXCLUDED_TAGS","TAG_DESCRIPTIONS","Map","translateTag","tag","index_es","defaultMessage","get","DATE_QUALIFIERS","formatDate","date","hasDay","day","hasMonth","month","hasYear","year","text","dateObject","Date","qualifier","toLowerCase","formatOptions","formatMessage","Intl","DateTimeFormat","join","translateDate","gedcomDate","dateOrRange","getDate","dateRange","fromDate","toDate","to","translatedFromDate","translatedToDate","formatDateRage","joinLines","lines","line","Linkify_default","a","properties","noteDetails","entry","push","nameDetails","className","split","filter","name","getDetails","entries","tags","detailsFunction","flatMap","element","getOtherDetails","includes","tree","subentry","forEach","note","dataDetails","Details","_React$Component","gedcom","indis","indi","find","place","eventDetails","pointerToId","pointer","substring","prepareGedcom","head","fams","sortFamilyChildren","fam","children","newChildren","sort","idToIndiMap","indiId1","indiId2","b","idComparison","indi1","indi2","birth1","birth","birth2","date1","date2","birthDatesComparator","assign","sortChildren","newFams","filterImages","images","newIndis","imageUrl","fileName","match","has","newIndi","startsWith","filterImage","getSelection","prepareData","cacheId","parseGedcom","gedcomEntriesToJson","Error","chartData","convertGedcom","serializedData","JSON","stringify","sessionStorage","setItem","loadGedcom","hash","cachedData","getItem","parse","loadGedcomSync","GedcomLink","Link","pathname","search","queryString","url","Intro","Card","Content","Header","values","link","TopBar","state","loadUrlDialogOpen","inputRef","event","files","file","filesArray","gedcomFile","endsWith","lower","isImageFileName","imageMap","evt","readAsText","imageFileNames","md5","history","setState","_this4","loadFromUrlModal","Modal","onClose","handleClose","centered","Icon","txt","Form","onSubmit","handleLoad","Input","placeholder","fluid","onChange","handleUrlChange","ref","Actions","Button","secondary","onClick","primary","chartMenus","showingChart","Menu","Item","as","onPrint","Dropdown","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","attached","inverted","color","handleLoadFromUrl","accept","multiple","handleUpload","htmlFor","ErrorMessage","Message","negative","message","App","loading","chartRef","location","gen","String","renderMainArea","chart_Chart","showSidePanel","Responsive","minWidth","details_Details","error","Loader","active","componentDidUpdate","getParam","parsedGen","Number","isNaN","handleCors","isNewData","urlToFetch","window","status","statusText","loadFromUrl","replace","Route","top_bar_TopBar","downloadPdf","downloadPng","downloadSvg","Switch","exact","path","component","Redirect","addLocaleData","toConsumableArray","locale_en","locale_pl","messages","pl","messages_pl","language","navigator","browser","detect","ReactDOM","querySelector","HashRouter"],"mappings":"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","file":"static/js/main.89cd153e.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport * as React from 'react';\nimport jsPDF from 'jspdf';\nimport {intlShape} from 'react-intl';\nimport {saveAs} from 'file-saver';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n} from 'topola';\n\n/** Called when the view is dragged with the mouse. */\nfunction zoomed() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement!;\n  parent.scrollLeft = -d3.event.transform.x;\n  parent.scrollTop = -d3.event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  d3.select(parent).call(d3.zoom().translateTo, x, y);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\n  });\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nfunction inlineImages(svg: Element): Promise<void[]> {\n  const images = Array.from(svg.getElementsByTagName('image'));\n  const promises = images.map((image) => {\n    const href = image.href && image.href.baseVal;\n    if (!href) {\n      return Promise.resolve();\n    }\n    return (\n      fetch(href)\n        .then((response) => response.blob())\n        .then(loadAsDataUrl)\n        .then((dataUrl) => {\n          image.href.baseVal = dataUrl;\n        })\n        // Log and ignore errors.\n        .catch((e) => console.warn('Failed to load image:', e))\n    );\n  });\n  return Promise.all(promises);\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = URL.createObjectURL(blob);\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    image.addEventListener('load', () => {\n      resolve(image);\n    });\n  });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawOnCanvas(image: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  // Scale image for better quality.\n  canvas.width = image.width * 2;\n  canvas.height = image.height * 2;\n\n  const ctx = canvas.getContext('2d')!;\n  const oldFill = ctx.fillStyle;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = oldFill;\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, type);\n  });\n}\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  onSelection: (indiInfo: IndiInfo) => void;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class Chart extends React.PureComponent<ChartProps, {}> {\n  private chart?: ChartHandle;\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(args: {initialRender: boolean} = {initialRender: false}) {\n    if (args.initialRender) {\n      (d3.select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: HourglassChart,\n        renderer: DetailedRenderer,\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.context.intl.locale,\n      });\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = d3.select('#chart');\n    const parent = (svg.node() as HTMLElement).parentElement as Element;\n\n    d3.select(parent)\n      .on('scroll', scrolled)\n      .call(\n        d3\n          .zoom()\n          .scaleExtent([1, 1])\n          .translateExtent([[0, 0], chartInfo.size])\n          .on('zoom', zoomed),\n      );\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0];\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1];\n    const offsetX = d3.max([0, (parent.clientWidth - chartInfo.size[0]) / 2]);\n    const offsetY = d3.max([0, (parent.clientHeight - chartInfo.size[1]) / 2]);\n    const svgTransition = svg\n      .transition()\n      .delay(200)\n      .duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0])\n      .attr('height', chartInfo.size[1]);\n    if (args.initialRender) {\n      parent.scrollLeft = -dx;\n      parent.scrollTop = -dy;\n    } else {\n      svgTransition\n        .tween('scrollLeft', scrollLeftTween(-dx))\n        .tween('scrollTop', scrollTopTween(-dy));\n    }\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    this.renderChart({initialRender: this.props.data !== prevProps.data});\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <svg id=\"chart\" />\n      </div>\n    );\n  }\n\n  private getSvgContents() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  private getSvgContentsWithInlinedImages() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    return inlineImages(svg).then(() =>\n      new XMLSerializer().serializeToString(svg),\n    );\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  downloadSvg() {\n    this.getSvgContentsWithInlinedImages().then((contents) => {\n      const blob = new Blob([contents], {type: 'image/svg+xml'});\n      saveAs(blob, 'topola.svg');\n    });\n  }\n\n  drawOnCanvas(): Promise<HTMLCanvasElement> {\n    return this.getSvgContentsWithInlinedImages()\n      .then((contents) => new Blob([contents], {type: 'image/svg+xml'}))\n      .then(loadImage)\n      .then(drawOnCanvas);\n  }\n\n  downloadPng() {\n    this.drawOnCanvas()\n      .then((canvas) => canvasToBlob(canvas, 'image/png'))\n      .then((blob) => saveAs(blob, 'topola.png'));\n  }\n\n  downloadPdf() {\n    this.drawOnCanvas().then((canvas) => {\n      const doc = new jsPDF({\n        orientation: canvas.width > canvas.height ? 'l' : 'p',\n        unit: 'pt',\n        format: [canvas.width, canvas.height],\n      });\n      doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n      doc.save('topola.pdf');\n    });\n  }\n}\n","import * as React from 'react';\nimport flatMap from 'array.prototype.flatmap';\nimport Linkify from 'react-linkify';\nimport {Date as TopolaDate, DateRange, getDate} from 'topola';\nimport {FormattedMessage, InjectedIntl} from 'react-intl';\nimport {GedcomData} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {intlShape} from 'react-intl';\n\ninterface Props {\n  gedcom: GedcomData;\n  indi: string;\n}\n\nconst EVENT_TAGS = ['BIRT', 'BAPM', 'CHR', 'DEAT', 'BURI'];\nconst EXCLUDED_TAGS = ['NAME', 'SEX', 'FAMC', 'FAMS', 'SOUR', 'NOTE'];\nconst TAG_DESCRIPTIONS = new Map([\n  ['BAPM', 'Baptism'],\n  ['BIRT', 'Birth'],\n  ['BURI', 'Burial'],\n  ['CHR', 'Christening'],\n  ['DEAT', 'Death'],\n  ['EMAIL', 'E-mail'],\n  ['OCCU', 'Occupation'],\n  ['TITL', 'Title'],\n  ['WWW', 'WWW'],\n]);\n\nfunction translateTag(tag: string) {\n  return (\n    <FormattedMessage\n      id={`gedcom.${tag}`}\n      defaultMessage={TAG_DESCRIPTIONS.get(tag) || tag}\n    />\n  );\n}\n\nconst DATE_QUALIFIERS = new Map([\n  ['abt', 'about'],\n  ['cal', 'calculated'],\n  ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: InjectedIntl) {\n  const hasDay = date.day !== undefined;\n  const hasMonth = date.month !== undefined;\n  const hasYear = date.year !== undefined;\n  if (!hasDay && !hasMonth && !hasYear) {\n    return date.text || '';\n  }\n  const dateObject = new Date(\n    hasYear ? date.year! : 0,\n    hasMonth ? date.month! - 1 : 0,\n    hasDay ? date.day! : 1,\n  );\n\n  const qualifier = date.qualifier && date.qualifier.toLowerCase();\n  const translatedQualifier =\n    qualifier &&\n    intl.formatMessage({\n      id: `date.${qualifier}`,\n      defaultMessage: DATE_QUALIFIERS.get(qualifier) || qualifier,\n    });\n\n  const formatOptions = {\n    day: hasDay ? 'numeric' : undefined,\n    month: hasMonth ? 'long' : undefined,\n    year: hasYear ? 'numeric' : undefined,\n  };\n  const translatedDate = new Intl.DateTimeFormat(\n    intl.locale,\n    formatOptions,\n  ).format(dateObject);\n\n  return [translatedQualifier, translatedDate].join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: InjectedIntl) {\n  const fromDate = dateRange.from;\n  const toDate = dateRange.to;\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\n  const translatedToDate = toDate && formatDate(toDate, intl);\n  if (translatedFromDate && translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.between',\n        defaultMessage: 'between {from} and {to}',\n      },\n      {from: translatedFromDate, to: translatedToDate},\n    );\n  }\n  if (translatedFromDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.after',\n        defaultMessage: 'after {from}',\n      },\n      {from: translatedFromDate},\n    );\n  }\n  if (translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.before',\n        defaultMessage: 'before {to}',\n      },\n      {to: translatedToDate},\n    );\n  }\n  return '';\n}\n\nfunction translateDate(gedcomDate: string, intl: InjectedIntl) {\n  const dateOrRange = getDate(gedcomDate);\n  if (!dateOrRange) {\n    return '';\n  }\n  if (dateOrRange.date) {\n    return formatDate(dateOrRange.date, intl);\n  }\n  if (dateOrRange.dateRange) {\n    return formatDateRage(dateOrRange.dateRange, intl);\n  }\n  return '';\n}\n\nfunction joinLines(lines: (JSX.Element | string)[]) {\n  return (\n    <>\n      {lines.map((line) => (\n        <>\n          <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n          <br />\n        </>\n      ))}\n    </>\n  );\n}\n\nfunction eventDetails(entry: GedcomEntry, intl: InjectedIntl) {\n  const lines = [];\n  const date = entry.tree.find((subentry) => subentry.tag === 'DATE');\n  if (date && date.data) {\n    lines.push(translateDate(date.data, intl));\n  }\n  const place = entry.tree.find((subentry) => subentry.tag === 'PLAC');\n  if (place && place.data) {\n    lines.push(place.data);\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) => {\n      lines.push(<i>{note.data}</i>);\n    });\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction dataDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(entry.data);\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) => {\n      lines.push(<i>{note.data}</i>);\n    });\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(entry.data);\n  }\n  if (!lines.length) {\n    return null;\n  }\n  return <i>{joinLines(lines)}</i>;\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n  return (\n    <h2 className=\"ui header\">\n      {entry.data\n        .split('/')\n        .filter((name) => !!name)\n        .map((name) => (\n          <>\n            {name}\n            <br />\n          </>\n        ))}\n    </h2>\n  );\n}\n\nfunction getDetails(\n  entries: GedcomEntry[],\n  tags: string[],\n  detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n  return flatMap(tags, (tag) =>\n    entries\n      .filter((entry) => entry.tag === tag)\n      .map((entry) => detailsFunction(entry)),\n  )\n    .filter((element) => element !== null)\n    .map((element) => <div className=\"ui segment\">{element}</div>);\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n  return entries\n    .filter(\n      (entry) =>\n        !EXCLUDED_TAGS.includes(entry.tag) && !EVENT_TAGS.includes(entry.tag),\n    )\n    .map((entry) => dataDetails(entry))\n    .filter((element) => element !== null)\n    .map((element) => <div className=\"ui segment\">{element}</div>);\n}\n\nexport class Details extends React.Component<Props, {}> {\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    const entries = this.props.gedcom.indis[this.props.indi].tree;\n\n    return (\n      <div className=\"ui segments\" id=\"details\">\n        {getDetails(entries, ['NAME'], nameDetails)}\n        {getDetails(entries, EVENT_TAGS, (entry) =>\n          eventDetails(entry, this.context.intl as InjectedIntl),\n        )}\n        {getOtherDetails(entries)}\n        {getDetails(entries, ['NOTE'], noteDetails)}\n      </div>\n    );\n  }\n}\n","import {JsonFam, JsonGedcomData, JsonIndi, gedcomEntriesToJson} from 'topola';\nimport {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\n\nexport interface GedcomData {\n  head: GedcomEntry;\n  indis: {[key: string]: GedcomEntry};\n  fams: {[key: string]: GedcomEntry};\n}\n\nexport interface TopolaData {\n  chartData: JsonGedcomData;\n  gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nfunction pointerToId(pointer: string): string {\n  return pointer.substring(1, pointer.length - 1);\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\n  const indis: {[key: string]: GedcomEntry} = {};\n  const fams: {[key: string]: GedcomEntry} = {};\n  entries.forEach((entry) => {\n    if (entry.tag === 'INDI') {\n      indis[pointerToId(entry.pointer)] = entry;\n    } else if (entry.tag === 'FAM') {\n      fams[pointerToId(entry.pointer)] = entry;\n    }\n  });\n  return {head, indis, fams};\n}\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const idToIndiMap = new Map<string, JsonIndi>();\n  gedcom.indis.forEach((indi) => {\n    idToIndiMap[indi.id] = indi;\n  });\n\n  return (indiId1: string, indiId2: string) => {\n    const idComparison = strcmp(indiId1, indiId2);\n    const indi1: JsonIndi = idToIndiMap[indiId1];\n    const indi2: JsonIndi = idToIndiMap[indiId2];\n    const birth1 = indi1 && indi1.birth;\n    const birth2 = indi2 && indi2.birth;\n    const date1 =\n      birth1 && (birth1.date || (birth1.dateRange && birth1.dateRange.from));\n    const date2 =\n      birth2 && (birth2.date || (birth2.dateRange && birth2.dateRange.from));\n    if (!date1 || !date1.year || !date2 || !date2.year) {\n      return idComparison;\n    }\n    if (date1.year !== date2.year) {\n      return date1.year - date2.year;\n    }\n    if (!date1.month || !date2.month) {\n      return idComparison;\n    }\n    if (date1.month !== date2.month) {\n      return date1.month - date2.month;\n    }\n    if (date1.day && date2.day && date1.day !== date2.day) {\n      return date1.month - date2.month;\n    }\n    return idComparison;\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(fam: JsonFam, gedcom: JsonGedcomData): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(birthDatesComparator(gedcom));\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, gedcom));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n  if (indi.imageUrl) {\n    const fileName = indi.imageUrl.match(/[^/\\\\]*$/)![0];\n    if (images.has(fileName)) {\n      const newIndi = Object.assign({}, indi);\n      newIndi.imageUrl = images.get(fileName);\n      return newIndi;\n    }\n  }\n  if (!indi.imageUrl || indi.imageUrl.startsWith('http')) {\n    return indi;\n  }\n  const newIndi = Object.assign({}, indi);\n  delete newIndi.imageUrl;\n  return newIndi;\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n  gedcom: JsonGedcomData,\n  images: Map<string, string>,\n): JsonGedcomData {\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n  gedcom: string,\n  images: Map<string, string>,\n): TopolaData {\n  const entries = parseGedcom(gedcom);\n  const json = gedcomEntriesToJson(entries);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new Error('Failed to read GEDCOM file');\n  }\n\n  return {\n    chartData: filterImages(sortChildren(json), images),\n    gedcom: prepareGedcom(entries),\n  };\n}\n","import {convertGedcom, TopolaData} from './gedcom_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  indi?: string,\n  generation?: number,\n): IndiInfo {\n  return {\n    id: indi || data.indis[0].id,\n    generation: generation || 0,\n  };\n}\n\nfunction prepareData(\n  gedcom: string,\n  cacheId: string,\n  images?: Map<string, string>,\n): TopolaData {\n  const data = convertGedcom(gedcom, images || new Map());\n  const serializedData = JSON.stringify(data);\n  try {\n    sessionStorage.setItem(cacheId, serializedData);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n  return data;\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<TopolaData> {\n  const cachedData = sessionStorage.getItem(url);\n  if (cachedData) {\n    return Promise.resolve(JSON.parse(cachedData));\n  }\n  const urlToFetch = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/' + url\n    : url;\n\n  return window\n    .fetch(urlToFetch)\n    .then((response) => {\n      if (response.status !== 200) {\n        return Promise.reject(new Error(response.statusText));\n      }\n      return response.text();\n    })\n    .then((gedcom) => {\n      return prepareData(gedcom, url);\n    });\n}\n\n/** Loads data from the given GEDCOM file contents. */\nfunction loadGedcomSync(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n) {\n  const cachedData = sessionStorage.getItem(hash);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  if (!gedcom) {\n    throw new Error('Error loading data. Please upload your file again.');\n  }\n  return prepareData(gedcom, hash, images);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport function loadGedcom(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n): Promise<TopolaData> {\n  try {\n    return Promise.resolve(loadGedcomSync(hash, gedcom, images));\n  } catch (e) {\n    return Promise.reject(new Error('Failed to read GEDCOM file'));\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Card} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\n/** The intro page. */\nexport function Intro() {\n  return (\n    <Card className=\"intro\">\n      <Card.Content>\n        <Card.Header>\n          <FormattedMessage\n            id=\"intro.title\"\n            defaultMessage=\"Topola Genealogy Viewer\"\n          />\n        </Card.Header>\n      </Card.Content>\n      <Card.Content>\n        <p>\n          <FormattedMessage\n            id=\"intro.description\"\n            defaultMessage={\n              'Topola Genealogy is a genealogy tree viewer that lets you' +\n              ' browse the structure of the family.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.instructions\"\n            defaultMessage={\n              'Use the LOAD FROM URL or LOAD FROM FILE buttons above to load' +\n              ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n              ' existing genealogy programs and web sites.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.examples\"\n            defaultMessage={\n              'Here are some examples from the web that you can view:'\n            }\n          />\n        </p>\n        <ul>\n          <li>\n            <GedcomLink\n              url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n              text=\"Karol Wojtyła\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n              GENPOL\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n              text=\"Shakespeare\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n              webtreeprint.com\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"http://genealogyoflife.com/tng/gedcom/HarryPotter.ged\"\n              text=\"Harry Potter\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://famousfamilytrees.blogspot.com/\">\n              Famous Family Trees\n            </a>\n            )\n          </li>\n        </ul>\n        <p>\n          <b>\n            <FormattedMessage id=\"intro.privacy\" defaultMessage=\"Privacy\" />\n          </b>\n          :\n          <FormattedMessage\n            id=\"intro.privacy_note\"\n            defaultMessage={\n              'When using the \"load from file\" option, this site does not' +\n              ' send your data anywhere and files loaded from disk do not' +\n              ' leave your computer. When using \"load from URL\", data is' +\n              ' passed through the {link} service to deal with an issue with' +\n              ' cross-site file loading in the browser (CORS).'\n            }\n            values={{\n              link: (\n                <a href=\"https://cors-anywhere.herokuapp.com/\">cors-anywhere</a>\n              ),\n            }}\n          />\n        </p>\n      </Card.Content>\n    </Card>\n  );\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport md5 from 'md5';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {\n  Header,\n  Button,\n  Icon,\n  Menu,\n  Modal,\n  Input,\n  Form,\n  Dropdown,\n} from 'semantic-ui-react';\n\n/** Menus and dialogs state. */\ninterface State {\n  loadUrlDialogOpen: boolean;\n  url?: string;\n}\n\ninterface Props {\n  showingChart: boolean;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\nfunction loadFileAsText(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsText(file);\n  });\n}\n\nfunction loadFileAsDataUrl(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction isImageFileName(fileName: string) {\n  const lower = fileName.toLowerCase();\n  return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\nexport class TopBar extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {loadUrlDialogOpen: false};\n  inputRef?: Input;\n\n  /** Handles the \"Upload file\" button. */\n  handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const filesArray = Array.from(files);\n    const gedcomFile =\n      files.length === 1\n        ? files[0]\n        : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n          files[0];\n\n    // Convert uploaded images to object URLs.\n    const images = filesArray\n      .filter(\n        (file) => file.name !== gedcomFile.name && isImageFileName(file.name),\n      )\n      .map((file) => ({\n        name: file.name,\n        url: URL.createObjectURL(file),\n      }));\n    const imageMap = new Map(\n      images.map((entry) => [entry.name, entry.url] as [string, string]),\n    );\n    loadFileAsText(gedcomFile).then((data) => {\n      const imageFileNames = images\n        .map((image) => image.name)\n        .sort()\n        .join('|');\n      // Hash GEDCOM contents with uploaded image file names.\n      const hash = md5(md5(data) + imageFileNames);\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({file: hash}),\n        state: {data, images: imageMap},\n      });\n    });\n    (event.target as HTMLInputElement).value = ''; // Reset the file input.\n  }\n\n  /** Opens the \"Load from URL\" dialog. */\n  handleLoadFromUrl() {\n    this.setState(\n      Object.assign({}, this.state, {loadUrlDialogOpen: true}),\n      () => this.inputRef!.focus(),\n    );\n  }\n\n  /** Cancels the \"Load from URL\" dialog. */\n  handleClose() {\n    this.setState(Object.assign({}, this.state, {loadUrlDialogOpen: false}));\n  }\n\n  /** Upload button clicked in the \"Load from URL\" dialog. */\n  handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        loadUrlDialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  handleUrlChange(event: React.SyntheticEvent) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: (event.target as HTMLInputElement).value,\n      }),\n    );\n  }\n\n  render() {\n    const loadFromUrlModal = (\n      <Modal\n        open={this.state.loadUrlDialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e) => this.handleUrlChange(e)}\n              ref={(ref) => (this.inputRef = ref!)}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://cors-anywhere.herokuapp.com/\">\n                      cors-anywhere.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n\n    const chartMenus = this.props.showingChart ? (\n      <>\n        <Menu.Item as=\"a\" onClick={() => this.props.onPrint()}>\n          <Icon name=\"print\" />\n          <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n        </Menu.Item>\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"download\" />\n              <FormattedMessage id=\"menu.download\" defaultMessage=\"Download\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => this.props.onDownloadPdf()}>\n              <FormattedMessage id=\"menu.pdf_file\" defaultMessage=\"PDF file\" />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.props.onDownloadPng()}>\n              <FormattedMessage id=\"menu.png_file\" defaultMessage=\"PNG file\" />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.props.onDownloadSvg()}>\n              <FormattedMessage id=\"menu.svg_file\" defaultMessage=\"SVG file\" />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    ) : null;\n\n    return (\n      <Menu attached=\"top\" inverted color=\"blue\" size=\"large\">\n        <Link to=\"/\">\n          <Menu.Item>\n            <b>Topola Genealogy</b>\n          </Menu.Item>\n        </Link>\n        <Menu.Item as=\"a\" onClick={() => this.handleLoadFromUrl()}>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </Menu.Item>\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged,image/*\"\n          id=\"fileInput\"\n          multiple\n          onChange={(e) => this.handleUpload(e)}\n        />\n        <label htmlFor=\"fileInput\">\n          <Menu.Item as=\"a\">\n            <Icon name=\"folder open\" />\n            <FormattedMessage\n              id=\"menu.load_from_file\"\n              defaultMessage=\"Load from file\"\n            />\n          </Menu.Item>\n        </label>\n        {chartMenus}\n        <Menu.Item\n          as=\"a\"\n          href=\"https://github.com/PeWu/topola-viewer\"\n          position=\"right\"\n        >\n          <FormattedMessage\n            id=\"menu.github\"\n            defaultMessage=\"Source on GitHub\"\n          />\n        </Menu.Item>\n        {loadFromUrlModal}\n      </Menu>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Chart} from './chart';\nimport {Details} from './details';\nimport {getSelection, loadFromUrl, loadGedcom} from './load_data';\nimport {IndiInfo} from 'topola';\nimport {Intro} from './intro';\nimport {Loader, Message, Responsive} from 'semantic-ui-react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {TopBar} from './top_bar';\nimport {TopolaData} from './gedcom_util';\n\n/** Shows an error message. */\nexport function ErrorMessage(props: {message: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>Failed to load file</Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface State {\n  /** Loaded data. */\n  data?: TopolaData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Hash of the GEDCOM contents. */\n  hash?: string;\n  /** Error to display. */\n  error?: string;\n  /** True if currently loading. */\n  loading: boolean;\n  /** URL of the data that is loaded or is being loaded. */\n  url?: string;\n  /** Whether the side panel is shoen. */\n  showSidePanel?: boolean;\n}\n\nexport class App extends React.Component<RouteComponentProps, {}> {\n  state: State = {loading: false};\n  chartRef: Chart | null = null;\n\n  private isNewData(\n    hash: string | undefined,\n    url: string | undefined,\n  ): boolean {\n    return (\n      !!(hash && hash !== this.state.hash) || !!(url && this.state.url !== url)\n    );\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      return;\n    }\n    const gedcom = this.props.location.state && this.props.location.state.data;\n    const images =\n      this.props.location.state && this.props.location.state.images;\n    const search = queryString.parse(this.props.location.search);\n    const getParam = (name: string) => {\n      const value = search[name];\n      return typeof value === 'string' ? value : undefined;\n    };\n    const url = getParam('url');\n    const indi = getParam('indi');\n    const parsedGen = Number(getParam('gen'));\n    const generation = !isNaN(parsedGen) ? parsedGen : undefined;\n    const hash = getParam('file');\n    const handleCors = getParam('handleCors') !== 'false'; // True by default.\n    const showSidePanel = getParam('sidePanel') !== 'false'; // True by default.\n\n    if (!url && !hash) {\n      this.props.history.replace({pathname: '/'});\n    } else if (this.isNewData(hash, url)) {\n      const loadedData = hash\n        ? loadGedcom(hash, gedcom, images)\n        : loadFromUrl(url!, handleCors);\n      loadedData.then(\n        (data) => {\n          // Set state with data.\n          this.setState(\n            Object.assign({}, this.state, {\n              data,\n              hash,\n              selection: getSelection(data.chartData, indi, generation),\n              error: undefined,\n              loading: false,\n              url,\n              showSidePanel,\n            }),\n          );\n        },\n        (error) => {\n          // Set error state.\n          this.setState(\n            Object.assign({}, this.state, {\n              error: error.message,\n              loading: false,\n            }),\n          );\n        },\n      );\n      // Set loading state.\n      this.setState(\n        Object.assign({}, this.state, {\n          data: undefined,\n          selection: undefined,\n          hash,\n          error: undefined,\n          loading: true,\n          url,\n        }),\n      );\n    } else if (this.state.data && this.state.selection) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(\n        this.state.data.chartData,\n        indi,\n        generation,\n      );\n      if (\n        this.state.selection.id !== selection.id ||\n        this.state.selection.generation !== selection.generation\n      ) {\n        this.setState(\n          Object.assign({}, this.state, {\n            selection,\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    search.indi = selection.id;\n    search.gen = String(selection.generation);\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  };\n\n  private renderMainArea = () => {\n    if (this.state.data && this.state.selection) {\n      return (\n        <div id=\"content\">\n          <Chart\n            data={this.state.data.chartData}\n            onSelection={this.onSelection}\n            selection={this.state.selection}\n            ref={(ref) => (this.chartRef = ref)}\n          />\n          {this.state.showSidePanel ? (\n            <Responsive minWidth={768} id=\"sidePanel\">\n              <Details\n                gedcom={this.state.data.gedcom}\n                indi={this.state.selection.id}\n              />\n            </Responsive>\n          ) : null}\n        </div>\n      );\n    }\n    if (this.state.error) {\n      return <ErrorMessage message={this.state.error!} />;\n    }\n    return <Loader active size=\"large\" />;\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              showingChart={\n                !!(\n                  this.props.history.location.pathname === '/view' &&\n                  this.state.data &&\n                  this.state.selection\n                )\n              }\n              onPrint={() => this.chartRef && this.chartRef.print()}\n              onDownloadPdf={() => this.chartRef && this.chartRef.downloadPdf()}\n              onDownloadPng={() => this.chartRef && this.chartRef.downloadPng()}\n              onDownloadSvg={() => this.chartRef && this.chartRef.downloadSvg()}\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n","import * as locale_en from 'react-intl/locale-data/en';\nimport * as locale_pl from 'react-intl/locale-data/pl';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_pl from './translations/pl.json';\nimport {addLocaleData} from 'react-intl';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\naddLocaleData([...locale_en, ...locale_pl]);\n\nconst messages = {\n  pl: messages_pl,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Router>\n        <Route component={App} />\n      </Router>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}