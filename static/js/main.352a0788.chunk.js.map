{"version":3,"sources":["analytics.ts","chart.tsx","date_util.ts","details.tsx","gedcom_util.ts","load_data.ts","intro.tsx","search_index.ts","search_util.tsx","top_bar.tsx","app.tsx","index.tsx"],"names":["analyticsEvent","action","data","window","gtag","ChartType","zoomed","parent","d3","node","parentElement","scrollLeft","transform","x","scrollTop","y","scrolled","clientWidth","clientHeight","call","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","e","target","result","inlineImage","_callee6","image","href","response","dataUrl","regenerator_default","a","wrap","_context6","prev","next","baseVal","abrupt","fetch","sent","t0","console","warn","stop","inlineImages","_callee7","svg","images","_context7","Array","from","getElementsByTagName","all","map","loadImage","Image","src","URL","createObjectURL","addEventListener","drawOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","type","toBlob","Chart","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","chart","inherits","createClass","key","value","props","chartType","Hourglass","HourglassChart","Relatives","RelativesChart","Fancy","FancyChart","CircleRenderer","DetailedRenderer","_this2","undefined","initialRender","innerHTML","createChart","json","getChartType","renderer","getRendererType","svgSelector","indiCallback","info","onSelection","animate","updateSvgSize","locale","context","intl","chartInfo","render","startIndi","selection","id","baseGeneration","generation","on","scaleExtent","translateExtent","size","dx","origin","dy","offsetX","offsetY","svgTransition","transition","delay","duration","attr","tween","i","t","renderChart","prevProps","react","getElementById","cloneNode","removeAttribute","XMLSerializer","serializeToString","_getSvgContentsWithInlinedImages","asyncToGenerator","mark","_callee","_context","_this3","printWindow","style","position","top","left","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","_downloadSvg","_callee2","contents","_context2","getSvgContentsWithInlinedImages","Blob","saveAs","_drawOnCanvas2","_callee3","_context3","t1","_downloadPng","_callee4","_context4","_downloadPdf","_callee5","doc","_context5","jsPDF","orientation","unit","format","addImage","save","React","contextTypes","intlShape","DATE_QUALIFIERS","Map","formatDate","date","hasDay","day","hasMonth","month","hasYear","year","text","dateObject","Date","qualifier","toLowerCase","formatOptions","formatMessage","defaultMessage","get","Intl","DateTimeFormat","join","translateDate","gedcomDate","dateOrRange","getDate","dateRange","fromDate","toDate","to","translatedFromDate","translatedToDate","formatDateRage","EVENT_TAGS","EXCLUDED_TAGS","TAG_DESCRIPTIONS","translateTag","tag","index_es","joinLines","lines","line","index","Linkify_default","properties","getData","entry","tree","forEach","subentry","last","push","noteDetails","nameDetails","className","split","filter","name","getDetails","entries","tags","detailsFunction","flatMap","element","hasData","startsWith","getOtherDetails","includes","toConsumableArray","note","dataDetails","Details","_React$Component","gedcom","indis","indi","entriesWithData","find","place","eventDetails","pointerToId","pointer","substring","prepareGedcom","head","fams","sortChildren","comparator","idToIndiMap","indiId1","indiId2","b","idComparison","indi1","indi2","birth1","birth","birth2","date1","date2","birthDatesComparator","newFams","fam","children","newChildren","sort","assign","sortFamilyChildren","filterImages","newIndis","imageUrl","fileName","match","has","newIndi","filterImage","getSoftware","sour","getSelection","prepareData","cacheId","parseGedcom","gedcomEntriesToJson","Error","chartData","convertGedcom","serializedData","JSON","stringify","sessionStorage","setItem","loadFromUrl","_x","_x2","_loadFromUrl","url","handleCors","cachedData","urlToFetch","getItem","parse","status","statusText","loadGedcom","_x3","_x4","_x5","_loadGedcom","hash","GedcomLink","Link","pathname","search","queryString","Intro","Card","Content","Header","values","link","compare","score","naturalSort","ref","LunrSearchIndex","lunr","field","add","normalizedName","input","toLocaleLowerCase","normalize","replace","query","s","slice","getNameLine","nameTag","eventEntry","dateEntry","getDescriptionLine","birthDate","deathDate","loadFileAsText","file","evt","readAsText","isImageFileName","lower","endsWith","EmbeddedMessageType","TopBar","state","loadUrlDialogOpen","searchResults","inputRef","searchRef","searchIndex","_handleUpload","event","files","filesArray","gedcomFile","imageMap","imageFileNames","event_value","md5","location","history","setState","results","title","description","displaySearchResult","eventHandlers","setValue","view","initializeSearchIndex","_this4","loadFromUrlModal","Modal","onClose","handleClose","centered","Icon","txt","Form","onSubmit","handleLoad","Input","placeholder","fluid","onChange","handleUrlChange","Actions","Button","secondary","onClick","primary","chartMenus","showingChart","Menu","Item","as","onPrint","Dropdown","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","changeView","Search","onSearchChange","debounce","_","handleSearch","onResultSelect","handleResultSelect","noResultsMessage","selectFirstResult","fileMenus","standalone","handleLoadFromUrl","accept","multiple","handleUpload","htmlFor","sourceLink","attached","inverted","color","ErrorMessage","Message","negative","message","ErrorPopup","Portal","onDismiss","App","loading","embedded","showErrorPopup","chartRef","updateDisplay","gen","String","downloadPdf","downloadPng","downloadSvg","onDismissErrorPopup","renderMainArea","error","chart_Chart","showSidePanel","Responsive","minWidth","details_Details","Loader","active","_onMessage","PARENT_READY","postMessage","READY","GEDCOM","event_label","setError","componentDidUpdate","_componentDidUpdate","getParam","parsedGen","chartTypes","software","onMessage","Number","isNaN","isNewData","Route","top_bar_TopBar","Switch","exact","path","component","Redirect","addLocaleData","locale_en","locale_pl","messages","pl","messages_pl","language","navigator","browser","detect","ReactDOM","querySelector","HashRouter"],"mappings":"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","file":"static/js/main.352a0788.chunk.js","sourcesContent":["/** Sends an event to Google Analytics. */\nexport function analyticsEvent(action: string, data?: any) {\n  (window as any).gtag('event', action, data);\n}\n","import * as d3 from 'd3';\nimport * as React from 'react';\nimport jsPDF from 'jspdf';\nimport {intlShape} from 'react-intl';\nimport {saveAs} from 'file-saver';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n  RelativesChart,\n  FancyChart,\n  CircleRenderer,\n} from 'topola';\n\n/** Called when the view is dragged with the mouse. */\nfunction zoomed() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement!;\n  parent.scrollLeft = -d3.event.transform.x;\n  parent.scrollTop = -d3.event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  d3.select(parent).call(d3.zoom().translateTo, x, y);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\n  });\n}\n\nasync function inlineImage(image: SVGImageElement) {\n  const href = image.href.baseVal;\n  if (!href) {\n    return;\n  }\n  try {\n    const response = await fetch(href);\n    const blob = await response.blob();\n    const dataUrl = await loadAsDataUrl(blob);\n    image.href.baseVal = dataUrl;\n  } catch (e) {\n    console.warn('Failed to load image:', e);\n  }\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nasync function inlineImages(svg: Element): Promise<void> {\n  const images = Array.from(svg.getElementsByTagName('image'));\n  await Promise.all(images.map(inlineImage));\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = URL.createObjectURL(blob);\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    image.addEventListener('load', () => resolve(image));\n  });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawOnCanvas(image: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  // Scale image for better quality.\n  canvas.width = image.width * 2;\n  canvas.height = image.height * 2;\n\n  const ctx = canvas.getContext('2d')!;\n  const oldFill = ctx.fillStyle;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = oldFill;\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, type);\n  });\n}\n\n/** Supported chart types. */\nexport enum ChartType {\n  Hourglass,\n  Relatives,\n  Fancy,\n}\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  chartType: ChartType;\n  onSelection: (indiInfo: IndiInfo) => void;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class Chart extends React.PureComponent<ChartProps, {}> {\n  private chart?: ChartHandle;\n\n  private getChartType() {\n    switch (this.props.chartType) {\n      case ChartType.Hourglass:\n        return HourglassChart;\n      case ChartType.Relatives:\n        return RelativesChart;\n      case ChartType.Fancy:\n        return FancyChart;\n      default:\n        // Fall back to hourglass chart.\n        return HourglassChart;\n    }\n  }\n\n  private getRendererType() {\n    switch (this.props.chartType) {\n      case ChartType.Fancy:\n        return CircleRenderer;\n      default:\n        // Use DetailedRenderer by default.\n        return DetailedRenderer;\n    }\n  }\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(args: {initialRender: boolean} = {initialRender: false}) {\n    if (args.initialRender) {\n      (d3.select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: this.getChartType(),\n        renderer: this.getRendererType(),\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.context.intl.locale,\n      });\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = d3.select('#chart');\n    const parent = (svg.node() as HTMLElement).parentElement as Element;\n\n    d3.select(parent)\n      .on('scroll', scrolled)\n      .call(\n        d3\n          .zoom()\n          .scaleExtent([1, 1])\n          .translateExtent([[0, 0], chartInfo.size])\n          .on('zoom', zoomed),\n      );\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0];\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1];\n    const offsetX = d3.max([0, (parent.clientWidth - chartInfo.size[0]) / 2]);\n    const offsetY = d3.max([0, (parent.clientHeight - chartInfo.size[1]) / 2]);\n    const svgTransition = svg\n      .transition()\n      .delay(200)\n      .duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0])\n      .attr('height', chartInfo.size[1]);\n    if (args.initialRender) {\n      parent.scrollLeft = -dx;\n      parent.scrollTop = -dy;\n    } else {\n      svgTransition\n        .tween('scrollLeft', scrollLeftTween(-dx))\n        .tween('scrollTop', scrollTopTween(-dy));\n    }\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    const initialRender =\n      this.props.data !== prevProps.data ||\n      this.props.chartType !== prevProps.chartType;\n    this.renderChart({initialRender});\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <svg id=\"chart\" />\n      </div>\n    );\n  }\n\n  private getSvgContents() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  private async getSvgContentsWithInlinedImages() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    await inlineImages(svg);\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  async downloadSvg() {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    saveAs(blob, 'topola.svg');\n  }\n\n  private async drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    return await drawOnCanvas(await loadImage(blob));\n  }\n\n  async downloadPng() {\n    const canvas = await this.drawOnCanvas();\n    const blob = await canvasToBlob(canvas, 'image/png');\n    saveAs(blob, 'topola.png');\n  }\n\n  async downloadPdf() {\n    const canvas = await this.drawOnCanvas();\n    const doc = new jsPDF({\n      orientation: canvas.width > canvas.height ? 'l' : 'p',\n      unit: 'pt',\n      format: [canvas.width, canvas.height],\n    });\n    doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n    doc.save('topola.pdf');\n  }\n}\n","import {Date as TopolaDate, DateRange, getDate} from 'topola';\nimport {InjectedIntl} from 'react-intl';\n\nconst DATE_QUALIFIERS = new Map([\n  ['abt', 'about'],\n  ['cal', 'calculated'],\n  ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: InjectedIntl) {\n  const hasDay = date.day !== undefined;\n  const hasMonth = date.month !== undefined;\n  const hasYear = date.year !== undefined;\n  if (!hasDay && !hasMonth && !hasYear) {\n    return date.text || '';\n  }\n  const dateObject = new Date(\n    hasYear ? date.year! : 0,\n    hasMonth ? date.month! - 1 : 0,\n    hasDay ? date.day! : 1,\n  );\n\n  const qualifier = date.qualifier && date.qualifier.toLowerCase();\n  const translatedQualifier =\n    qualifier &&\n    intl.formatMessage({\n      id: `date.${qualifier}`,\n      defaultMessage: DATE_QUALIFIERS.get(qualifier) || qualifier,\n    });\n\n  const formatOptions = {\n    day: hasDay ? 'numeric' : undefined,\n    month: hasMonth ? 'long' : undefined,\n    year: hasYear ? 'numeric' : undefined,\n  };\n  const translatedDate = new Intl.DateTimeFormat(\n    intl.locale,\n    formatOptions,\n  ).format(dateObject);\n\n  return [translatedQualifier, translatedDate].join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: InjectedIntl) {\n  const fromDate = dateRange.from;\n  const toDate = dateRange.to;\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\n  const translatedToDate = toDate && formatDate(toDate, intl);\n  if (translatedFromDate && translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.between',\n        defaultMessage: 'between {from} and {to}',\n      },\n      {from: translatedFromDate, to: translatedToDate},\n    );\n  }\n  if (translatedFromDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.after',\n        defaultMessage: 'after {from}',\n      },\n      {from: translatedFromDate},\n    );\n  }\n  if (translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.before',\n        defaultMessage: 'before {to}',\n      },\n      {to: translatedToDate},\n    );\n  }\n  return '';\n}\n\n/** Formats a date given in GEDCOM format. */\nexport function translateDate(gedcomDate: string, intl: InjectedIntl) {\n  const dateOrRange = getDate(gedcomDate);\n  if (!dateOrRange) {\n    return '';\n  }\n  if (dateOrRange.date) {\n    return formatDate(dateOrRange.date, intl);\n  }\n  if (dateOrRange.dateRange) {\n    return formatDateRage(dateOrRange.dateRange, intl);\n  }\n  return '';\n}\n","import * as React from 'react';\nimport flatMap from 'array.prototype.flatmap';\nimport Linkify from 'react-linkify';\nimport {FormattedMessage, InjectedIntl} from 'react-intl';\nimport {GedcomData} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {intlShape} from 'react-intl';\nimport {translateDate} from './date_util';\n\ninterface Props {\n  gedcom: GedcomData;\n  indi: string;\n}\n\nconst EVENT_TAGS = ['BIRT', 'BAPM', 'CHR', 'DEAT', 'BURI'];\nconst EXCLUDED_TAGS = ['NAME', 'SEX', 'FAMC', 'FAMS', 'NOTE'];\nconst TAG_DESCRIPTIONS = new Map([\n  ['BAPM', 'Baptism'],\n  ['BIRT', 'Birth'],\n  ['BURI', 'Burial'],\n  ['CHR', 'Christening'],\n  ['DEAT', 'Death'],\n  ['EMAIL', 'E-mail'],\n  ['OCCU', 'Occupation'],\n  ['TITL', 'Title'],\n  ['WWW', 'WWW'],\n]);\n\nfunction translateTag(tag: string) {\n  return (\n    <FormattedMessage\n      id={`gedcom.${tag}`}\n      defaultMessage={TAG_DESCRIPTIONS.get(tag) || tag}\n    />\n  );\n}\n\nfunction joinLines(lines: (JSX.Element | string)[]) {\n  return (\n    <>\n      {lines.map((line, index) => (\n        <div key={index}>\n          <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n          <br />\n        </div>\n      ))}\n    </>\n  );\n}\n\n/**\n * Returns the data for the given GEDCOM entry as an array of lines. Supports\n * continuations with CONT and CONC.\n */\nfunction getData(entry: GedcomEntry) {\n  const result = [entry.data];\n  entry.tree.forEach((subentry) => {\n    if (subentry.tag === 'CONC' && subentry.data) {\n      const last = result.length - 1;\n      result[last] += subentry.data;\n    } else if (subentry.tag === 'CONT' && subentry.data) {\n      result.push(subentry.data);\n    }\n  });\n  return result;\n}\n\nfunction eventDetails(entry: GedcomEntry, intl: InjectedIntl) {\n  const lines = [];\n  const date = entry.tree.find((subentry) => subentry.tag === 'DATE');\n  if (date && date.data) {\n    lines.push(translateDate(date.data, intl));\n  }\n  const place = entry.tree.find((subentry) => subentry.tag === 'PLAC');\n  if (place && place.data) {\n    lines.push(...getData(place));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction dataDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(...getData(entry));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n  return joinLines(\n    getData(entry).map((line, index) => <i key={index}>{line}</i>),\n  );\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n  return (\n    <h2 className=\"ui header\">\n      {entry.data\n        .split('/')\n        .filter((name) => !!name)\n        .map((name, index) => (\n          <div key={index}>\n            {name}\n            <br />\n          </div>\n        ))}\n    </h2>\n  );\n}\n\nfunction getDetails(\n  entries: GedcomEntry[],\n  tags: string[],\n  detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n  return flatMap(tags, (tag) =>\n    entries\n      .filter((entry) => entry.tag === tag)\n      .map((entry) => detailsFunction(entry)),\n  )\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * Returns true if there is displayable information in this entry.\n * Returns false if there is no data in this entry or this is only a reference\n * to another entry.\n */\nfunction hasData(entry: GedcomEntry) {\n  return entry.tree.length > 0 || (entry.data && !entry.data.startsWith('@'));\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n  return entries\n    .filter(\n      (entry) =>\n        !EXCLUDED_TAGS.includes(entry.tag) && !EVENT_TAGS.includes(entry.tag),\n    )\n    .filter(hasData)\n    .map((entry) => dataDetails(entry))\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\nexport class Details extends React.Component<Props, {}> {\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    const entries = this.props.gedcom.indis[this.props.indi].tree;\n    const entriesWithData = entries.filter(hasData);\n\n    return (\n      <div className=\"ui segments\" id=\"details\">\n        {getDetails(entries, ['NAME'], nameDetails)}\n        {getDetails(entries, EVENT_TAGS, (entry) =>\n          eventDetails(entry, this.context.intl as InjectedIntl),\n        )}\n        {getOtherDetails(entriesWithData)}\n        {getDetails(entriesWithData, ['NOTE'], noteDetails)}\n      </div>\n    );\n  }\n}\n","import {JsonFam, JsonGedcomData, JsonIndi, gedcomEntriesToJson} from 'topola';\nimport {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\n\nexport interface GedcomData {\n  head: GedcomEntry;\n  indis: {[key: string]: GedcomEntry};\n  fams: {[key: string]: GedcomEntry};\n}\n\nexport interface TopolaData {\n  chartData: JsonGedcomData;\n  gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nfunction pointerToId(pointer: string): string {\n  return pointer.substring(1, pointer.length - 1);\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\n  const indis: {[key: string]: GedcomEntry} = {};\n  const fams: {[key: string]: GedcomEntry} = {};\n  entries.forEach((entry) => {\n    if (entry.tag === 'INDI') {\n      indis[pointerToId(entry.pointer)] = entry;\n    } else if (entry.tag === 'FAM') {\n      fams[pointerToId(entry.pointer)] = entry;\n    }\n  });\n  return {head, indis, fams};\n}\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const idToIndiMap = new Map<string, JsonIndi>();\n  gedcom.indis.forEach((indi) => {\n    idToIndiMap[indi.id] = indi;\n  });\n\n  return (indiId1: string, indiId2: string) => {\n    const idComparison = strcmp(indiId1, indiId2);\n    const indi1: JsonIndi = idToIndiMap[indiId1];\n    const indi2: JsonIndi = idToIndiMap[indiId2];\n    const birth1 = indi1 && indi1.birth;\n    const birth2 = indi2 && indi2.birth;\n    const date1 =\n      birth1 && (birth1.date || (birth1.dateRange && birth1.dateRange.from));\n    const date2 =\n      birth2 && (birth2.date || (birth2.dateRange && birth2.dateRange.from));\n    if (!date1 || !date1.year || !date2 || !date2.year) {\n      return idComparison;\n    }\n    if (date1.year !== date2.year) {\n      return date1.year - date2.year;\n    }\n    if (!date1.month || !date2.month) {\n      return idComparison;\n    }\n    if (date1.month !== date2.month) {\n      return date1.month - date2.month;\n    }\n    if (date1.day && date2.day && date1.day !== date2.day) {\n      return date1.month - date2.month;\n    }\n    return idComparison;\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(\n  fam: JsonFam,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(comparator);\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = birthDatesComparator(gedcom);\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, comparator));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n  if (indi.imageUrl) {\n    const fileName = indi.imageUrl.match(/[^/\\\\]*$/)![0];\n    if (images.has(fileName)) {\n      const newIndi = Object.assign({}, indi);\n      newIndi.imageUrl = images.get(fileName);\n      return newIndi;\n    }\n  }\n  if (!indi.imageUrl || indi.imageUrl.startsWith('http')) {\n    return indi;\n  }\n  const newIndi = Object.assign({}, indi);\n  delete newIndi.imageUrl;\n  return newIndi;\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n  gedcom: JsonGedcomData,\n  images: Map<string, string>,\n): JsonGedcomData {\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n  gedcom: string,\n  images: Map<string, string>,\n): TopolaData {\n  const entries = parseGedcom(gedcom);\n  const json = gedcomEntriesToJson(entries);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new Error('Failed to read GEDCOM file');\n  }\n\n  return {\n    chartData: filterImages(sortChildren(json), images),\n    gedcom: prepareGedcom(entries),\n  };\n}\n\nexport function getSoftware(head: GedcomEntry): string | null {\n  const sour =\n    head && head.tree && head.tree.find((entry) => entry.tag === 'SOUR');\n  const name =\n    sour && sour.tree && sour.tree.find((entry) => entry.tag === 'NAME');\n  return (name && name.data) || null;\n}\n","import {convertGedcom, TopolaData} from './gedcom_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  indi?: string,\n  generation?: number,\n): IndiInfo {\n  return {\n    id: indi || data.indis[0].id,\n    generation: generation || 0,\n  };\n}\n\nfunction prepareData(\n  gedcom: string,\n  cacheId: string,\n  images?: Map<string, string>,\n): TopolaData {\n  const data = convertGedcom(gedcom, images || new Map());\n  const serializedData = JSON.stringify(data);\n  try {\n    sessionStorage.setItem(cacheId, serializedData);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n  return data;\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport async function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(url);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  const urlToFetch = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/' + url\n    : url;\n\n  const response = await window.fetch(urlToFetch);\n  if (response.status !== 200) {\n    throw new Error(response.statusText);\n  }\n  const gedcom = await response.text();\n  return prepareData(gedcom, url);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport async function loadGedcom(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(hash);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  if (!gedcom) {\n    throw new Error('Error loading data. Please upload your file again.');\n  }\n  return prepareData(gedcom, hash, images);\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Card} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\n/** The intro page. */\nexport function Intro() {\n  return (\n    <Card className=\"intro\">\n      <Card.Content>\n        <Card.Header>\n          <FormattedMessage\n            id=\"intro.title\"\n            defaultMessage=\"Topola Genealogy Viewer\"\n          />\n        </Card.Header>\n      </Card.Content>\n      <Card.Content>\n        <p>\n          <FormattedMessage\n            id=\"intro.description\"\n            defaultMessage={\n              'Topola Genealogy is a genealogy tree viewer that lets you' +\n              ' browse the structure of the family.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.instructions\"\n            defaultMessage={\n              'Use the LOAD FROM URL or LOAD FROM FILE buttons above to load' +\n              ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n              ' existing genealogy programs and web sites.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.examples\"\n            defaultMessage={\n              'Here are some examples from the web that you can view:'\n            }\n          />\n        </p>\n        <ul>\n          <li>\n            <GedcomLink\n              url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n              text=\"Karol Wojtyła\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n              GENPOL\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n              text=\"Shakespeare\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n              webtreeprint.com\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"http://genealogyoflife.com/tng/gedcom/HarryPotter.ged\"\n              text=\"Harry Potter\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://famousfamilytrees.blogspot.com/\">\n              Famous Family Trees\n            </a>\n            )\n          </li>\n        </ul>\n        <p>\n          <b>\n            <FormattedMessage id=\"intro.privacy\" defaultMessage=\"Privacy\" />\n          </b>\n          :\n          <FormattedMessage\n            id=\"intro.privacy_note\"\n            defaultMessage={\n              'When using the \"load from file\" option, this site does not' +\n              ' send your data anywhere and files loaded from disk do not' +\n              ' leave your computer. When using \"load from URL\", data is' +\n              ' passed through the {link} service to deal with an issue with' +\n              ' cross-site file loading in the browser (CORS).'\n            }\n            values={{\n              link: (\n                <a href=\"https://cors-anywhere.herokuapp.com/\">cors-anywhere</a>\n              ),\n            }}\n          />\n        </p>\n      </Card.Content>\n    </Card>\n  );\n}\n","import naturalSort from 'javascript-natural-sort';\nimport lunr from 'lunr';\nimport {GedcomData} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\n\nconst MAX_RESULTS = 8;\n\nexport interface SearchResult {\n  id: string;\n  indi: GedcomEntry;\n}\n\nexport interface SearchIndex {\n  search(input: string): SearchResult[];\n}\n\n/** Removes accents from letters, e.g. ó->o, ę->e. */\nfunction normalize(input: string) {\n  return input\n    .toLocaleLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/\\u0142/g, 'l'); // Special case: ł is not affected by NFD.\n}\n\n/** Comparator to sort by score first, then by id. */\nfunction compare(a: lunr.Index.Result, b: lunr.Index.Result) {\n  if (a.score !== b.score) {\n    return a.score - b.score;\n  }\n  return naturalSort(a.ref, b.ref);\n}\n\nclass LunrSearchIndex implements SearchIndex {\n  private index: lunr.Index;\n\n  public constructor(private gedcom: GedcomData) {\n    this.index = lunr(function() {\n      this.ref('id');\n      this.field('id');\n      this.field('name');\n      this.field('normalizedName');\n\n      for (let id in gedcom.indis) {\n        const name = gedcom.indis[id].tree\n          .filter((entry) => entry.tag === 'NAME')\n          .map((entry) => entry.data)\n          .join(' ');\n        this.add({id, name, normalizedName: normalize(name)});\n      }\n    });\n  }\n\n  public search(input: string) {\n    const query = input\n      .split(' ')\n      .filter((s) => !!s)\n      .map((s) => `+${s}*`)\n      .join(' ');\n    const results = this.index.search(query);\n    return results\n      .sort(compare)\n      .slice(0, MAX_RESULTS)\n      .map((result) => ({id: result.ref, indi: this.gedcom.indis[result.ref]}));\n  }\n}\n\n/** Builds a search index from data. */\nexport function buildSearchIndex(gedcom: GedcomData): SearchIndex {\n  return new LunrSearchIndex(gedcom);\n}\n","import * as React from 'react';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {InjectedIntl} from 'react-intl';\nimport {SearchResult} from './search_index';\nimport {translateDate} from './date_util';\n\nfunction getNameLine(result: SearchResult) {\n  const nameTag = result.indi.tree.find((entry) => entry.tag === 'NAME');\n  const name =\n    nameTag &&\n    nameTag.data\n      .split('/')\n      .filter((s) => !!s)\n      .join(' ');\n  if (result.id.length > 8) {\n    return name;\n  }\n  return (\n    <>\n      {name} <i>({result.id})</i>\n    </>\n  );\n}\n\nfunction getDate(indi: GedcomEntry, tag: string, intl: InjectedIntl) {\n  const eventEntry = indi.tree.find((entry) => entry.tag === tag);\n  const dateEntry =\n    eventEntry && eventEntry.tree.find((entry) => entry.tag === 'DATE');\n  return (dateEntry && translateDate(dateEntry.data, intl)) || '';\n}\n\nfunction getDescriptionLine(indi: GedcomEntry, intl: InjectedIntl) {\n  const birthDate = getDate(indi, 'BIRT', intl);\n  const deathDate = getDate(indi, 'DEAT', intl);\n  if (!deathDate) {\n    return birthDate;\n  }\n  return `${birthDate} – ${deathDate}`;\n}\n\n/** Produces an object that is displayed in the Semantic UI Search results. */\nexport function displaySearchResult(result: SearchResult, intl: InjectedIntl) {\n  return {\n    id: result.id,\n    key: result.id,\n    title: getNameLine(result),\n    description: getDescriptionLine(result.indi, intl),\n  };\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport debounce from 'debounce';\nimport md5 from 'md5';\nimport {analyticsEvent} from './analytics';\nimport {buildSearchIndex, SearchIndex, SearchResult} from './search_index';\nimport {displaySearchResult} from './search_util';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {GedcomData} from './gedcom_util';\nimport {IndiInfo} from 'topola';\nimport {Link} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {\n  Header,\n  Button,\n  Icon,\n  Menu,\n  Modal,\n  Input,\n  Form,\n  Dropdown,\n  Search,\n  SearchProps,\n} from 'semantic-ui-react';\n\n/** Menus and dialogs state. */\ninterface State {\n  loadUrlDialogOpen: boolean;\n  url?: string;\n  searchResults: SearchResult[];\n}\n\ninterface EventHandlers {\n  onSelection: (indiInfo: IndiInfo) => void;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\ninterface Props {\n  showingChart: boolean;\n  gedcom?: GedcomData;\n  standalone: boolean;\n  eventHandlers: EventHandlers;\n}\n\nfunction loadFileAsText(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsText(file);\n  });\n}\n\nfunction isImageFileName(fileName: string) {\n  const lower = fileName.toLowerCase();\n  return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\nexport class TopBar extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {\n    loadUrlDialogOpen: false,\n    searchResults: [],\n  };\n  inputRef?: Input;\n  searchRef?: {setValue(value: string): void};\n  searchIndex?: SearchIndex;\n\n  /** Handles the \"Upload file\" button. */\n  async handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const filesArray = Array.from(files);\n    (event.target as HTMLInputElement).value = ''; // Reset the file input.\n    analyticsEvent('upload_files_selected', {\n      event_value: files.length,\n    });\n\n    const gedcomFile =\n      filesArray.length === 1\n        ? filesArray[0]\n        : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n          filesArray[0];\n\n    // Convert uploaded images to object URLs.\n    const images = filesArray\n      .filter(\n        (file) => file.name !== gedcomFile.name && isImageFileName(file.name),\n      )\n      .map((file) => ({\n        name: file.name,\n        url: URL.createObjectURL(file),\n      }));\n    const imageMap = new Map(\n      images.map((entry) => [entry.name, entry.url] as [string, string]),\n    );\n\n    const data = await loadFileAsText(gedcomFile);\n    const imageFileNames = images\n      .map((image) => image.name)\n      .sort()\n      .join('|');\n    // Hash GEDCOM contents with uploaded image file names.\n    const hash = md5(md5(data) + imageFileNames);\n\n    // Use history.replace() when reuploading the same file and history.push() when loading\n    // a new file.\n    const search = queryString.parse(this.props.location.search);\n    const historyPush =\n      search.file === hash\n        ? this.props.history.replace\n        : this.props.history.push;\n\n    historyPush({\n      pathname: '/view',\n      search: queryString.stringify({file: hash}),\n      state: {data, images: imageMap},\n    });\n  }\n\n  /** Opens the \"Load from URL\" dialog. */\n  handleLoadFromUrl() {\n    this.setState(\n      Object.assign({}, this.state, {loadUrlDialogOpen: true}),\n      () => this.inputRef!.focus(),\n    );\n  }\n\n  /** Cancels the \"Load from URL\" dialog. */\n  handleClose() {\n    this.setState(Object.assign({}, this.state, {loadUrlDialogOpen: false}));\n  }\n\n  /** Upload button clicked in the \"Load from URL\" dialog. */\n  handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        loadUrlDialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      analyticsEvent('url_selected');\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  handleUrlChange(event: React.SyntheticEvent) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: (event.target as HTMLInputElement).value,\n      }),\n    );\n  }\n\n  /** On search input change. */\n  handleSearch(input: string | undefined) {\n    if (!input) {\n      return;\n    }\n    const results = this.searchIndex!.search(input).map((result) =>\n      displaySearchResult(result, this.context.intl),\n    );\n    this.setState(Object.assign({}, this.state, {searchResults: results}));\n  }\n\n  /** On search result selected. */\n  handleResultSelect(id: string) {\n    analyticsEvent('search_result_selected');\n    this.props.eventHandlers.onSelection({id, generation: 0});\n    this.searchRef!.setValue('');\n  }\n\n  initializeSearchIndex() {\n    if (this.props.gedcom) {\n      this.searchIndex = buildSearchIndex(this.props.gedcom);\n    }\n  }\n\n  changeView(view: string) {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    if (search.view !== view) {\n      search.view = view;\n      location.search = queryString.stringify(search);\n      this.props.history.push(location);\n    }\n  }\n\n  componentDidMount() {\n    this.initializeSearchIndex();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.gedcom !== this.props.gedcom) {\n      this.initializeSearchIndex();\n    }\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    const loadFromUrlModal = (\n      <Modal\n        open={this.state.loadUrlDialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e) => this.handleUrlChange(e)}\n              ref={(ref) => (this.inputRef = ref!)}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://cors-anywhere.herokuapp.com/\">\n                      cors-anywhere.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n\n    const chartMenus = this.props.showingChart ? (\n      <>\n        <Menu.Item as=\"a\" onClick={() => this.props.eventHandlers.onPrint()}>\n          <Icon name=\"print\" />\n          <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n        </Menu.Item>\n\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"download\" />\n              <FormattedMessage id=\"menu.download\" defaultMessage=\"Download\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPdf()}\n            >\n              <FormattedMessage id=\"menu.pdf_file\" defaultMessage=\"PDF file\" />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPng()}\n            >\n              <FormattedMessage id=\"menu.png_file\" defaultMessage=\"PNG file\" />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadSvg()}\n            >\n              <FormattedMessage id=\"menu.svg_file\" defaultMessage=\"SVG file\" />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"eye\" />\n              <FormattedMessage id=\"menu.view\" defaultMessage=\"View\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => this.changeView('hourglass')}>\n              <Icon name=\"hourglass\" />\n              <FormattedMessage\n                id=\"menu.hourglass\"\n                defaultMessage=\"Hourglass chart\"\n              />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.changeView('relatives')}>\n              <Icon name=\"users\" />\n              <FormattedMessage\n                id=\"menu.relatives\"\n                defaultMessage=\"All relatives\"\n              />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.changeView('fancy')}>\n              <Icon name=\"users\" />\n              <FormattedMessage\n                id=\"menu.fancy\"\n                defaultMessage=\"Fancy tree (experimental)\"\n              />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Search\n          onSearchChange={debounce(\n            (_: React.MouseEvent<HTMLElement>, data: SearchProps) =>\n              this.handleSearch(data.value),\n            200,\n          )}\n          onResultSelect={(_, data) => this.handleResultSelect(data.result.id)}\n          results={this.state.searchResults}\n          noResultsMessage={this.context.intl.formatMessage({\n            id: 'menu.search.no_results',\n            defaultMessage: 'No results found',\n          })}\n          placeholder={this.context.intl.formatMessage({\n            id: 'menu.search.placeholder',\n            defaultMessage: 'Search for people',\n          })}\n          selectFirstResult={true}\n          ref={(ref) =>\n            (this.searchRef = (ref as unknown) as {\n              setValue(value: string): void;\n            })\n          }\n        />\n      </>\n    ) : null;\n\n    const fileMenus = this.props.standalone ? (\n      <>\n        <Link to=\"/\">\n          <Menu.Item>\n            <b>Topola Genealogy</b>\n          </Menu.Item>\n        </Link>\n        <Menu.Item as=\"a\" onClick={() => this.handleLoadFromUrl()}>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </Menu.Item>\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged,image/*\"\n          id=\"fileInput\"\n          multiple\n          onChange={(e) => this.handleUpload(e)}\n        />\n        <label htmlFor=\"fileInput\">\n          <Menu.Item as=\"a\">\n            <Icon name=\"folder open\" />\n            <FormattedMessage\n              id=\"menu.load_from_file\"\n              defaultMessage=\"Load from file\"\n            />\n          </Menu.Item>\n        </label>\n      </>\n    ) : null;\n\n    const sourceLink = this.props.standalone ? (\n      <>\n        <Menu.Item\n          as=\"a\"\n          href=\"https://github.com/PeWu/topola-viewer\"\n          position=\"right\"\n          target=\"_blank\"\n        >\n          <FormattedMessage\n            id=\"menu.github\"\n            defaultMessage=\"Source on GitHub\"\n          />\n        </Menu.Item>\n      </>\n    ) : (\n      <>\n        <Menu.Item\n          as=\"a\"\n          href=\"https://pewu.github.com/topola-viewer\"\n          position=\"right\"\n          target=\"_blank\"\n        >\n          <FormattedMessage\n            id=\"menu.powered_by\"\n            defaultMessage=\"Powered by Topola\"\n          />\n        </Menu.Item>\n      </>\n    );\n\n    return (\n      <Menu attached=\"top\" inverted color=\"blue\" size=\"large\">\n        {fileMenus}\n        {chartMenus}\n        {sourceLink}\n        {loadFromUrlModal}\n      </Menu>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {analyticsEvent} from './analytics';\nimport {Chart, ChartType} from './chart';\nimport {Details} from './details';\nimport {FormattedMessage} from 'react-intl';\nimport {getSelection, loadFromUrl, loadGedcom} from './load_data';\nimport {getSoftware, TopolaData} from './gedcom_util';\nimport {IndiInfo} from 'topola';\nimport {intlShape} from 'react-intl';\nimport {Intro} from './intro';\nimport {Loader, Message, Portal, Responsive} from 'semantic-ui-react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {TopBar} from './top_bar';\n\n/** Shows an error message in the middle of the screen. */\nfunction ErrorMessage(props: {message?: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>\n        <FormattedMessage\n          id=\"error.failed_to_load_file\"\n          defaultMessage={'Failed to load file'}\n        />\n      </Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface ErrorPopupProps {\n  message?: string;\n  open: boolean;\n  onDismiss: () => void;\n}\n\n/**\n * Shows a dismissable error message in the bottom left corner of the screen.\n */\nfunction ErrorPopup(props: ErrorPopupProps) {\n  return (\n    <Portal open={props.open} onClose={props.onDismiss}>\n      <Message negative className=\"errorPopup\" onDismiss={props.onDismiss}>\n        <Message.Header>\n          <FormattedMessage id=\"error.error\" defaultMessage={'Error'} />\n        </Message.Header>\n        <p>{props.message}</p>\n      </Message>\n    </Portal>\n  );\n}\n\n/**\n * Message types used in embedded mode.\n * When the parent is ready to receive messages, it sends PARENT_READY.\n * When the child (this app) is ready to receive messages, it sends READY.\n * When the child receives PARENT_READY, it sends READY.\n * When the parent receives READY, it sends data in a GEDCOM message.\n */\nenum EmbeddedMessageType {\n  GEDCOM = 'gedcom',\n  READY = 'ready',\n  PARENT_READY = 'parent_ready',\n}\n\n/** Message sent to parent or received from parent in embedded mode. */\ninterface EmbeddedMessage {\n  message: EmbeddedMessageType;\n}\n\ninterface GedcomMessage extends EmbeddedMessage {\n  message: EmbeddedMessageType.GEDCOM;\n  gedcom?: string;\n}\n\ninterface State {\n  /** Loaded data. */\n  data?: TopolaData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Hash of the GEDCOM contents. */\n  hash?: string;\n  /** Error to display. */\n  error?: string;\n  /** True if data is currently being loaded. */\n  loading: boolean;\n  /** URL of the data that is loaded or is being loaded. */\n  url?: string;\n  /** Whether the side panel is shown. */\n  showSidePanel?: boolean;\n  /** Whether the app is in embedded mode, i.e. embedded in an iframe. */\n  embedded: boolean;\n  /** Whether the app is in standalone mode, i.e. showing 'open file' menus. */\n  standalone: boolean;\n  /** Type of displayed chart. */\n  chartType: ChartType;\n  /** Whether to show the error popup. */\n  showErrorPopup: boolean;\n}\n\nexport class App extends React.Component<RouteComponentProps, {}> {\n  state: State = {\n    loading: false,\n    embedded: false,\n    standalone: true,\n    chartType: ChartType.Hourglass,\n    showErrorPopup: false,\n  };\n  chartRef: Chart | null = null;\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  private isNewData(\n    hash: string | undefined,\n    url: string | undefined,\n    gedcom: string | undefined,\n  ): boolean {\n    return (\n      !!(hash && hash !== this.state.hash) ||\n      !!(url && this.state.url !== url) ||\n      (!!gedcom && !this.state.loading && !this.state.data)\n    );\n  }\n\n  /** Sets the state with a new individual selection and chart type. */\n  private updateDisplay(selection: IndiInfo, chartType?: ChartType) {\n    if (\n      !this.state.selection ||\n      this.state.selection.id !== selection.id ||\n      this.state.selection!.generation !== selection.generation ||\n      (chartType !== undefined && chartType !== this.state.chartType)\n    ) {\n      this.setState(\n        Object.assign({}, this.state, {\n          selection,\n          chartType: chartType !== undefined ? chartType : this.state.chartType,\n        }),\n      );\n    }\n  }\n\n  /** Sets error message after data load failure. */\n  private setError(error: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        error: error,\n        loading: false,\n      }),\n    );\n  }\n\n  private async onMessage(message: EmbeddedMessage) {\n    if (message.message === EmbeddedMessageType.PARENT_READY) {\n      // Parent didn't receive the first 'ready' message, so we need to send it again.\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n    } else if (message.message === EmbeddedMessageType.GEDCOM) {\n      const gedcom = (message as GedcomMessage).gedcom;\n      if (!gedcom) {\n        return;\n      }\n      try {\n        const data = await loadGedcom('', gedcom);\n        const software = getSoftware(data.gedcom.head);\n        analyticsEvent('embedded_file_loaded', {\n          event_label: software,\n        });\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            selection: getSelection(data.chartData),\n            error: undefined,\n            loading: false,\n          }),\n        );\n      } catch (error) {\n        analyticsEvent('embedded_file_error');\n        this.setError(error.message);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  async componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      return;\n    }\n\n    const search = queryString.parse(this.props.location.search);\n    const getParam = (name: string) => {\n      const value = search[name];\n      return typeof value === 'string' ? value : undefined;\n    };\n\n    const showSidePanel = getParam('sidePanel') !== 'false'; // True by default.\n    const embedded = getParam('embedded') === 'true'; // False by default.\n\n    if (embedded && !this.state.embedded) {\n      this.setState(\n        Object.assign({}, this.state, {\n          embedded: true,\n          standalone: false,\n          showSidePanel,\n        }),\n      );\n      // Notify the parent window that we are ready.\n      window.parent.postMessage('ready', '*');\n      window.addEventListener('message', (data) => this.onMessage(data.data));\n    }\n    if (embedded) {\n      // If the app is embedded, do not run the normal loading code.\n      return;\n    }\n\n    const url = getParam('url');\n    const indi = getParam('indi');\n    const parsedGen = Number(getParam('gen'));\n    const generation = !isNaN(parsedGen) ? parsedGen : undefined;\n    const hash = getParam('file');\n    const handleCors = getParam('handleCors') !== 'false'; // True by default.\n    const standalone = getParam('standalone') !== 'false'; // True by default.\n    const view = getParam('view');\n\n    const chartTypes = new Map<string | undefined, ChartType>([\n      ['relatives', ChartType.Relatives],\n      ['fancy', ChartType.Fancy],\n    ]);\n    // Hourglass is the default view.\n    const chartType = chartTypes.get(view) || ChartType.Hourglass;\n\n    const gedcom = this.props.location.state && this.props.location.state.data;\n    const images =\n      this.props.location.state && this.props.location.state.images;\n\n    if (!url && !hash) {\n      this.props.history.replace({pathname: '/'});\n    } else if (this.isNewData(hash, url, gedcom)) {\n      try {\n        // Set loading state.\n        this.setState(\n          Object.assign({}, this.state, {\n            data: undefined,\n            selection: undefined,\n            hash,\n            error: undefined,\n            loading: true,\n            url,\n            standalone,\n            chartType,\n          }),\n        );\n        const data = hash\n          ? await loadGedcom(hash, gedcom, images)\n          : await loadFromUrl(url!, handleCors);\n\n        const software = getSoftware(data.gedcom.head);\n        analyticsEvent(hash ? 'upload_file_loaded' : 'url_file_loaded', {\n          event_label: software,\n          event_value: (images && images.size) || 0,\n        });\n\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            hash,\n            selection: getSelection(data.chartData, indi, generation),\n            error: undefined,\n            loading: false,\n            url,\n            showSidePanel,\n            standalone,\n            chartType,\n          }),\n        );\n      } catch (error) {\n        analyticsEvent(hash ? 'upload_file_error' : 'url_file_error');\n        this.setError(error.message);\n      }\n    } else if (this.state.data && this.state.selection) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(\n        this.state.data.chartData,\n        indi,\n        generation,\n      );\n      this.updateDisplay(selection, chartType);\n    }\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    analyticsEvent('selection_changed');\n    if (this.state.embedded) {\n      // In embedded mode the URL doesn't change.\n      this.updateDisplay(selection);\n      return;\n    }\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    search.indi = selection.id;\n    search.gen = String(selection.generation);\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  };\n\n  private onPrint = () => {\n    analyticsEvent('print');\n    this.chartRef && this.chartRef.print();\n  };\n\n  private showErrorPopup(message: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: true,\n        error: message,\n      }),\n    );\n  }\n\n  private onDownloadPdf = async () => {\n    analyticsEvent('download_pdf');\n    try {\n      this.chartRef && (await this.chartRef.downloadPdf());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_pdf',\n          defaultMessage:\n            'Failed to generate PDF file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadPng = async () => {\n    analyticsEvent('download_png');\n    try {\n      this.chartRef && (await this.chartRef.downloadPng());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_png',\n          defaultMessage:\n            'Failed to generate PNG file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadSvg = () => {\n    analyticsEvent('download_svg');\n    this.chartRef && this.chartRef.downloadSvg();\n  };\n\n  onDismissErrorPopup = () => {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: false,\n      }),\n    );\n  };\n\n  private renderMainArea = () => {\n    if (this.state.data && this.state.selection) {\n      return (\n        <div id=\"content\">\n          <ErrorPopup\n            open={this.state.showErrorPopup}\n            message={this.state.error}\n            onDismiss={this.onDismissErrorPopup}\n          />\n          <Chart\n            data={this.state.data.chartData}\n            selection={this.state.selection}\n            chartType={this.state.chartType}\n            onSelection={this.onSelection}\n            ref={(ref) => (this.chartRef = ref)}\n          />\n          {this.state.showSidePanel ? (\n            <Responsive minWidth={768} id=\"sidePanel\">\n              <Details\n                gedcom={this.state.data.gedcom}\n                indi={this.state.selection.id}\n              />\n            </Responsive>\n          ) : null}\n        </div>\n      );\n    }\n    if (this.state.error) {\n      return <ErrorMessage message={this.state.error!} />;\n    }\n    return <Loader active size=\"large\" />;\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              gedcom={this.state.data && this.state.data.gedcom}\n              showingChart={\n                !!(\n                  this.props.history.location.pathname === '/view' &&\n                  this.state.data &&\n                  this.state.selection\n                )\n              }\n              standalone={this.state.standalone}\n              eventHandlers={{\n                onSelection: this.onSelection,\n                onPrint: this.onPrint,\n                onDownloadPdf: this.onDownloadPdf,\n                onDownloadPng: this.onDownloadPng,\n                onDownloadSvg: this.onDownloadSvg,\n              }}\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n","import * as locale_en from 'react-intl/locale-data/en';\nimport * as locale_pl from 'react-intl/locale-data/pl';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_pl from './translations/pl.json';\nimport {addLocaleData} from 'react-intl';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\naddLocaleData([...locale_en, ...locale_pl]);\n\nconst messages = {\n  pl: messages_pl,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Router>\n        <Route component={App} />\n      </Router>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}