{"version":3,"sources":["chart.tsx","gedcom_util.ts","load_data.ts","intro.tsx","top_bar.tsx","app.tsx","index.tsx"],"names":["zoomed","parent","d3","node","parentElement","scrollLeft","transform","x","scrollTop","y","scrolled","clientWidth","clientHeight","call","translateTo","Chart","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","chart","inherits","createClass","key","value","_this2","undefined","initialRender","innerHTML","createChart","json","props","data","chartType","HourglassChart","renderer","DetailedRenderer","svgSelector","indiCallback","info","onSelection","animate","updateSvgSize","locale","context","intl","chartInfo","render","startIndi","selection","id","baseGeneration","generation","svg","on","scaleExtent","translateExtent","size","dx","origin","dy","offsetX","offsetY","svgTransition","transition","delay","duration","attr","tween","i","t","renderChart","prevProps","react","document","getElementById","cloneNode","removeAttribute","XMLSerializer","serializeToString","_this3","printWindow","createElement","style","position","top","left","onload","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","blob","Blob","type","saveAs","canvas","width","getBBox","height","img","Image","src","URL","createObjectURL","Promise","resolve","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","onBlob","drawOnCanvas","then","toBlob","doc","jsPDF","orientation","unit","format","addImage","save","React","sortFamilyChildren","fam","gedcom","children","newChildren","sort","idToIndiMap","Map","indis","forEach","indi","indiId1","indiId2","a","b","idComparison","indi1","indi2","birth1","birth","birth2","date1","date","dateRange","from","date2","year","month","day","birthDatesComparator","assign","filterImage","imageUrl","startsWith","newIndi","convertGedcom","gedcomToJson","fams","Error","newIndis","map","filterImages","newFams","sortChildren","getSelection","loadGedcom","hash","cachedData","sessionStorage","getItem","JSON","parse","serializedData","stringify","setItem","loadGedcomSync","e","reject","contextTypes","intlShape","GedcomLink","Link","to","pathname","search","queryString","url","text","Intro","Card","className","Content","Header","index_es","defaultMessage","href","values","link","TopBar","_React$Component","state","loadUrlDialogOpen","inputRef","event","files","target","reader","FileReader","evt","result","md5","history","push","file","readAsText","setState","_this4","loadFromUrlModal","Modal","onClose","handleClose","centered","Icon","name","txt","Form","onSubmit","handleLoad","Input","placeholder","fluid","onChange","handleUrlChange","ref","Actions","Button","secondary","onClick","primary","chartMenus","showingChart","Menu","Item","as","onPrint","Dropdown","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","attached","inverted","color","handleLoadFromUrl","accept","handleUpload","htmlFor","ErrorMessage","Message","negative","message","App","loading","chartRef","location","gen","String","renderMainArea","chart_Chart","error","Loader","active","componentDidUpdate","getParam","parsedGen","Number","isNaN","handleCors","isNewData","urlToFetch","window","fetch","response","status","statusText","loadFromUrl","replace","Route","top_bar_TopBar","downloadPdf","downloadPng","downloadSvg","Switch","exact","path","component","Redirect","addLocaleData","toConsumableArray","locale_en","locale_pl","messages","pl","messages_pl","language","navigator","split","browser","detect","ReactDOM","querySelector","HashRouter"],"mappings":"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","file":"static/js/main.c4100939.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport * as React from 'react';\nimport jsPDF from 'jspdf';\nimport {intlShape} from 'react-intl';\nimport {saveAs} from 'file-saver';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n} from 'topola';\n\n/** Called when the view is dragged with the mouse. */\nfunction zoomed() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement!;\n  parent.scrollLeft = -d3.event.transform.x;\n  parent.scrollTop = -d3.event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  d3.select(parent).call(d3.zoom().translateTo, x, y);\n}\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  onSelection: (indiInfo: IndiInfo) => void;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class Chart extends React.PureComponent<ChartProps, {}> {\n  private chart?: ChartHandle;\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(args: {initialRender: boolean} = {initialRender: false}) {\n    if (args.initialRender) {\n      (d3.select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: HourglassChart,\n        renderer: DetailedRenderer,\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.context.intl.locale,\n      });\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = d3.select('#chart');\n    const parent = (svg.node() as HTMLElement).parentElement as Element;\n\n    d3.select(parent)\n      .on('scroll', scrolled)\n      .call(\n        d3\n          .zoom()\n          .scaleExtent([1, 1])\n          .translateExtent([[0, 0], chartInfo.size])\n          .on('zoom', zoomed),\n      );\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0];\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1];\n    const offsetX = d3.max([0, (parent.clientWidth - chartInfo.size[0]) / 2]);\n    const offsetY = d3.max([0, (parent.clientHeight - chartInfo.size[1]) / 2]);\n    const svgTransition = svg\n      .transition()\n      .delay(200)\n      .duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0])\n      .attr('height', chartInfo.size[1]);\n    if (args.initialRender) {\n      parent.scrollLeft = -dx;\n      parent.scrollTop = -dy;\n    } else {\n      svgTransition\n        .tween('scrollLeft', scrollLeftTween(-dx))\n        .tween('scrollTop', scrollTopTween(-dy));\n    }\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    this.renderChart({initialRender: this.props.data !== prevProps.data});\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <svg id=\"chart\" />\n      </div>\n    );\n  }\n\n  private getSvgContents() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  downloadSvg() {\n    const blob = new Blob([this.getSvgContents()], {type: 'image/svg+xml'});\n    saveAs(blob, 'topola.svg');\n  }\n\n  drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const canvas = document.createElement('canvas');\n\n    // Scale image for better quality.\n    const svg = (document.getElementById('chart') as unknown) as SVGSVGElement;\n    canvas.width = svg.getBBox().width * 2;\n    canvas.height = svg.getBBox().height * 2;\n\n    const blob = new Blob([this.getSvgContents()], {type: 'image/svg+xml'});\n    const img = new Image();\n    img.src = URL.createObjectURL(blob);\n\n    return new Promise<HTMLCanvasElement>((resolve) => {\n      img.onload = () => {\n        const ctx = canvas.getContext('2d')!;\n        const oldFill = ctx.fillStyle;\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = oldFill;\n\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        resolve(canvas);\n      };\n    });\n  }\n\n  downloadPng() {\n    const onBlob = (blob: Blob | null) => {\n      if (blob) {\n        saveAs(blob, 'topola.png');\n      }\n    };\n    this.drawOnCanvas().then((canvas) => canvas.toBlob(onBlob, 'image/png'));\n  }\n\n  downloadPdf() {\n    this.drawOnCanvas().then((canvas) => {\n      const doc = new jsPDF({\n        orientation: canvas.width > canvas.height ? 'l' : 'p',\n        unit: 'pt',\n        format: [canvas.width, canvas.height],\n      });\n      doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n      doc.save('topola.pdf');\n    });\n  }\n}\n","import {gedcomToJson, JsonFam, JsonGedcomData, JsonIndi} from 'topola';\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const idToIndiMap = new Map<string, JsonIndi>();\n  gedcom.indis.forEach((indi) => {\n    idToIndiMap[indi.id] = indi;\n  });\n\n  return (indiId1: string, indiId2: string) => {\n    const idComparison = strcmp(indiId1, indiId2);\n    const indi1: JsonIndi = idToIndiMap[indiId1];\n    const indi2: JsonIndi = idToIndiMap[indiId2];\n    const birth1 = indi1 && indi1.birth;\n    const birth2 = indi2 && indi2.birth;\n    const date1 =\n      birth1 && (birth1.date || (birth1.dateRange && birth1.dateRange.from));\n    const date2 =\n      birth2 && (birth2.date || (birth2.dateRange && birth2.dateRange.from));\n    if (!date1 || !date1.year || !date2 || !date2.year) {\n      return idComparison;\n    }\n    if (date1.year !== date2.year) {\n      return date1.year - date2.year;\n    }\n    if (!date1.month || !date2.month) {\n      return idComparison;\n    }\n    if (date1.month !== date2.month) {\n      return date1.month - date2.month;\n    }\n    if (date1.day && date2.day && date1.day !== date2.day) {\n      return date1.month - date2.month;\n    }\n    return idComparison;\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(fam: JsonFam, gedcom: JsonGedcomData): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(birthDatesComparator(gedcom));\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, gedcom));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi): JsonIndi {\n  if (!indi.imageUrl || indi.imageUrl.startsWith('http')) {\n    return indi;\n  }\n  const newIndi = Object.assign({}, indi);\n  delete newIndi.imageUrl;\n  return newIndi;\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(gedcom: JsonGedcomData): JsonGedcomData {\n  const newIndis = gedcom.indis.map(filterImage);\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links.\n */\nexport function convertGedcom(gedcom: string): JsonGedcomData {\n  const json = gedcomToJson(gedcom);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new Error('Failed to read GEDCOM file');\n  }\n  return filterImages(sortChildren(json));\n}\n","import {convertGedcom} from './gedcom_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  indi?: string,\n  generation?: number,\n): IndiInfo {\n  return {\n    id: indi || data.indis[0].id,\n    generation: generation || 0,\n  };\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<JsonGedcomData> {\n  const cachedData = sessionStorage.getItem(url);\n  if (cachedData) {\n    return Promise.resolve(JSON.parse(cachedData));\n  }\n  const urlToFetch = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/' + url\n    : url;\n\n  return window\n    .fetch(urlToFetch)\n    .then((response) => {\n      if (response.status !== 200) {\n        return Promise.reject(new Error(response.statusText));\n      }\n      return response.text();\n    })\n    .then((gedcom) => {\n      const data = convertGedcom(gedcom);\n      const serializedData = JSON.stringify(data);\n      sessionStorage.setItem(url, serializedData);\n      return data;\n    });\n}\n\n/** Loads data from the given GEDCOM file contents. */\nfunction loadGedcomSync(hash: string, gedcom?: string) {\n  const cachedData = sessionStorage.getItem(hash);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  if (!gedcom) {\n    throw new Error('Error loading data. Please upload your file again.');\n  }\n  const data = convertGedcom(gedcom);\n  const serializedData = JSON.stringify(data);\n  sessionStorage.setItem(hash, serializedData);\n  return data;\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport function loadGedcom(\n  hash: string,\n  gedcom?: string,\n): Promise<JsonGedcomData> {\n  try {\n    return Promise.resolve(loadGedcomSync(hash, gedcom));\n  } catch (e) {\n    return Promise.reject(new Error('Failed to read GEDCOM file'));\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Card} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\n/** The intro page. */\nexport function Intro() {\n  return (\n    <Card className=\"intro\">\n      <Card.Content>\n        <Card.Header>\n          <FormattedMessage\n            id=\"intro.title\"\n            defaultMessage=\"Topola Genealogy Viewer\"\n          />\n        </Card.Header>\n      </Card.Content>\n      <Card.Content>\n        <p>\n          <FormattedMessage\n            id=\"intro.description\"\n            defaultMessage={\n              'Topola Genealogy is a genealogy tree viewer that lets you' +\n              ' browse the structure of the family.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.instructions\"\n            defaultMessage={\n              'Use the LOAD FROM URL or LOAD FROM FILE buttons above to load' +\n              ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n              ' existing genealogy programs and web sites.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.examples\"\n            defaultMessage={\n              'Here are some examples from the web that you can view:'\n            }\n          />\n        </p>\n        <ul>\n          <li>\n            <GedcomLink\n              url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n              text=\"Karol Wojtyła\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n              GENPOL\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n              text=\"Shakespeare\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n              webtreeprint.com\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"http://genealogyoflife.com/tng/gedcom/HarryPotter.ged\"\n              text=\"Harry Potter\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://famousfamilytrees.blogspot.com/\">\n              Famous Family Trees\n            </a>\n            )\n          </li>\n        </ul>\n        <p>\n          <b>\n            <FormattedMessage id=\"intro.privacy\" defaultMessage=\"Privacy\" />\n          </b>\n          :\n          <FormattedMessage\n            id=\"intro.privacy_note\"\n            defaultMessage={\n              'When using the \"load from file\" option, this site does not' +\n              ' send your data anywhere and files loaded from disk do not' +\n              ' leave your computer. When using \"load from URL\", data is' +\n              ' passed through the {link} service to deal with an issue with' +\n              ' cross-site file loading in the browser (CORS).'\n            }\n            values={{\n              link: (\n                <a href=\"https://cors-anywhere.herokuapp.com/\">cors-anywhere</a>\n              ),\n            }}\n          />\n        </p>\n      </Card.Content>\n    </Card>\n  );\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport md5 from 'md5';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {\n  Header,\n  Button,\n  Icon,\n  Menu,\n  Modal,\n  Input,\n  Form,\n  Dropdown,\n} from 'semantic-ui-react';\n\n/** Menus and dialogs state. */\ninterface State {\n  loadUrlDialogOpen: boolean;\n  url?: string;\n}\n\ninterface Props {\n  showingChart: boolean;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\nexport class TopBar extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {loadUrlDialogOpen: false};\n  inputRef?: Input;\n\n  /** Handles the \"Upload file\" button. */\n  handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      const data = (evt.target as FileReader).result;\n      const hash = md5(data as string);\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({file: hash}),\n        state: {data},\n      });\n    };\n    reader.readAsText(files[0]);\n  }\n\n  /** Opens the \"Load from URL\" dialog. */\n  handleLoadFromUrl() {\n    this.setState(\n      Object.assign({}, this.state, {loadUrlDialogOpen: true}),\n      () => this.inputRef!.focus(),\n    );\n  }\n\n  /** Cancels the \"Load from URL\" dialog. */\n  handleClose() {\n    this.setState(Object.assign({}, this.state, {loadUrlDialogOpen: false}));\n  }\n\n  /** Upload button clicked in the \"Load from URL\" dialog. */\n  handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        loadUrlDialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  handleUrlChange(event: React.SyntheticEvent) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: (event.target as HTMLInputElement).value,\n      }),\n    );\n  }\n\n  render() {\n    const loadFromUrlModal = (\n      <Modal\n        open={this.state.loadUrlDialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e) => this.handleUrlChange(e)}\n              ref={(ref) => (this.inputRef = ref!)}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://cors-anywhere.herokuapp.com/\">\n                      cors-anywhere.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n\n    const chartMenus = this.props.showingChart ? (\n      <>\n        <Menu.Item as=\"a\" onClick={() => this.props.onPrint()}>\n          <Icon name=\"print\" />\n          <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n        </Menu.Item>\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"download\" />\n              <FormattedMessage id=\"menu.download\" defaultMessage=\"Download\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => this.props.onDownloadPdf()}>\n              <FormattedMessage id=\"menu.pdf_file\" defaultMessage=\"PDF file\" />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.props.onDownloadPng()}>\n              <FormattedMessage id=\"menu.png_file\" defaultMessage=\"PNG file\" />\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => this.props.onDownloadSvg()}>\n              <FormattedMessage id=\"menu.svg_file\" defaultMessage=\"SVG file\" />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    ) : null;\n\n    return (\n      <Menu attached=\"top\" inverted color=\"blue\" size=\"large\">\n        <Link to=\"/\">\n          <Menu.Item>\n            <b>Topola Genealogy</b>\n          </Menu.Item>\n        </Link>\n        <Menu.Item as=\"a\" onClick={() => this.handleLoadFromUrl()}>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </Menu.Item>\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged\"\n          id=\"fileInput\"\n          onChange={(e) => this.handleUpload(e)}\n        />\n        <label htmlFor=\"fileInput\">\n          <Menu.Item as=\"a\">\n            <Icon name=\"folder open\" />\n            <FormattedMessage\n              id=\"menu.load_from_file\"\n              defaultMessage=\"Load from file\"\n            />\n          </Menu.Item>\n        </label>\n        {chartMenus}\n        <Menu.Item\n          as=\"a\"\n          href=\"https://github.com/PeWu/topola-viewer\"\n          position=\"right\"\n        >\n          <FormattedMessage\n            id=\"menu.github\"\n            defaultMessage=\"Source on GitHub\"\n          />\n        </Menu.Item>\n        {loadFromUrlModal}\n      </Menu>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Chart} from './chart';\nimport {getSelection, loadFromUrl, loadGedcom} from './load_data';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {Intro} from './intro';\nimport {Loader, Message} from 'semantic-ui-react';\nimport {Route, RouteComponentProps, Switch, Redirect} from 'react-router-dom';\nimport {TopBar} from './top_bar';\n\n/** Shows an error message. */\nexport function ErrorMessage(props: {message: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>Failed to load file</Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface State {\n  /** Loaded data. */\n  data?: JsonGedcomData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Hash of the GEDCOM contents. */\n  hash?: string;\n  /** Error to display. */\n  error?: string;\n  /** True if currently loading. */\n  loading: boolean;\n  /** URL of the data that is loaded or is being loaded. */\n  url?: string;\n}\n\nexport class App extends React.Component<RouteComponentProps, {}> {\n  state: State = {loading: false};\n  chartRef: Chart | null = null;\n\n  private isNewData(\n    hash: string | undefined,\n    url: string | undefined,\n  ): boolean {\n    return (\n      !!(hash && hash !== this.state.hash) || !!(url && this.state.url !== url)\n    );\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      return;\n    }\n    const gedcom = this.props.location.state && this.props.location.state.data;\n    const search = queryString.parse(this.props.location.search);\n    const getParam = (name: string) => {\n      const value = search[name];\n      return typeof value === 'string' ? value : undefined;\n    };\n    const url = getParam('url');\n    const indi = getParam('indi');\n    const parsedGen = Number(getParam('gen'));\n    const generation = !isNaN(parsedGen) ? parsedGen : undefined;\n    const hash = getParam('file');\n    const handleCors = getParam('handleCors') !== 'false';\n\n    if (!url && !hash) {\n      this.props.history.replace({pathname: '/'});\n    } else if (this.isNewData(hash, url)) {\n      const loadedData = hash\n        ? loadGedcom(hash, gedcom)\n        : loadFromUrl(url!, handleCors);\n      loadedData.then(\n        (data) => {\n          // Set state with data.\n          this.setState(\n            Object.assign({}, this.state, {\n              data,\n              hash,\n              selection: getSelection(data, indi, generation),\n              error: undefined,\n              loading: false,\n              url,\n            }),\n          );\n        },\n        (error) => {\n          // Set error state.\n          this.setState(\n            Object.assign({}, this.state, {\n              error: error.message,\n              loading: false,\n            }),\n          );\n        },\n      );\n      // Set loading state.\n      this.setState(\n        Object.assign({}, this.state, {\n          data: undefined,\n          selection: undefined,\n          hash,\n          error: undefined,\n          loading: true,\n          url,\n        }),\n      );\n    } else if (this.state.data && this.state.selection) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(this.state.data, indi, generation);\n      if (\n        this.state.selection.id !== selection.id ||\n        this.state.selection.generation !== selection.generation\n      ) {\n        this.setState(\n          Object.assign({}, this.state, {\n            selection,\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    search.indi = selection.id;\n    search.gen = String(selection.generation);\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  };\n\n  private renderMainArea = () => {\n    if (this.state.data && this.state.selection) {\n      return (\n        <Chart\n          data={this.state.data}\n          onSelection={this.onSelection}\n          selection={this.state.selection}\n          ref={(ref) => (this.chartRef = ref)}\n        />\n      );\n    }\n    if (this.state.error) {\n      return <ErrorMessage message={this.state.error!} />;\n    }\n    return <Loader active size=\"large\" />;\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              showingChart={\n                !!(\n                  this.props.history.location.pathname === '/view' &&\n                  this.state.data &&\n                  this.state.selection\n                )\n              }\n              onPrint={() => this.chartRef && this.chartRef.print()}\n              onDownloadPdf={() => this.chartRef && this.chartRef.downloadPdf()}\n              onDownloadPng={() => this.chartRef && this.chartRef.downloadPng()}\n              onDownloadSvg={() => this.chartRef && this.chartRef.downloadSvg()}\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n","import * as locale_en from 'react-intl/locale-data/en';\nimport * as locale_pl from 'react-intl/locale-data/pl';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_pl from './translations/pl.json';\nimport {addLocaleData} from 'react-intl';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\naddLocaleData([...locale_en, ...locale_pl]);\n\nconst messages = {\n  pl: messages_pl,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Router>\n        <Route component={App} />\n      </Router>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}