{"version":3,"sources":["topola.jpg","analytics.ts","chart.tsx","gedcom_util.ts","date_util.ts","details.tsx","load_data.ts","intro.tsx","wikitree.ts","search_index.ts","search_util.tsx","top_bar.tsx","app.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","analyticsEvent","action","data","window","gtag","ChartType","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","e","target","result","inlineImage","_callee6","image","href","response","dataUrl","regenerator_default","a","wrap","_context6","prev","next","baseVal","abrupt","fetch","sent","t0","console","warn","stop","inlineImages","_callee7","svg","images","_context7","Array","from","getElementsByTagName","all","map","loadImage","Image","src","URL","createObjectURL","addEventListener","drawOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","type","toBlob","Chart","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","chart","animating","rerenderRequired","inherits","createClass","key","value","props","chartType","Hourglass","HourglassChart","Relatives","RelativesChart","Fancy","FancyChart","CircleRenderer","DetailedRenderer","_this2","undefined","initialRender","d3","node","innerHTML","createChart","json","getChartType","renderer","getRendererType","svgSelector","indiCallback","info","onSelection","animate","updateSvgSize","locale","context","intl","setData","chartInfo","render","startIndi","selection","id","baseGeneration","generation","parent","parentElement","on","enableZoom","x","scrollLeft","clientWidth","y","scrollTop","clientHeight","scale","k","translateTo","scrolled","scaleExtent","translateExtent","size","transform","offsetX","offsetY","attr","zoomed","dx","origin","dy","svgTransition","transition","delay","duration","tween","i","t","animationPromise","then","renderChart","prevProps","react","getElementById","cloneNode","removeAttribute","XMLSerializer","serializeToString","_getSvgContentsWithInlinedImages","asyncToGenerator","mark","_callee","_context","_this3","printWindow","style","position","top","left","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","_downloadSvg","_callee2","contents","_context2","getSvgContentsWithInlinedImages","Blob","saveAs","_drawOnCanvas2","_callee3","_context3","t1","_downloadPng","_callee4","_context4","_downloadPdf","_callee5","doc","_context5","jsPDF","orientation","unit","format","addImage","save","React","contextTypes","intlShape","pointerToId","pointer","substring","prepareGedcom","entries","head","find","entry","tag","indis","fams","other","forEach","strcmp","b","compareDates","event1","event2","date1","date","dateRange","date2","year","month","day","sortChildren","gedcom","comparator","idToIndiMap","Map","indi","indiId1","indiId2","indi1","indi2","birth","birthDatesComparator","newFams","fam","children","newChildren","sort","assign","sortFamilyChildren","sortSpouses","idToFamMap","famId1","famId2","fam1","fam2","marriage","marriageDatesComparator","newIndis","sortIndiSpouses","normalizeGedcom","IMAGE_EXTENSIONS","filterImage","newImages","fileName","url","match","has","push","get","title","startsWith","lowerName","toLowerCase","some","ext","endsWith","isImageFile","filterImages","getSoftware","sour","tree","name","DATE_QUALIFIERS","formatDate","hasDay","hasMonth","hasYear","text","dateObject","Date","qualifier","formatOptions","formatMessage","defaultMessage","Intl","DateTimeFormat","join","translateDate","gedcomDate","dateOrRange","getDate","fromDate","toDate","to","translatedFromDate","translatedToDate","formatDateRage","EVENT_TAGS","EXCLUDED_TAGS","TAG_DESCRIPTIONS","translateTag","index_es","joinLines","lines","line","index","Linkify_default","properties","getData","subentry","last","noteDetails","nameDetails","className","split","filter","getDetails","tags","detailsFunction","flatMap","element","hasData","getOtherDetails","includes","toConsumableArray","note","dataDetails","Details","_React$Component","entriesWithData","dereferenced","dereference","place","eventDetails","getSelection","prepareData","cacheId","parseGedcom","gedcomEntriesToJson","Error","chartData","convertGedcom","serializedData","JSON","stringify","sessionStorage","setItem","loadFromUrl","_x","_x2","_loadFromUrl","handleCors","cachedData","urlToFetch","getItem","parse","status","statusText","loadGedcom","_x3","_x4","_x5","_loadGedcom","hash","GedcomLink","Link","pathname","search","queryString","Intro","Card","Content","Header","Grid","Row","Column","Image_Image","logo","alt","values","link","process","slice","wikiTreeGet","request","requestData","apiUrl","responseBody","FormData","append","method","getAncestors","cacheKey","fields","ancestors","getRelatives","keys","keysToFetch","fetchedResults","getChildren","getSpouses","items","person","Name","clientLogin","_x7","_clientLogin","authcode","loadWikiTree","_x8","_x9","_loadWikiTree","everyone","firstPerson","spouseKeys","ancestorKeys","ancestorDetails","descendantGenerationLimit","toFetch","people","allSpouses","families","spouses","idToName","converted","location","hostname","Cookies","clear","Spouses","s","personId","flat","Children","c","set","Id","Mother","Father","famId","getFamilyId","getSet","add","wife","husband","Set","convertPerson","spouse","familySpouses","Gender","_ref","_ref2","slicedToArray","husb","child","marriage_date","marriage_location","parsedDate","parseDate","buildGedcom","spouse1","spouse2","FirstName","firstName","LastNameAtBirth","lastName","famc","sex","BirthDate","BirthLocation","DataStatus","DeathDate","DeathLocation","death","PhotoData","path","dataStatus","matchedDate","dataRange","gedcomIndis","escapedId","replace","level","newSet","normalize","input","toLocaleLowerCase","compare","score","naturalSort","ref","getHusbandLastName","husbandId","names","LunrSearchIndex","self","lunr","field","boost","spouseLastName","normalizedName","normalizedSpouseLastName","query","getNameLine","nameTag","eventEntry","dateEntry","getDescriptionLine","birthDate","deathDate","WikiTreeLoginState","loadFileAsText","file","evt","readAsText","isImageFileName","lower","EmbeddedMessageType","TopBar","state","loadUrlDialogOpen","searchResults","wikiTreeLoginState","UNKNOWN","urlInputRef","wikiTreeLoginFormRef","wikiTreeReturnUrlRef","searchRef","searchIndex","_handleUpload","event","files","filesArray","gedcomFile","imageMap","imageFileNames","event_value","md5","history","setState","current","results","description","displaySearchResult","eventHandlers","setValue","initialize","buildSearchIndex","view","returnUrl","submit","LOGGED_IN","NOT_LOGGED_IN","wikiTreeLoginUsername","_componentDidMount","checkWikiTreeLoginState","initializeSearchIndex","_this4","Modal","onClose","handleClose","centered","Icon","txt","Form","onSubmit","handleLoad","Input","placeholder","fluid","onChange","handleUrlChange","Actions","Button","secondary","onClick","primary","_this5","showingChart","Menu","Item","as","onPrint","Dropdown","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","changeView","allowAllRelativesChart","Search","onSearchChange","debounce","_","handleSearch","onResultSelect","handleResultSelect","noResultsMessage","selectFirstResult","_this6","standalone","openLoadUrlDialog","accept","multiple","handleUpload","htmlFor","_this7","showWikiTreeLogin","wikiTreeLogoUrl","wikiTreeLogin","display","tooltip","username","attached","inverted","color","fileMenus","chartMenus","wikiTreeLoginMenu","sourceLink","poweredByLink","loadFromUrlModal","ErrorMessage","Message","negative","message","ErrorPopup","Portal","onDismiss","DataSourceEnum","UploadedDataSource","loading","event_label","GedcomUrlDataSource","WikiTreeDataSource","DATA_SOURCES","UPLOADED","GEDCOM_URL","WIKITREE","getArguments","getParam","parsedGen","Number","chartTypes","source","showSidePanel","embedded","isNaN","App","showErrorPopup","chartRef","updateDisplay","gen","String","downloadPdf","downloadPng","downloadSvg","onDismissErrorPopup","renderMainArea","error","loadingMore","Loader","active","inline","chart_Chart","Responsive","minWidth","details_Details","otherStateChanges","changes","_onMessage","PARENT_READY","postMessage","READY","GEDCOM","setError","componentDidUpdate","_componentDidUpdate","dataSource","loadMoreFromWikitree","_data","onMessage","isNewData","loadData","Route","top_bar_TopBar","Switch","exact","component","Redirect","addLocaleData","locale_en","locale_pl","messages","pl","messages_pl","language","navigator","browser","detect","ReactDOM","querySelector","HashRouter"],"mappings":"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","file":"static/js/main.0f514e33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/topola.060eef13.jpg\";","/** Sends an event to Google Analytics. */\nexport function analyticsEvent(action: string, data?: any) {\n  (window as any).gtag('event', action, data);\n}\n","import * as d3 from 'd3';\nimport * as React from 'react';\nimport jsPDF from 'jspdf';\nimport {intlShape} from 'react-intl';\nimport {saveAs} from 'file-saver';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n  RelativesChart,\n  FancyChart,\n  CircleRenderer,\n} from 'topola';\n\n/**\n * Called when the view is dragged with the mouse.\n *\n * @param size the size of the chart\n */\nfunction zoomed(size: [number, number], enableZoom: boolean) {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement!;\n\n  if (enableZoom) {\n    const scale = d3.event.transform.k;\n    const offsetX = d3.max([0, (parent.clientWidth / scale - size[0]) / 2])!;\n    const offsetY = d3.max([0, (parent.clientHeight / scale - size[1]) / 2])!;\n    svg.attr(\n      'transform',\n      `translate(${-size[0] / 2}, ${-size[1] / 2})\n       scale(${scale})\n       translate(${size[0] / 2 + offsetX}, ${size[1] / 2 + offsetY})`,\n    );\n  }\n\n  parent.scrollLeft = -d3.event.transform.x;\n  parent.scrollTop = -d3.event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled(enableZoom: boolean) {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  const scale = enableZoom ? d3.zoomTransform(parent).k : 1;\n  d3.select(parent).call(d3.zoom().translateTo, x / scale, y / scale);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\n  });\n}\n\nasync function inlineImage(image: SVGImageElement) {\n  const href = image.href.baseVal;\n  if (!href) {\n    return;\n  }\n  try {\n    const response = await fetch(href);\n    const blob = await response.blob();\n    const dataUrl = await loadAsDataUrl(blob);\n    image.href.baseVal = dataUrl;\n  } catch (e) {\n    console.warn('Failed to load image:', e);\n  }\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nasync function inlineImages(svg: Element): Promise<void> {\n  const images = Array.from(svg.getElementsByTagName('image'));\n  await Promise.all(images.map(inlineImage));\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = URL.createObjectURL(blob);\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    image.addEventListener('load', () => resolve(image));\n  });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawOnCanvas(image: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  // Scale image for better quality.\n  canvas.width = image.width * 2;\n  canvas.height = image.height * 2;\n\n  const ctx = canvas.getContext('2d')!;\n  const oldFill = ctx.fillStyle;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = oldFill;\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, type);\n  });\n}\n\n/** Supported chart types. */\nexport enum ChartType {\n  Hourglass,\n  Relatives,\n  Fancy,\n}\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  chartType: ChartType;\n  onSelection: (indiInfo: IndiInfo) => void;\n  enableZoom: boolean;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class Chart extends React.PureComponent<ChartProps, {}> {\n  private chart?: ChartHandle;\n  /** Animation is in progress. */\n  private animating = false;\n  /** Rendering is required after the current animation finishes. */\n  private rerenderRequired = false;\n\n  private getChartType() {\n    switch (this.props.chartType) {\n      case ChartType.Hourglass:\n        return HourglassChart;\n      case ChartType.Relatives:\n        return RelativesChart;\n      case ChartType.Fancy:\n        return FancyChart;\n      default:\n        // Fall back to hourglass chart.\n        return HourglassChart;\n    }\n  }\n\n  private getRendererType() {\n    switch (this.props.chartType) {\n      case ChartType.Fancy:\n        return CircleRenderer;\n      default:\n        // Use DetailedRenderer by default.\n        return DetailedRenderer;\n    }\n  }\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(args: {initialRender: boolean} = {initialRender: false}) {\n    // Wait for animation to finish if animation is in progress.\n    if (!args.initialRender && this.animating) {\n      this.rerenderRequired = true;\n      return;\n    }\n\n    if (args.initialRender) {\n      (d3.select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: this.getChartType(),\n        renderer: this.getRendererType(),\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.context.intl.locale,\n      });\n    } else {\n      this.chart!.setData(this.props.data);\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = d3.select('#chart');\n    const parent = (svg.node() as HTMLElement).parentElement as Element;\n\n    d3.select(parent)\n      .on('scroll', () => scrolled(this.props.enableZoom))\n      .call(\n        d3\n          .zoom()\n          .scaleExtent(this.props.enableZoom ? [0.1, 2] : [1, 1])\n          .translateExtent([[0, 0], chartInfo.size])\n          .on('zoom', () => zoomed(chartInfo.size, this.props.enableZoom)),\n      );\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0];\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1];\n    const offsetX = d3.max([0, (parent.clientWidth - chartInfo.size[0]) / 2]);\n    const offsetY = d3.max([0, (parent.clientHeight - chartInfo.size[1]) / 2]);\n    const svgTransition = svg\n      .transition()\n      .delay(200)\n      .duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0])\n      .attr('height', chartInfo.size[1]);\n    if (args.initialRender) {\n      parent.scrollLeft = -dx;\n      parent.scrollTop = -dy;\n    } else {\n      svgTransition\n        .tween('scrollLeft', scrollLeftTween(-dx))\n        .tween('scrollTop', scrollTopTween(-dy));\n    }\n\n    // After the animation is finished, rerender the chart if required.\n    this.animating = true;\n    chartInfo.animationPromise.then(() => {\n      this.animating = false;\n      if (this.rerenderRequired) {\n        this.rerenderRequired = false;\n        this.renderChart({initialRender: false});\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    const initialRender = this.props.chartType !== prevProps.chartType;\n    this.renderChart({initialRender});\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <svg id=\"chart\" />\n      </div>\n    );\n  }\n\n  private getSvgContents() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  private async getSvgContentsWithInlinedImages() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    await inlineImages(svg);\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  async downloadSvg() {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    saveAs(blob, 'topola.svg');\n  }\n\n  private async drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    return await drawOnCanvas(await loadImage(blob));\n  }\n\n  async downloadPng() {\n    const canvas = await this.drawOnCanvas();\n    const blob = await canvasToBlob(canvas, 'image/png');\n    saveAs(blob, 'topola.png');\n  }\n\n  async downloadPdf() {\n    const canvas = await this.drawOnCanvas();\n    const doc = new jsPDF({\n      orientation: canvas.width > canvas.height ? 'l' : 'p',\n      unit: 'pt',\n      format: [canvas.width, canvas.height],\n    });\n    doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n    doc.save('topola.pdf');\n  }\n}\n","import {\n  JsonFam,\n  JsonGedcomData,\n  JsonIndi,\n  gedcomEntriesToJson,\n  JsonImage,\n  JsonEvent,\n} from 'topola';\nimport {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\n\nexport interface GedcomData {\n  /** The HEAD entry. */\n  head: GedcomEntry;\n  /** INDI entries mapped by id. */\n  indis: {[key: string]: GedcomEntry};\n  /** FAM entries mapped by id. */\n  fams: {[key: string]: GedcomEntry};\n  /** Other entries mapped by id, e.g. NOTE, SOUR. */\n  other: {[key: string]: GedcomEntry};\n}\n\nexport interface TopolaData {\n  chartData: JsonGedcomData;\n  gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nexport function pointerToId(pointer: string): string {\n  return pointer.substring(1, pointer.length - 1);\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\n  const indis: {[key: string]: GedcomEntry} = {};\n  const fams: {[key: string]: GedcomEntry} = {};\n  const other: {[key: string]: GedcomEntry} = {};\n  entries.forEach((entry) => {\n    if (entry.tag === 'INDI') {\n      indis[pointerToId(entry.pointer)] = entry;\n    } else if (entry.tag === 'FAM') {\n      fams[pointerToId(entry.pointer)] = entry;\n    } else if (entry.pointer) {\n      other[pointerToId(entry.pointer)] = entry;\n    }\n  });\n  return {head, indis, fams, other};\n}\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Compares dates of the given events. */\nfunction compareDates(\n  event1: JsonEvent | undefined,\n  event2: JsonEvent | undefined,\n): number {\n  const date1 =\n    event1 && (event1.date || (event1.dateRange && event1.dateRange.from));\n  const date2 =\n    event2 && (event2.date || (event2.dateRange && event2.dateRange.from));\n  if (!date1 || !date1.year || !date2 || !date2.year) {\n    return 0;\n  }\n  if (date1.year !== date2.year) {\n    return date1.year - date2.year;\n  }\n  if (!date1.month || !date2.month) {\n    return 0;\n  }\n  if (date1.month !== date2.month) {\n    return date1.month - date2.month;\n  }\n  if (date1.day && date2.day && date1.day !== date2.day) {\n    return date1.month - date2.month;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const idToIndiMap = new Map<string, JsonIndi>();\n  gedcom.indis.forEach((indi) => {\n    idToIndiMap[indi.id] = indi;\n  });\n\n  return (indiId1: string, indiId2: string) => {\n    const indi1: JsonIndi = idToIndiMap[indiId1];\n    const indi2: JsonIndi = idToIndiMap[indiId2];\n    return (\n      compareDates(indi1 && indi1.birth, indi2 && indi2.birth) ||\n      strcmp(indiId1, indiId2)\n    );\n  };\n}\n\n/** Marriage date comparator for families. */\nfunction marriageDatesComparator(gedcom: JsonGedcomData) {\n  const idToFamMap = new Map<string, JsonFam>();\n  gedcom.fams.forEach((fam) => {\n    idToFamMap[fam.id] = fam;\n  });\n\n  return (famId1: string, famId2: string) => {\n    const fam1: JsonFam = idToFamMap[famId1];\n    const fam2: JsonFam = idToFamMap[famId2];\n    return (\n      compareDates(fam1 && fam1.marriage, fam2 && fam2.marriage) ||\n      strcmp(famId1, famId2)\n    );\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(\n  fam: JsonFam,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(comparator);\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = birthDatesComparator(gedcom);\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, comparator));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Sorts spouses by marriage date.\n * Does not modify the input objects.\n */\nfunction sortIndiSpouses(\n  indi: JsonIndi,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!indi.fams) {\n    return indi;\n  }\n  const newFams = indi.fams.sort(comparator);\n  return Object.assign({}, indi, {fams: newFams});\n}\n\nfunction sortSpouses(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = marriageDatesComparator(gedcom);\n  const newIndis = gedcom.indis.map((indi) =>\n    sortIndiSpouses(indi, comparator),\n  );\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/** Sorts children and spouses. */\nexport function normalizeGedcom(gedcom: JsonGedcomData): JsonGedcomData {\n  return sortSpouses(sortChildren(gedcom));\n}\n\nconst IMAGE_EXTENSIONS = ['.jpg', '.png', '.gif'];\n\n/** Returns true if the given file name has a known image extension. */\nfunction isImageFile(fileName: string): boolean {\n  const lowerName = fileName.toLowerCase();\n  return IMAGE_EXTENSIONS.some((ext) => lowerName.endsWith(ext));\n}\n\n/**\n * Removes images that are not HTTP links or do not have known image extensions.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n  if (!indi.images || indi.images.length === 0) {\n    return indi;\n  }\n  const newImages: JsonImage[] = [];\n  indi.images.forEach((image) => {\n    const fileName = image.url.match(/[^/\\\\]*$/)![0];\n    // If the image file has been loaded into memory, use it.\n    if (images.has(fileName)) {\n      newImages.push({url: images.get(fileName)!, title: image.title});\n    } else if (image.url.startsWith('http') && isImageFile(image.url)) {\n      newImages.push(image);\n    }\n  });\n  return Object.assign({}, indi, {images: newImages});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n  gedcom: JsonGedcomData,\n  images: Map<string, string>,\n): JsonGedcomData {\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n  gedcom: string,\n  images: Map<string, string>,\n): TopolaData {\n  const entries = parseGedcom(gedcom);\n  const json = gedcomEntriesToJson(entries);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new Error('Failed to read GEDCOM file');\n  }\n\n  return {\n    chartData: filterImages(normalizeGedcom(json), images),\n    gedcom: prepareGedcom(entries),\n  };\n}\n\nexport function getSoftware(head: GedcomEntry): string | null {\n  const sour =\n    head && head.tree && head.tree.find((entry) => entry.tag === 'SOUR');\n  const name =\n    sour && sour.tree && sour.tree.find((entry) => entry.tag === 'NAME');\n  return (name && name.data) || null;\n}\n","import {Date as TopolaDate, DateRange, getDate} from 'topola';\nimport {InjectedIntl} from 'react-intl';\n\nconst DATE_QUALIFIERS = new Map([\n  ['abt', 'about'],\n  ['cal', 'calculated'],\n  ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: InjectedIntl) {\n  const hasDay = date.day !== undefined;\n  const hasMonth = date.month !== undefined;\n  const hasYear = date.year !== undefined;\n  if (!hasDay && !hasMonth && !hasYear) {\n    return date.text || '';\n  }\n  const dateObject = new Date(\n    hasYear ? date.year! : 0,\n    hasMonth ? date.month! - 1 : 0,\n    hasDay ? date.day! : 1,\n  );\n\n  const qualifier = date.qualifier && date.qualifier.toLowerCase();\n  const translatedQualifier =\n    qualifier &&\n    intl.formatMessage({\n      id: `date.${qualifier}`,\n      defaultMessage: DATE_QUALIFIERS.get(qualifier) || qualifier,\n    });\n\n  const formatOptions = {\n    day: hasDay ? 'numeric' : undefined,\n    month: hasMonth ? 'long' : undefined,\n    year: hasYear ? 'numeric' : undefined,\n  };\n  const translatedDate = new Intl.DateTimeFormat(\n    intl.locale,\n    formatOptions,\n  ).format(dateObject);\n\n  return [translatedQualifier, translatedDate].join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: InjectedIntl) {\n  const fromDate = dateRange.from;\n  const toDate = dateRange.to;\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\n  const translatedToDate = toDate && formatDate(toDate, intl);\n  if (translatedFromDate && translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.between',\n        defaultMessage: 'between {from} and {to}',\n      },\n      {from: translatedFromDate, to: translatedToDate},\n    );\n  }\n  if (translatedFromDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.after',\n        defaultMessage: 'after {from}',\n      },\n      {from: translatedFromDate},\n    );\n  }\n  if (translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.before',\n        defaultMessage: 'before {to}',\n      },\n      {to: translatedToDate},\n    );\n  }\n  return '';\n}\n\n/** Formats a date given in GEDCOM format. */\nexport function translateDate(gedcomDate: string, intl: InjectedIntl) {\n  const dateOrRange = getDate(gedcomDate);\n  if (!dateOrRange) {\n    return '';\n  }\n  if (dateOrRange.date) {\n    return formatDate(dateOrRange.date, intl);\n  }\n  if (dateOrRange.dateRange) {\n    return formatDateRage(dateOrRange.dateRange, intl);\n  }\n  return '';\n}\n","import * as React from 'react';\nimport flatMap from 'array.prototype.flatmap';\nimport Linkify from 'react-linkify';\nimport {FormattedMessage, InjectedIntl} from 'react-intl';\nimport {GedcomData, pointerToId} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {intlShape} from 'react-intl';\nimport {translateDate} from './date_util';\n\ninterface Props {\n  gedcom: GedcomData;\n  indi: string;\n}\n\nconst EVENT_TAGS = ['BIRT', 'BAPM', 'CHR', 'DEAT', 'BURI', 'EVEN'];\nconst EXCLUDED_TAGS = ['NAME', 'SEX', 'FAMC', 'FAMS', 'NOTE', 'SOUR'];\nconst TAG_DESCRIPTIONS = new Map([\n  ['BAPM', 'Baptism'],\n  ['BIRT', 'Birth'],\n  ['BURI', 'Burial'],\n  ['CHR', 'Christening'],\n  ['DEAT', 'Death'],\n  ['EMAIL', 'E-mail'],\n  ['EVEN', 'Event'],\n  ['OCCU', 'Occupation'],\n  ['TITL', 'Title'],\n  ['WWW', 'WWW'],\n]);\n\nfunction translateTag(tag: string) {\n  return (\n    <FormattedMessage\n      id={`gedcom.${tag}`}\n      defaultMessage={TAG_DESCRIPTIONS.get(tag) || tag}\n    />\n  );\n}\n\nfunction joinLines(lines: (JSX.Element | string)[]) {\n  return (\n    <>\n      {lines.map((line, index) => (\n        <div key={index}>\n          <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n          <br />\n        </div>\n      ))}\n    </>\n  );\n}\n\n/**\n * Returns the data for the given GEDCOM entry as an array of lines. Supports\n * continuations with CONT and CONC.\n */\nfunction getData(entry: GedcomEntry) {\n  const result = [entry.data];\n  entry.tree.forEach((subentry) => {\n    if (subentry.tag === 'CONC' && subentry.data) {\n      const last = result.length - 1;\n      result[last] += subentry.data;\n    } else if (subentry.tag === 'CONT' && subentry.data) {\n      result.push(subentry.data);\n    }\n  });\n  return result;\n}\n\nfunction eventDetails(entry: GedcomEntry, intl: InjectedIntl) {\n  const lines = [];\n  if (entry.data && entry.data.length > 1) {\n    lines.push(<i>{entry.data}</i>);\n  }\n  const date = entry.tree.find((subentry) => subentry.tag === 'DATE');\n  if (date && date.data) {\n    lines.push(translateDate(date.data, intl));\n  }\n  const place = entry.tree.find((subentry) => subentry.tag === 'PLAC');\n  if (place && place.data) {\n    lines.push(...getData(place));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction dataDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(...getData(entry));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n  return joinLines(\n    getData(entry).map((line, index) => <i key={index}>{line}</i>),\n  );\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n  return (\n    <h2 className=\"ui header\">\n      {entry.data\n        .split('/')\n        .filter((name) => !!name)\n        .map((name, index) => (\n          <div key={index}>\n            {name}\n            <br />\n          </div>\n        ))}\n    </h2>\n  );\n}\n\nfunction getDetails(\n  entries: GedcomEntry[],\n  tags: string[],\n  detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n  return flatMap(tags, (tag) =>\n    entries\n      .filter((entry) => entry.tag === tag)\n      .map((entry) => detailsFunction(entry)),\n  )\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * Returns true if there is displayable information in this entry.\n * Returns false if there is no data in this entry or this is only a reference\n * to another entry.\n */\nfunction hasData(entry: GedcomEntry) {\n  return entry.tree.length > 0 || (entry.data && !entry.data.startsWith('@'));\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n  return entries\n    .filter(\n      (entry) =>\n        !EXCLUDED_TAGS.includes(entry.tag) && !EVENT_TAGS.includes(entry.tag),\n    )\n    .filter(hasData)\n    .map((entry) => dataDetails(entry))\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * If the entry is a reference to a top-level entry, the referenced entry is\n * returned. Otherwise, returns the given entry unmodified.\n */\nfunction dereference(entry: GedcomEntry, gedcom: GedcomData) {\n  if (entry.data) {\n    const dereferenced = gedcom.other[pointerToId(entry.data)];\n    if (dereferenced) {\n      return dereferenced;\n    }\n  }\n  return entry;\n}\n\nexport class Details extends React.Component<Props, {}> {\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    const entries = this.props.gedcom.indis[this.props.indi].tree;\n    const entriesWithData = entries\n      .map((entry) => dereference(entry, this.props.gedcom))\n      .filter(hasData);\n\n    return (\n      <div className=\"ui segments\" id=\"details\">\n        {getDetails(entries, ['NAME'], nameDetails)}\n        {getDetails(entries, EVENT_TAGS, (entry) =>\n          eventDetails(entry, this.context.intl as InjectedIntl),\n        )}\n        {getOtherDetails(entriesWithData)}\n        {getDetails(entriesWithData, ['NOTE'], noteDetails)}\n      </div>\n    );\n  }\n}\n","import {convertGedcom, TopolaData} from './gedcom_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  indi?: string,\n  generation?: number,\n): IndiInfo {\n  // If ID is not given or it doesn't exist in the data, use the first ID in\n  // the data.\n  const id =\n    indi && data.indis.some((i) => i.id === indi) ? indi : data.indis[0].id;\n  return {id, generation: generation || 0};\n}\n\nfunction prepareData(\n  gedcom: string,\n  cacheId: string,\n  images?: Map<string, string>,\n): TopolaData {\n  const data = convertGedcom(gedcom, images || new Map());\n  const serializedData = JSON.stringify(data);\n  try {\n    sessionStorage.setItem(cacheId, serializedData);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n  return data;\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport async function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(url);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  const urlToFetch = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/' + url\n    : url;\n\n  const response = await window.fetch(urlToFetch);\n  if (response.status !== 200) {\n    throw new Error(response.statusText);\n  }\n  const gedcom = await response.text();\n  return prepareData(gedcom, url);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport async function loadGedcom(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(hash);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  if (!gedcom) {\n    throw new Error('Error loading data. Please upload your file again.');\n  }\n  return prepareData(gedcom, hash, images);\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport logo from './topola.jpg';\nimport {Card, Grid, Image} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\nfunction formatBuildDate(dateString: string) {\n  return dateString.slice(0, 16);\n}\n\n/** The intro page. */\nexport function Intro() {\n  return (\n    <div id=\"content\">\n      <div className=\"backgroundImage\" />\n      <Card className=\"intro\">\n        <Card.Content>\n          <Card.Header>\n            <FormattedMessage\n              id=\"intro.title\"\n              defaultMessage=\"Topola Genealogy Viewer\"\n            />\n          </Card.Header>\n        </Card.Content>\n        <Card.Content>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column width={5}>\n                <Image src={logo} alt=\"Topola logo\" />\n              </Grid.Column>\n              <Grid.Column width={11}>\n                <p>\n                  <FormattedMessage\n                    id=\"intro.description\"\n                    defaultMessage={\n                      'Topola Genealogy is a genealogy tree viewer that lets you' +\n                      ' browse the structure of the family.'\n                    }\n                  />\n                </p>\n                <p>\n                  <FormattedMessage\n                    id=\"intro.instructions\"\n                    defaultMessage={\n                      'Use the LOAD FROM URL or LOAD FROM FILE buttons above to load' +\n                      ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n                      ' existing genealogy programs and web sites.'\n                    }\n                  />\n                </p>\n                <p>\n                  <FormattedMessage\n                    id=\"intro.examples\"\n                    defaultMessage={\n                      'Here are some examples from the web that you can view:'\n                    }\n                  />\n                </p>\n                <ul>\n                  <li>\n                    <GedcomLink\n                      url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n                      text=\"Karol Wojtyła\"\n                    />{' '}\n                    (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n                    <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n                      GENPOL\n                    </a>\n                    )\n                  </li>\n                  <li>\n                    <GedcomLink\n                      url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n                      text=\"Shakespeare\"\n                    />{' '}\n                    (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n                    <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n                      webtreeprint.com\n                    </a>\n                    )\n                  </li>\n                  <li>\n                    <GedcomLink\n                      url=\"http://genealogyoflife.com/tng/gedcom/HarryPotter.ged\"\n                      text=\"Harry Potter\"\n                    />{' '}\n                    (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n                    <a href=\"http://famousfamilytrees.blogspot.com/\">\n                      Famous Family Trees\n                    </a>\n                    )\n                  </li>\n                </ul>\n                <p>\n                  <b>\n                    <FormattedMessage\n                      id=\"intro.privacy\"\n                      defaultMessage=\"Privacy\"\n                    />\n                  </b>\n                  {': '}\n                  <FormattedMessage\n                    id=\"intro.privacy_note\"\n                    defaultMessage={\n                      'When using the \"load from file\" option, this site does not' +\n                      ' send your data anywhere and files loaded from disk do not' +\n                      ' leave your computer. When using \"load from URL\", data is' +\n                      ' passed through the {link} service to deal with an issue with' +\n                      ' cross-site file loading in the browser (CORS).'\n                    }\n                    values={{\n                      link: (\n                        <a href=\"https://cors-anywhere.herokuapp.com/\">\n                          cors-anywhere\n                        </a>\n                      ),\n                    }}\n                  />\n                </p>\n                <p className=\"ui right aligned version\">\n                  version: {formatBuildDate(process.env.REACT_APP_GIT_TIME!)} (\n                  <a\n                    href={`https://github.com/PeWu/topola-viewer/commit/${\n                      process.env.REACT_APP_GIT_SHA\n                    }`}\n                  >\n                    {process.env.REACT_APP_GIT_SHA}\n                  </a>\n                  )\n                </p>\n              </Grid.Column>{' '}\n            </Grid.Row>{' '}\n          </Grid>\n        </Card.Content>\n      </Card>\n    </div>\n  );\n}\n","import Cookies from 'js-cookie';\nimport {Date, JsonFam, JsonIndi} from 'topola';\nimport {GedcomData, TopolaData, normalizeGedcom} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\n\n/** WikiTree API getAncestors request. */\ninterface GetAncestorsRequest {\n  action: 'getAncestors';\n  key: string;\n  fields: string;\n}\n\n/** WikiTree API getRelatives request. */\ninterface GetRelatives {\n  action: 'getRelatives';\n  keys: string;\n  getChildren?: true;\n  getSpouses?: true;\n}\n\ninterface ClientLogin {\n  action: 'clientLogin';\n  authcode: string;\n}\n\ntype WikiTreeRequest = GetAncestorsRequest | GetRelatives | ClientLogin;\n\n/** Person structure returned from WikiTree API. */\ninterface Person {\n  Id: number;\n  Name: string;\n  FirstName: string;\n  LastNameAtBirth: string;\n  Spouses: {[key: number]: Person};\n  Children: {[key: number]: Person};\n  Mother: number;\n  Father: number;\n  Gender: string;\n  BirthDate: string;\n  DeathDate: string;\n  BirthLocation: string;\n  DeathLocation: string;\n  marriage_location: string;\n  marriage_date: string;\n  DataStatus?: {\n    BirthDate: string;\n    DeathDate: string;\n  };\n  PhotoData?: {\n    path: string;\n  };\n}\n\n/** Sends a request to the WikiTree API. Returns the parsed response JSON. */\nasync function wikiTreeGet(request: WikiTreeRequest, handleCors: boolean) {\n  const requestData = new FormData();\n  requestData.append('format', 'json');\n  for (const key in request) {\n    requestData.append(key, request[key]);\n  }\n  const apiUrl = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/https://apps.wikitree.com/api.php'\n    : 'https://apps.wikitree.com/api.php';\n  const response = await window.fetch(apiUrl, {\n    method: 'POST',\n    body: requestData,\n  });\n  const responseBody = await response.text();\n  return JSON.parse(responseBody);\n}\n\n/**\n * Retrieves ancestors from WikiTree for the given person ID.\n * Uses sessionStorage for caching responses.\n */\nasync function getAncestors(key: string, handleCors: boolean) {\n  const cacheKey = `wikitree:ancestors:${key}`;\n  const cachedData = sessionStorage.getItem(cacheKey);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getAncestors',\n      key: key,\n      fields: '*',\n    },\n    handleCors,\n  );\n  const result = response[0].ancestors as Person[];\n  sessionStorage.setItem(cacheKey, JSON.stringify(result));\n  return result;\n}\n\n/**\n * Retrieves relatives from WikiTree for the given array of person IDs.\n * Uses sessionStorage for caching responses.\n */\nasync function getRelatives(keys: string[], handleCors: boolean) {\n  const result: Person[] = [];\n  const keysToFetch: string[] = [];\n  keys.forEach((key) => {\n    const cachedData = sessionStorage.getItem(`wikitree:relatives:${key}`);\n    if (cachedData) {\n      result.push(JSON.parse(cachedData));\n    } else {\n      keysToFetch.push(key);\n    }\n  });\n  if (keysToFetch.length === 0) {\n    return result;\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getRelatives',\n      keys: keysToFetch.join(','),\n      getChildren: true,\n      getSpouses: true,\n    },\n    handleCors,\n  );\n  if (response[0].items === null) {\n    throw new Error(`WikiTree profile ${keysToFetch[0]} not found.`);\n  }\n  const fetchedResults = response[0].items.map(\n    (x: {person: Person}) => x.person,\n  ) as Person[];\n  fetchedResults.forEach((person) => {\n    sessionStorage.setItem(\n      `wikitree:relatives:${person.Name}`,\n      JSON.stringify(person),\n    );\n  });\n  return result.concat(fetchedResults);\n}\n\nexport async function clientLogin(authcode: string) {\n  const response = await wikiTreeGet(\n    {\n      action: 'clientLogin',\n      authcode,\n    },\n    false,\n  );\n  return response.clientLogin;\n}\n\n/**\n * Loads data from WikiTree to populate an hourglass chart starting from the\n * given person ID.\n */\nexport async function loadWikiTree(\n  key: string,\n  authcode?: string,\n): Promise<TopolaData> {\n  // Work around CORS if not in apps.wikitree.com domain.\n  const handleCors = window.location.hostname !== 'apps.wikitree.com';\n\n  if (!handleCors && !Cookies.get('wikidb_wtb_UserID') && authcode) {\n    const loginResult = await clientLogin(authcode);\n    if (loginResult.result === 'Success') {\n      sessionStorage.clear();\n    }\n  }\n\n  const everyone: Person[] = [];\n\n  // Fetch the ancestors of the input person and ancestors of his/her spouses.\n  const firstPerson = await getRelatives([key], handleCors);\n  if (!firstPerson[0].Name) {\n    throw new Error(\n      `WikiTree profile ${key} is not accessible. Try logging in.`,\n    );\n  }\n\n  const spouseKeys = Object.values(firstPerson[0].Spouses).map((s) => s.Name);\n  const ancestors = await Promise.all(\n    [key]\n      .concat(spouseKeys)\n      .map((personId) => getAncestors(personId, handleCors)),\n  );\n  const ancestorKeys = ancestors\n    .flat()\n    .map((person) => person.Name)\n    .filter((key) => !!key);\n  const ancestorDetails = await getRelatives(ancestorKeys, handleCors);\n  everyone.push(...ancestorDetails);\n\n  // Limit the number of generations of descendants because there may be tens of\n  // generations for some profiles.\n  const descendantGenerationLimit = 10;\n\n  // Fetch descendants recursively.\n  let toFetch = [key];\n  let generation = 0;\n  while (toFetch.length > 0 && generation <= descendantGenerationLimit) {\n    const people = await getRelatives(toFetch, handleCors);\n    everyone.push(...people);\n    const allSpouses = people.flatMap((person) =>\n      Object.values(person.Spouses),\n    );\n    everyone.push(...allSpouses);\n    // Fetch all children.\n    toFetch = people.flatMap((person) =>\n      Object.values(person.Children).map((c) => c.Name),\n    );\n    generation++;\n  }\n\n  // Map from person id to the set of families where they are a spouse.\n  const families = new Map<number, Set<string>>();\n  // Map from family id to the set of children.\n  const children = new Map<string, Set<number>>();\n  // Map from famliy id to the spouses.\n  const spouses = new Map<\n    string,\n    {wife?: number; husband?: number; spouse?: Person}\n  >();\n  // Map from numerical id to human-readable id.\n  const idToName = new Map<number, string>();\n\n  everyone.forEach((person) => {\n    idToName.set(person.Id, person.Name);\n    if (person.Mother || person.Father) {\n      const famId = getFamilyId(person.Mother, person.Father);\n      getSet(families, person.Mother).add(famId);\n      getSet(families, person.Father).add(famId);\n      getSet(children, famId).add(person.Id);\n      spouses.set(famId, {\n        wife: person.Mother || undefined,\n        husband: person.Father || undefined,\n      });\n    }\n  });\n\n  const indis: JsonIndi[] = [];\n  const converted = new Set<number>();\n  everyone.forEach((person) => {\n    if (converted.has(person.Id)) {\n      return;\n    }\n    converted.add(person.Id);\n    const indi = convertPerson(person);\n    if (person.Spouses) {\n      Object.values(person.Spouses).forEach((spouse) => {\n        const famId = getFamilyId(person.Id, spouse.Id);\n        getSet(families, person.Id).add(famId);\n        getSet(families, spouse.Id).add(famId);\n        const familySpouses =\n          person.Gender === 'Male'\n            ? {wife: spouse.Id, husband: person.Id, spouse}\n            : {wife: person.Id, husband: spouse.Id, spouse};\n        spouses.set(famId, familySpouses);\n      });\n    }\n    indi.fams = Array.from(getSet(families, person.Id));\n    indis.push(indi);\n  });\n\n  const fams = Array.from(spouses.entries()).map(([key, value]) => {\n    const fam: JsonFam = {\n      id: key,\n    };\n    const wife = value.wife && idToName.get(value.wife);\n    if (wife) {\n      fam.wife = wife;\n    }\n    const husband = value.husband && idToName.get(value.husband);\n    if (husband) {\n      fam.husb = husband;\n    }\n    fam.children = Array.from(getSet(children, key)).map(\n      (child) => idToName.get(child)!,\n    );\n    if (\n      value.spouse &&\n      ((value.spouse.marriage_date &&\n        value.spouse.marriage_date !== '0000-00-00') ||\n        value.spouse.marriage_location)\n    ) {\n      const parsedDate = parseDate(value.spouse.marriage_date);\n      fam.marriage = Object.assign({}, parsedDate, {\n        place: value.spouse.marriage_location,\n      });\n    }\n    return fam;\n  });\n\n  const chartData = normalizeGedcom({indis, fams});\n  const gedcom = buildGedcom(indis);\n  return {chartData, gedcom};\n}\n\n/** Creates a family identifier given 2 spouse identifiers. */\nfunction getFamilyId(spouse1: number, spouse2: number) {\n  if (spouse2 > spouse1) {\n    return `${spouse1}_${spouse2}`;\n  }\n  return `${spouse2}_${spouse1}`;\n}\n\nfunction convertPerson(person: Person): JsonIndi {\n  const indi: JsonIndi = {\n    id: person.Name,\n  };\n  if (person.FirstName !== 'Unknown') {\n    indi.firstName = person.FirstName;\n  }\n  if (person.LastNameAtBirth !== 'Unknown') {\n    indi.lastName = person.LastNameAtBirth;\n  }\n  if (person.Mother || person.Father) {\n    indi.famc = getFamilyId(person.Mother, person.Father);\n  }\n  if (person.Gender === 'Male') {\n    indi.sex = 'M';\n  } else if (person.Gender === 'Female') {\n    indi.sex = 'F';\n  }\n  if (\n    (person.BirthDate && person.BirthDate !== '0000-00-00') ||\n    person.BirthLocation\n  ) {\n    const parsedDate = parseDate(\n      person.BirthDate,\n      person.DataStatus && person.DataStatus.BirthDate,\n    );\n    indi.birth = Object.assign({}, parsedDate, {place: person.BirthLocation});\n  }\n  if (\n    (person.DeathDate && person.DeathDate !== '0000-00-00') ||\n    person.DeathLocation\n  ) {\n    const parsedDate = parseDate(\n      person.DeathDate,\n      person.DataStatus && person.DataStatus.DeathDate,\n    );\n    indi.death = Object.assign({}, parsedDate, {place: person.DeathLocation});\n  }\n  if (person.PhotoData) {\n    indi.images = [{url: `https://wikitree.com${person.PhotoData.path}`}];\n  }\n  return indi;\n}\n\n/**\n * Parses a date in the format returned by WikiTree and converts in to\n * the format defined by Topola.\n */\nfunction parseDate(date: string, dataStatus?: string) {\n  if (!date) {\n    return undefined;\n  }\n  const matchedDate = date.match(/(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/);\n  if (!matchedDate) {\n    return {text: date};\n  }\n  const parsedDate: Date = {};\n  if (matchedDate[1] !== '0000') {\n    parsedDate.year = ~~matchedDate[1];\n  }\n  if (matchedDate[2] !== '00') {\n    parsedDate.month = ~~matchedDate[2];\n  }\n  if (matchedDate[3] !== '00') {\n    parsedDate.day = ~~matchedDate[3];\n  }\n  if (dataStatus === 'after') {\n    return {dataRange: {from: parsedDate}};\n  }\n  if (dataStatus === 'before') {\n    return {dataRange: {to: parsedDate}};\n  }\n  if (dataStatus === 'guess') {\n    parsedDate.qualifier = 'abt';\n  }\n  return {date: parsedDate};\n}\n\n/**\n * Creates a GEDCOM structure for the purpose of displaying the details\n * panel.\n */\nfunction buildGedcom(indis: JsonIndi[]): GedcomData {\n  const gedcomIndis: {[key: string]: GedcomEntry} = {};\n  indis.forEach((indi) => {\n    // WikiTree URLs replace spaces with underscores.\n    const escapedId = indi.id.replace(/ /g, '_');\n    gedcomIndis[indi.id] = {\n      level: 0,\n      pointer: `@${indi.id}@`,\n      tag: 'INDI',\n      data: '',\n      tree: [\n        {\n          level: 1,\n          pointer: '',\n          tag: 'NAME',\n          data: `${indi.firstName || ''} /${indi.lastName || ''}/`,\n          tree: [],\n        },\n        {\n          level: 1,\n          pointer: '',\n          tag: 'WWW',\n          data: `https://www.wikitree.com/wiki/${escapedId}`,\n          tree: [],\n        },\n      ],\n    };\n  });\n\n  return {\n    head: {level: 0, pointer: '', tag: 'HEAD', data: '', tree: []},\n    indis: gedcomIndis,\n    fams: {},\n    other: {},\n  };\n}\n\n/**\n * Returns a set which is a value from a SetMultimap. If the key doesn't exist,\n * an empty set is added to the map.\n */\nfunction getSet<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\n  const set = map.get(key);\n  if (set) {\n    return set;\n  }\n  const newSet = new Set<V>();\n  map.set(key, newSet);\n  return newSet;\n}\n","import naturalSort from 'javascript-natural-sort';\nimport lunr from 'lunr';\nimport {GedcomData, pointerToId} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\n\nconst MAX_RESULTS = 8;\n\nexport interface SearchResult {\n  id: string;\n  indi: GedcomEntry;\n}\n\nexport interface SearchIndex {\n  search(input: string): SearchResult[];\n}\n\n/** Removes accents from letters, e.g. ó->o, ę->e. */\nfunction normalize(input: string) {\n  return input\n    .toLocaleLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/\\u0142/g, 'l'); // Special case: ł is not affected by NFD.\n}\n\n/** Comparator to sort by score first, then by id. */\nfunction compare(a: lunr.Index.Result, b: lunr.Index.Result) {\n  if (a.score !== b.score) {\n    return b.score - a.score;\n  }\n  return naturalSort(a.ref, b.ref);\n}\n\n/** Returns all last names of all husbands as a space-separated string. */\nfunction getHusbandLastName(indi: GedcomEntry, gedcom: GedcomData): string {\n  return indi.tree\n    .filter((entry) => entry.tag === 'FAMS')\n    .map((entry) => gedcom.fams[pointerToId(entry.data)])\n    .filter((entry) => !!entry)\n    .map((entry) => {\n      const husband = entry.tree.find((entry) => entry.tag === 'HUSB');\n      const husbandId = husband && pointerToId(husband.data);\n      return (\n        husbandId &&\n        husbandId !== pointerToId(indi.pointer) &&\n        gedcom.indis[husbandId]\n      );\n    })\n    .filter((entry) => !!entry)\n    .flatMap((husband) =>\n      (husband as GedcomEntry).tree\n        .filter((entry) => entry.tag === 'NAME')\n        .map((entry) => {\n          const names = entry.data.split('/');\n          return names.length >= 2 ? names[1] : '';\n        }),\n    )\n    .join(' ');\n}\n\nclass LunrSearchIndex implements SearchIndex {\n  private index: lunr.Index | undefined;\n\n  constructor(private gedcom: GedcomData) {}\n\n  initialize() {\n    const self = this;\n    this.index = lunr(function() {\n      this.ref('id');\n      this.field('id');\n      this.field('name', {boost: 10});\n      this.field('normalizedName', {boost: 8});\n      this.field('spouseLastName', {boost: 2});\n      this.field('normalizedSpouseLastName', {boost: 2});\n\n      for (let id in self.gedcom.indis) {\n        const indi = self.gedcom.indis[id];\n        const name = indi.tree\n          .filter((entry) => entry.tag === 'NAME')\n          .map((entry) => entry.data)\n          .join(' ');\n        const spouseLastName = getHusbandLastName(indi, self.gedcom);\n        this.add({\n          id,\n          name,\n          normalizedName: normalize(name),\n          spouseLastName,\n          normalizedSpouseLastName: normalize(spouseLastName),\n        });\n      }\n    });\n  }\n\n  public search(input: string) {\n    const query = input\n      .split(' ')\n      .filter((s) => !!s)\n      .map((s) => `+${s}*`)\n      .join(' ');\n    const results = this.index!.search(query);\n    return results\n      .sort(compare)\n      .slice(0, MAX_RESULTS)\n      .map((result) => ({id: result.ref, indi: this.gedcom.indis[result.ref]}));\n  }\n}\n\n/** Builds a search index from data. */\nexport function buildSearchIndex(gedcom: GedcomData): SearchIndex {\n  const index = new LunrSearchIndex(gedcom);\n  index.initialize();\n  return index;\n}\n","import * as React from 'react';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {InjectedIntl} from 'react-intl';\nimport {SearchResult} from './search_index';\nimport {translateDate} from './date_util';\n\nfunction getNameLine(result: SearchResult) {\n  const nameTag = result.indi.tree.find((entry) => entry.tag === 'NAME');\n  const name =\n    nameTag &&\n    nameTag.data\n      .split('/')\n      .filter((s) => !!s)\n      .join(' ');\n  if (result.id.length > 8) {\n    return name;\n  }\n  return (\n    <>\n      {name} <i>({result.id})</i>\n    </>\n  );\n}\n\nfunction getDate(indi: GedcomEntry, tag: string, intl: InjectedIntl) {\n  const eventEntry = indi.tree.find((entry) => entry.tag === tag);\n  const dateEntry =\n    eventEntry && eventEntry.tree.find((entry) => entry.tag === 'DATE');\n  return (dateEntry && translateDate(dateEntry.data, intl)) || '';\n}\n\nfunction getDescriptionLine(indi: GedcomEntry, intl: InjectedIntl) {\n  const birthDate = getDate(indi, 'BIRT', intl);\n  const deathDate = getDate(indi, 'DEAT', intl);\n  if (!deathDate) {\n    return birthDate;\n  }\n  return `${birthDate} – ${deathDate}`;\n}\n\n/** Produces an object that is displayed in the Semantic UI Search results. */\nexport function displaySearchResult(result: SearchResult, intl: InjectedIntl) {\n  return {\n    id: result.id,\n    key: result.id,\n    title: getNameLine(result),\n    description: getDescriptionLine(result.indi, intl),\n  };\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport Cookies from 'js-cookie';\nimport debounce from 'debounce';\nimport md5 from 'md5';\nimport {analyticsEvent} from './analytics';\nimport {buildSearchIndex, SearchIndex} from './search_index';\nimport {displaySearchResult} from './search_util';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {GedcomData} from './gedcom_util';\nimport {IndiInfo} from 'topola';\nimport {Link} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {\n  Header,\n  Button,\n  Icon,\n  Menu,\n  Modal,\n  Input,\n  Form,\n  Dropdown,\n  Search,\n  SearchProps,\n  SearchResultProps,\n} from 'semantic-ui-react';\n\nenum WikiTreeLoginState {\n  UNKNOWN,\n  NOT_LOGGED_IN,\n  LOGGED_IN,\n}\n\n/** Menus and dialogs state. */\ninterface State {\n  loadUrlDialogOpen: boolean;\n  url?: string;\n  wikiTreeLoginState: WikiTreeLoginState;\n  wikiTreeLoginUsername?: string;\n  searchResults: SearchResultProps[];\n}\n\ninterface EventHandlers {\n  onSelection: (indiInfo: IndiInfo) => void;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\ninterface Props {\n  /** True if the application is currently showing a chart. */\n  showingChart: boolean;\n  /** Data used for the search index. */\n  gedcom?: GedcomData;\n  standalone: boolean;\n  /** Whether to show the \"All relatives\" chart type in the menu. */\n  allowAllRelativesChart: boolean;\n  eventHandlers: EventHandlers;\n  /** Whether to show the 'Log in to WikiTree' button. */\n  showWikiTreeLogin: boolean;\n}\n\nfunction loadFileAsText(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsText(file);\n  });\n}\n\nfunction isImageFileName(fileName: string) {\n  const lower = fileName.toLowerCase();\n  return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\nexport class TopBar extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {\n    loadUrlDialogOpen: false,\n    searchResults: [],\n    wikiTreeLoginState: WikiTreeLoginState.UNKNOWN,\n  };\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  urlInputRef: React.RefObject<Input> = React.createRef();\n  wikiTreeLoginFormRef: React.RefObject<HTMLFormElement> = React.createRef();\n  wikiTreeReturnUrlRef: React.RefObject<HTMLInputElement> = React.createRef();\n  searchRef?: {setValue(value: string): void};\n  searchIndex?: SearchIndex;\n\n  /** Handles the \"Upload file\" button. */\n  private async handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const filesArray = Array.from(files);\n    (event.target as HTMLInputElement).value = ''; // Reset the file input.\n    analyticsEvent('upload_files_selected', {\n      event_value: files.length,\n    });\n\n    const gedcomFile =\n      filesArray.length === 1\n        ? filesArray[0]\n        : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n          filesArray[0];\n\n    // Convert uploaded images to object URLs.\n    const images = filesArray\n      .filter(\n        (file) => file.name !== gedcomFile.name && isImageFileName(file.name),\n      )\n      .map((file) => ({\n        name: file.name,\n        url: URL.createObjectURL(file),\n      }));\n    const imageMap = new Map(\n      images.map((entry) => [entry.name, entry.url] as [string, string]),\n    );\n\n    const data = await loadFileAsText(gedcomFile);\n    const imageFileNames = images\n      .map((image) => image.name)\n      .sort()\n      .join('|');\n    // Hash GEDCOM contents with uploaded image file names.\n    const hash = md5(md5(data) + imageFileNames);\n\n    // Use history.replace() when reuploading the same file and history.push() when loading\n    // a new file.\n    const search = queryString.parse(this.props.location.search);\n    const historyPush =\n      search.file === hash\n        ? this.props.history.replace\n        : this.props.history.push;\n\n    historyPush({\n      pathname: '/view',\n      search: queryString.stringify({file: hash}),\n      state: {data, images: imageMap},\n    });\n  }\n\n  /** Opens the \"Load from URL\" dialog. */\n  private openLoadUrlDialog() {\n    this.setState(\n      Object.assign({}, this.state, {loadUrlDialogOpen: true}),\n      () => this.urlInputRef.current!.focus(),\n    );\n  }\n\n  /** Cancels the \"Load from URL\" dialog. */\n  private handleClose() {\n    this.setState(Object.assign({}, this.state, {loadUrlDialogOpen: false}));\n  }\n\n  /** Upload button clicked in the \"Load from URL\" dialog. */\n  private handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        loadUrlDialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      analyticsEvent('url_selected');\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  private handleUrlChange(event: React.SyntheticEvent) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: (event.target as HTMLInputElement).value,\n      }),\n    );\n  }\n\n  /** On search input change. */\n  private handleSearch(input: string | undefined) {\n    if (!input) {\n      return;\n    }\n    const results = this.searchIndex!.search(input).map((result) =>\n      displaySearchResult(result, this.context.intl),\n    );\n    this.setState(Object.assign({}, this.state, {searchResults: results}));\n  }\n\n  /** On search result selected. */\n  private handleResultSelect(id: string) {\n    analyticsEvent('search_result_selected');\n    this.props.eventHandlers.onSelection({id, generation: 0});\n    this.searchRef!.setValue('');\n  }\n\n  private initializeSearchIndex() {\n    if (this.props.gedcom) {\n      this.searchIndex = buildSearchIndex(this.props.gedcom);\n    }\n  }\n\n  changeView(view: string) {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    if (search.view !== view) {\n      search.view = view;\n      location.search = queryString.stringify(search);\n      this.props.history.push(location);\n    }\n  }\n\n  /**\n   * Redirect to the WikiTree Apps login page with a return URL pointing to\n   * Topola Viewer hosted on apps.wikitree.com.\n   */\n  private wikiTreeLogin() {\n    const wikiTreeTopolaUrl =\n      'https://apps.wikitree.com/apps/wiech13/topola-viewer';\n    // Append '&' because the login page appends '?authcode=...' to this URL.\n    // TODO: remove ?authcode if it is in the current URL.\n    const returnUrl = `${wikiTreeTopolaUrl}${window.location.hash}&`;\n    this.wikiTreeReturnUrlRef.current!.value = returnUrl;\n    this.wikiTreeLoginFormRef.current!.submit();\n  }\n\n  private checkWikiTreeLoginState() {\n    const wikiTreeLoginState =\n      Cookies.get('wikidb_wtb_UserID') !== undefined\n        ? WikiTreeLoginState.LOGGED_IN\n        : WikiTreeLoginState.NOT_LOGGED_IN;\n    if (this.state.wikiTreeLoginState !== wikiTreeLoginState) {\n      const wikiTreeLoginUsername = Cookies.get('wikidb_wtb_UserName');\n      this.setState(\n        Object.assign({}, this.state, {\n          wikiTreeLoginState,\n          wikiTreeLoginUsername,\n        }),\n      );\n    }\n  }\n\n  async componentDidMount() {\n    this.checkWikiTreeLoginState();\n    this.initializeSearchIndex();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    this.checkWikiTreeLoginState();\n    if (prevProps.gedcom !== this.props.gedcom) {\n      this.initializeSearchIndex();\n    }\n  }\n\n  private loadFromUrlModal() {\n    return (\n      <Modal\n        open={this.state.loadUrlDialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e) => this.handleUrlChange(e)}\n              ref={this.urlInputRef}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://cors-anywhere.herokuapp.com/\">\n                      cors-anywhere.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  private chartMenus() {\n    if (!this.props.showingChart) {\n      return null;\n    }\n    return (\n      <>\n        <Menu.Item as=\"a\" onClick={() => this.props.eventHandlers.onPrint()}>\n          <Icon name=\"print\" />\n          <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n        </Menu.Item>\n\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"download\" />\n              <FormattedMessage id=\"menu.download\" defaultMessage=\"Download\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPdf()}\n            >\n              <FormattedMessage id=\"menu.pdf_file\" defaultMessage=\"PDF file\" />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPng()}\n            >\n              <FormattedMessage id=\"menu.png_file\" defaultMessage=\"PNG file\" />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadSvg()}\n            >\n              <FormattedMessage id=\"menu.svg_file\" defaultMessage=\"SVG file\" />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"eye\" />\n              <FormattedMessage id=\"menu.view\" defaultMessage=\"View\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => this.changeView('hourglass')}>\n              <Icon name=\"hourglass\" />\n              <FormattedMessage\n                id=\"menu.hourglass\"\n                defaultMessage=\"Hourglass chart\"\n              />\n            </Dropdown.Item>\n            {this.props.allowAllRelativesChart ? (\n              <Dropdown.Item onClick={() => this.changeView('relatives')}>\n                <Icon name=\"users\" />\n                <FormattedMessage\n                  id=\"menu.relatives\"\n                  defaultMessage=\"All relatives\"\n                />\n              </Dropdown.Item>\n            ) : null}\n            <Dropdown.Item onClick={() => this.changeView('fancy')}>\n              <Icon name=\"users\" />\n              <FormattedMessage\n                id=\"menu.fancy\"\n                defaultMessage=\"Fancy tree (experimental)\"\n              />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Search\n          onSearchChange={debounce(\n            (_: React.MouseEvent<HTMLElement>, data: SearchProps) =>\n              this.handleSearch(data.value),\n            200,\n          )}\n          onResultSelect={(_, data) => this.handleResultSelect(data.result.id)}\n          results={this.state.searchResults}\n          noResultsMessage={this.context.intl.formatMessage({\n            id: 'menu.search.no_results',\n            defaultMessage: 'No results found',\n          })}\n          placeholder={this.context.intl.formatMessage({\n            id: 'menu.search.placeholder',\n            defaultMessage: 'Search for people',\n          })}\n          selectFirstResult={true}\n          ref={(ref) =>\n            (this.searchRef = (ref as unknown) as {\n              setValue(value: string): void;\n            })\n          }\n        />\n      </>\n    );\n  }\n\n  private fileMenus() {\n    if (!this.props.standalone) {\n      return null;\n    }\n    return (\n      <>\n        <Link to=\"/\">\n          <Menu.Item>\n            <b>Topola Genealogy</b>\n          </Menu.Item>\n        </Link>\n        <Menu.Item as=\"a\" onClick={() => this.openLoadUrlDialog()}>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </Menu.Item>\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged,image/*\"\n          id=\"fileInput\"\n          multiple\n          onChange={(e) => this.handleUpload(e)}\n        />\n        <label htmlFor=\"fileInput\">\n          <Menu.Item as=\"a\">\n            <Icon name=\"folder open\" />\n            <FormattedMessage\n              id=\"menu.load_from_file\"\n              defaultMessage=\"Load from file\"\n            />\n          </Menu.Item>\n        </label>\n      </>\n    );\n  }\n\n  private wikiTreeLoginMenu() {\n    if (!this.props.showWikiTreeLogin) {\n      return null;\n    }\n    const wikiTreeLogoUrl =\n      'https://www.wikitree.com/photo.php/a/a5/WikiTree_Images.png';\n    switch (this.state.wikiTreeLoginState) {\n      case WikiTreeLoginState.NOT_LOGGED_IN:\n        return (\n          <Menu.Item as=\"a\" onClick={() => this.wikiTreeLogin()}>\n            <img\n              src={wikiTreeLogoUrl}\n              alt=\"WikiTree logo\"\n              style={{width: '24px', height: '24px'}}\n            />\n            <FormattedMessage\n              id=\"menu.wikitree_login\"\n              defaultMessage=\"Log in to WikiTree\"\n            />\n            <form\n              action=\"https://apps.wikitree.com/api.php\"\n              method=\"POST\"\n              style={{display: 'hidden'}}\n              ref={this.wikiTreeLoginFormRef}\n            >\n              <input type=\"hidden\" name=\"action\" value=\"clientLogin\" />\n              <input\n                type=\"hidden\"\n                name=\"returnURL\"\n                ref={this.wikiTreeReturnUrlRef}\n              />\n            </form>\n          </Menu.Item>\n        );\n      case WikiTreeLoginState.LOGGED_IN:\n        const tooltip = this.state.wikiTreeLoginUsername\n          ? this.context.intl.formatMessage(\n              {\n                id: 'menu.wikitree_popup_username',\n                defaultMessage: 'Logged in to WikiTree as {username}',\n              },\n              {username: this.state.wikiTreeLoginUsername},\n            )\n          : this.context.intl.formatMessage({\n              id: 'menu.wikitree_popup',\n              defaultMessage: 'Logged in to WikiTree',\n            });\n        return (\n          <Menu.Item title={tooltip}>\n            <img\n              src={wikiTreeLogoUrl}\n              alt=\"WikiTree logo\"\n              style={{width: '24px', height: '24px'}}\n            />\n            <FormattedMessage\n              id=\"menu.wikitree_logged_in\"\n              defaultMessage=\"Logged in\"\n            />\n          </Menu.Item>\n        );\n      default:\n        return null;\n    }\n  }\n\n  private sourceLink() {\n    return (\n      <Menu.Item\n        as=\"a\"\n        href=\"https://github.com/PeWu/topola-viewer\"\n        target=\"_blank\"\n      >\n        <FormattedMessage id=\"menu.github\" defaultMessage=\"Source on GitHub\" />\n      </Menu.Item>\n    );\n  }\n\n  private poweredByLink() {\n    return (\n      <Menu.Item\n        as=\"a\"\n        href=\"https://pewu.github.com/topola-viewer\"\n        target=\"_blank\"\n      >\n        <FormattedMessage\n          id=\"menu.powered_by\"\n          defaultMessage=\"Powered by Topola\"\n        />\n      </Menu.Item>\n    );\n  }\n\n  render() {\n    return (\n      <Menu attached=\"top\" inverted color=\"blue\" size=\"large\">\n        {this.fileMenus()}\n        {this.chartMenus()}\n        <Menu.Menu position=\"right\">\n          {this.wikiTreeLoginMenu()}\n          {this.props.standalone ? this.sourceLink() : this.poweredByLink()}\n        </Menu.Menu>\n        {this.loadFromUrlModal()}\n      </Menu>\n    );\n  }\n}\n","import * as H from 'history';\nimport * as queryString from 'query-string';\nimport * as React from 'react';\nimport {analyticsEvent} from './analytics';\nimport {Chart, ChartType} from './chart';\nimport {Details} from './details';\nimport {FormattedMessage} from 'react-intl';\nimport {getSelection, loadFromUrl, loadGedcom} from './load_data';\nimport {getSoftware, TopolaData} from './gedcom_util';\nimport {IndiInfo} from 'topola';\nimport {intlShape} from 'react-intl';\nimport {Intro} from './intro';\nimport {Loader, Message, Portal, Responsive} from 'semantic-ui-react';\nimport {loadWikiTree} from './wikitree';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {TopBar} from './top_bar';\n\n/** Shows an error message in the middle of the screen. */\nfunction ErrorMessage(props: {message?: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>\n        <FormattedMessage\n          id=\"error.failed_to_load_file\"\n          defaultMessage={'Failed to load file'}\n        />\n      </Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface ErrorPopupProps {\n  message?: string;\n  open: boolean;\n  onDismiss: () => void;\n}\n\n/**\n * Shows a dismissable error message in the bottom left corner of the screen.\n */\nfunction ErrorPopup(props: ErrorPopupProps) {\n  return (\n    <Portal open={props.open} onClose={props.onDismiss}>\n      <Message negative className=\"errorPopup\" onDismiss={props.onDismiss}>\n        <Message.Header>\n          <FormattedMessage id=\"error.error\" defaultMessage={'Error'} />\n        </Message.Header>\n        <p>{props.message}</p>\n      </Message>\n    </Portal>\n  );\n}\n\n/**\n * Message types used in embedded mode.\n * When the parent is ready to receive messages, it sends PARENT_READY.\n * When the child (this app) is ready to receive messages, it sends READY.\n * When the child receives PARENT_READY, it sends READY.\n * When the parent receives READY, it sends data in a GEDCOM message.\n */\nenum EmbeddedMessageType {\n  GEDCOM = 'gedcom',\n  READY = 'ready',\n  PARENT_READY = 'parent_ready',\n}\n\n/** Message sent to parent or received from parent in embedded mode. */\ninterface EmbeddedMessage {\n  message: EmbeddedMessageType;\n}\n\ninterface GedcomMessage extends EmbeddedMessage {\n  message: EmbeddedMessageType.GEDCOM;\n  gedcom?: string;\n}\n\n/** Interface encapsulating functions specific for a data source. */\ninterface DataSource {\n  /**\n   * Returns true if the application is now loading a completely new data set\n   * and the existing one should be wiped.\n   */\n  isNewData(args: Arguments, state: State): boolean;\n  /** Loads data from the data source. */\n  loadData(args: Arguments): Promise<TopolaData>;\n}\n\n/** Files opened from the local computer. */\nclass UploadedDataSource implements DataSource {\n  isNewData(args: Arguments, state: State): boolean {\n    return (\n      args.hash !== state.hash ||\n      !!(args.gedcom && !state.loading && !state.data)\n    );\n  }\n\n  async loadData(args: Arguments): Promise<TopolaData> {\n    try {\n      const data = await loadGedcom(args.hash!, args.gedcom, args.images);\n      const software = getSoftware(data.gedcom.head);\n      analyticsEvent('upload_file_loaded', {\n        event_label: software,\n        event_value: (args.images && args.images.size) || 0,\n      });\n      return data;\n    } catch (error) {\n      analyticsEvent('upload_file_error');\n      throw error;\n    }\n  }\n}\n\n/** GEDCOM file loaded by pointing to a URL. */\nclass GedcomUrlDataSource implements DataSource {\n  isNewData(args: Arguments, state: State): boolean {\n    return args.url !== state.url;\n  }\n\n  async loadData(args: Arguments): Promise<TopolaData> {\n    try {\n      const data = await loadFromUrl(args.url!, args.handleCors);\n      const software = getSoftware(data.gedcom.head);\n      analyticsEvent('upload_file_loaded', {event_label: software});\n      return data;\n    } catch (error) {\n      analyticsEvent('url_file_error');\n      throw error;\n    }\n  }\n}\n\n/** Loading data from the WikiTree API. */\nclass WikiTreeDataSource implements DataSource {\n  isNewData(args: Arguments, state: State): boolean {\n    // WikiTree is always a single data source.\n    return false;\n  }\n\n  async loadData(args: Arguments): Promise<TopolaData> {\n    try {\n      const data = await loadWikiTree(args.indi!, args.authcode);\n      analyticsEvent('wikitree_loaded');\n      return data;\n    } catch (error) {\n      analyticsEvent('wikitree_error');\n      throw error;\n    }\n  }\n}\n\n/** Supported data sources. */\nenum DataSourceEnum {\n  UPLOADED,\n  GEDCOM_URL,\n  WIKITREE,\n}\n\n/** Mapping from data source identifier to data source handler functions. */\nconst DATA_SOURCES = new Map([\n  [DataSourceEnum.UPLOADED, new UploadedDataSource()],\n  [DataSourceEnum.GEDCOM_URL, new GedcomUrlDataSource()],\n  [DataSourceEnum.WIKITREE, new WikiTreeDataSource()],\n]);\n\n/** Arguments passed to the application, primarily through URL parameters. */\ninterface Arguments {\n  showSidePanel: boolean;\n  embedded: boolean;\n  url?: string;\n  indi?: string;\n  generation?: number;\n  hash?: string;\n  handleCors: boolean;\n  standalone: boolean;\n  source?: DataSourceEnum;\n  authcode?: string;\n  chartType: ChartType;\n  gedcom?: string;\n  images?: Map<string, string>;\n  enableZoom: boolean;\n}\n\n/**\n * Retrieve arguments passed into the application through the URL and uploaded\n * data.\n */\nfunction getArguments(location: H.Location<any>): Arguments {\n  const search = queryString.parse(location.search);\n  const getParam = (name: string) => {\n    const value = search[name];\n    return typeof value === 'string' ? value : undefined;\n  };\n\n  const parsedGen = Number(getParam('gen'));\n  const view = getParam('view');\n  const chartTypes = new Map<string | undefined, ChartType>([\n    ['relatives', ChartType.Relatives],\n    ['fancy', ChartType.Fancy],\n  ]);\n  const hash = getParam('file');\n  const url = getParam('url');\n  const source =\n    getParam('source') === 'wikitree'\n      ? DataSourceEnum.WIKITREE\n      : hash\n      ? DataSourceEnum.UPLOADED\n      : url\n      ? DataSourceEnum.GEDCOM_URL\n      : undefined;\n  return {\n    showSidePanel: getParam('sidePanel') !== 'false', // True by default.\n    embedded: getParam('embedded') === 'true', // False by default.\n    url,\n    indi: getParam('indi'),\n    generation: !isNaN(parsedGen) ? parsedGen : undefined,\n    hash,\n    handleCors: getParam('handleCors') !== 'false', // True by default.\n    standalone: getParam('standalone') !== 'false', // True by default.\n    source,\n    authcode: getParam('?authcode'),\n\n    // Hourglass is the default view.\n    chartType: chartTypes.get(view) || ChartType.Hourglass,\n\n    gedcom: location.state && location.state.data,\n    images: location.state && location.state.images,\n    enableZoom: getParam('enableZoom') === 'true', // False by default.\n  };\n}\n\n/** Returs true if the changes object has values that are different than those in state. */\nfunction hasUpdatedValues<T>(state: T, changes: Partial<T> | undefined) {\n  if (!changes) {\n    return false;\n  }\n  return Object.entries(changes).some(\n    ([key, value]) => value !== undefined && state[key] !== value,\n  );\n}\n\ninterface State {\n  /** Loaded data. */\n  data?: TopolaData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Hash of the GEDCOM contents. */\n  hash?: string;\n  /** Error to display. */\n  error?: string;\n  /** True if data is currently being loaded. */\n  loading: boolean;\n  /** URL of the data that is loaded or is being loaded. */\n  url?: string;\n  /** Whether the side panel is shown. */\n  showSidePanel?: boolean;\n  /** Whether the app is in embedded mode, i.e. embedded in an iframe. */\n  embedded: boolean;\n  /** Whether the app is in standalone mode, i.e. showing 'open file' menus. */\n  standalone: boolean;\n  /** Type of displayed chart. */\n  chartType: ChartType;\n  /** Whether to show the error popup. */\n  showErrorPopup: boolean;\n  /** Source of the data. */\n  source?: DataSourceEnum;\n  loadingMore?: boolean;\n  /** Whether the zoom functionality is enabled. */\n  enableZoom: boolean;\n}\n\nexport class App extends React.Component<RouteComponentProps, {}> {\n  state: State = {\n    loading: false,\n    embedded: false,\n    standalone: true,\n    chartType: ChartType.Hourglass,\n    showErrorPopup: false,\n    enableZoom: false,\n  };\n  chartRef: Chart | null = null;\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  /** Sets the state with a new individual selection and chart type. */\n  private updateDisplay(\n    selection: IndiInfo,\n    otherStateChanges?: Partial<State>,\n  ) {\n    if (\n      !this.state.selection ||\n      this.state.selection.id !== selection.id ||\n      this.state.selection!.generation !== selection.generation ||\n      hasUpdatedValues(this.state, otherStateChanges)\n    ) {\n      this.setState(\n        Object.assign({}, this.state, {selection}, otherStateChanges),\n      );\n    }\n  }\n\n  /** Sets error message after data load failure. */\n  private setError(error: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        error: error,\n        loading: false,\n      }),\n    );\n  }\n\n  private async onMessage(message: EmbeddedMessage) {\n    if (message.message === EmbeddedMessageType.PARENT_READY) {\n      // Parent didn't receive the first 'ready' message, so we need to send it again.\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n    } else if (message.message === EmbeddedMessageType.GEDCOM) {\n      const gedcom = (message as GedcomMessage).gedcom;\n      if (!gedcom) {\n        return;\n      }\n      try {\n        const data = await loadGedcom('', gedcom);\n        const software = getSoftware(data.gedcom.head);\n        analyticsEvent('embedded_file_loaded', {\n          event_label: software,\n        });\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            selection: getSelection(data.chartData),\n            error: undefined,\n            loading: false,\n          }),\n        );\n      } catch (error) {\n        analyticsEvent('embedded_file_error');\n        this.setError(error.message);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  async componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      return;\n    }\n\n    const args = getArguments(this.props.location);\n\n    if (args.embedded && !this.state.embedded) {\n      this.setState(\n        Object.assign({}, this.state, {\n          embedded: true,\n          standalone: false,\n          showSidePanel: args.showSidePanel,\n        }),\n      );\n      // Notify the parent window that we are ready.\n      window.parent.postMessage('ready', '*');\n      window.addEventListener('message', (data) => this.onMessage(data.data));\n    }\n    if (args.embedded) {\n      // If the app is embedded, do not run the normal loading code.\n      return;\n    }\n\n    const dataSource = DATA_SOURCES.get(args.source!);\n\n    if (!dataSource) {\n      this.props.history.replace({pathname: '/'});\n    } else if (\n      (!this.state.loading && !this.state.data && !this.state.error) ||\n      args.source !== this.state.source ||\n      dataSource.isNewData(args, this.state)\n    ) {\n      // Set loading state.\n      this.setState(\n        Object.assign({}, this.state, {\n          data: undefined,\n          selection: undefined,\n          hash: args.hash,\n          error: undefined,\n          loading: true,\n          url: args.url,\n          standalone: args.standalone,\n          chartType: args.chartType,\n          source: args.source,\n          enableZoom: args.enableZoom,\n        }),\n      );\n      try {\n        const data = await dataSource.loadData(args);\n\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            hash: args.hash,\n            selection: getSelection(data.chartData, args.indi, args.generation),\n            error: undefined,\n            loading: false,\n            url: args.url,\n            showSidePanel: args.showSidePanel,\n            standalone: args.standalone,\n            chartType: args.chartType,\n            source: args.source,\n            enableZoom: args.enableZoom,\n          }),\n        );\n      } catch (error) {\n        this.setError(error.message);\n      }\n    } else if (this.state.data && this.state.selection) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(\n        this.state.data.chartData,\n        args.indi,\n        args.generation,\n      );\n      const loadMoreFromWikitree =\n        args.source === DataSourceEnum.WIKITREE &&\n        (!this.state.selection || this.state.selection.id !== selection.id);\n      this.updateDisplay(selection, {\n        chartType: args.chartType,\n        loadingMore: loadMoreFromWikitree || undefined,\n      });\n      if (loadMoreFromWikitree) {\n        const data = await loadWikiTree(args.indi!);\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            hash: args.hash,\n            selection: getSelection(data.chartData, args.indi, args.generation),\n            error: undefined,\n            loading: false,\n            url: args.url,\n            showSidePanel: args.showSidePanel,\n            standalone: args.standalone,\n            chartType: args.chartType,\n            source: args.source,\n            enableZoom: args.enableZoom,\n            loadingMore: false,\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    analyticsEvent('selection_changed');\n    if (this.state.embedded) {\n      // In embedded mode the URL doesn't change.\n      this.updateDisplay(selection);\n      return;\n    }\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    search.indi = selection.id;\n    search.gen = String(selection.generation);\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  };\n\n  private onPrint = () => {\n    analyticsEvent('print');\n    this.chartRef && this.chartRef.print();\n  };\n\n  private showErrorPopup(message: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: true,\n        error: message,\n      }),\n    );\n  }\n\n  private onDownloadPdf = async () => {\n    analyticsEvent('download_pdf');\n    try {\n      this.chartRef && (await this.chartRef.downloadPdf());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_pdf',\n          defaultMessage:\n            'Failed to generate PDF file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadPng = async () => {\n    analyticsEvent('download_png');\n    try {\n      this.chartRef && (await this.chartRef.downloadPng());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_png',\n          defaultMessage:\n            'Failed to generate PNG file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadSvg = () => {\n    analyticsEvent('download_svg');\n    this.chartRef && this.chartRef.downloadSvg();\n  };\n\n  onDismissErrorPopup = () => {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: false,\n      }),\n    );\n  };\n\n  private renderMainArea = () => {\n    if (this.state.data && this.state.selection) {\n      return (\n        <div id=\"content\">\n          <ErrorPopup\n            open={this.state.showErrorPopup}\n            message={this.state.error}\n            onDismiss={this.onDismissErrorPopup}\n          />\n          {this.state.loadingMore ? (\n            <Loader active inline size=\"small\" />\n          ) : null}\n          <Chart\n            data={this.state.data.chartData}\n            selection={this.state.selection}\n            chartType={this.state.chartType}\n            onSelection={this.onSelection}\n            ref={(ref) => (this.chartRef = ref)}\n            enableZoom={this.state.enableZoom}\n          />\n          {this.state.showSidePanel ? (\n            <Responsive minWidth={768} id=\"sidePanel\">\n              <Details\n                gedcom={this.state.data.gedcom}\n                indi={this.state.selection.id}\n              />\n            </Responsive>\n          ) : null}\n        </div>\n      );\n    }\n    if (this.state.error) {\n      return <ErrorMessage message={this.state.error!} />;\n    }\n    return <Loader active size=\"large\" />;\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              gedcom={this.state.data && this.state.data.gedcom}\n              allowAllRelativesChart={\n                this.state.source !== DataSourceEnum.WIKITREE\n              }\n              showingChart={\n                !!(\n                  this.props.history.location.pathname === '/view' &&\n                  this.state.data &&\n                  this.state.selection\n                )\n              }\n              standalone={this.state.standalone}\n              eventHandlers={{\n                onSelection: this.onSelection,\n                onPrint: this.onPrint,\n                onDownloadPdf: this.onDownloadPdf,\n                onDownloadPng: this.onDownloadPng,\n                onDownloadSvg: this.onDownloadSvg,\n              }}\n              showWikiTreeLogin={this.state.source === DataSourceEnum.WIKITREE}\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n","import * as locale_en from 'react-intl/locale-data/en';\nimport * as locale_pl from 'react-intl/locale-data/pl';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_pl from './translations/pl.json';\nimport {addLocaleData} from 'react-intl';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\naddLocaleData([...locale_en, ...locale_pl]);\n\nconst messages = {\n  pl: messages_pl,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Router>\n        <Route component={App} />\n      </Router>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}