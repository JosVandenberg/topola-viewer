{"version":3,"sources":["analytics.ts","chart.tsx","gedcom_util.ts","date_util.ts","details.tsx","load_data.ts","intro.tsx","search_index.ts","search_util.tsx","top_bar.tsx","app.tsx","wikitree.ts","index.tsx"],"names":["analyticsEvent","action","data","window","gtag","ChartType","zoomed","parent","d3","node","parentElement","scrollLeft","transform","x","scrollTop","y","scrolled","clientWidth","clientHeight","call","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","Promise","resolve","reject","onload","e","target","result","inlineImage","_callee6","image","href","response","dataUrl","regenerator_default","a","wrap","_context6","prev","next","baseVal","abrupt","fetch","sent","t0","console","warn","stop","inlineImages","_callee7","svg","images","_context7","Array","from","getElementsByTagName","all","map","loadImage","Image","src","URL","createObjectURL","addEventListener","drawOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","type","toBlob","Chart","_React$PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","chart","animating","rerenderRequired","inherits","createClass","key","value","props","chartType","Hourglass","HourglassChart","Relatives","RelativesChart","Fancy","FancyChart","CircleRenderer","DetailedRenderer","_this2","undefined","initialRender","innerHTML","createChart","json","getChartType","renderer","getRendererType","svgSelector","indiCallback","info","onSelection","animate","updateSvgSize","locale","context","intl","setData","chartInfo","render","startIndi","selection","id","baseGeneration","generation","on","scaleExtent","translateExtent","size","dx","origin","dy","offsetX","offsetY","svgTransition","transition","delay","duration","attr","tween","i","t","animationPromise","then","renderChart","prevProps","react","getElementById","cloneNode","removeAttribute","XMLSerializer","serializeToString","_getSvgContentsWithInlinedImages","asyncToGenerator","mark","_callee","_context","_this3","printWindow","style","position","top","left","contentDocument","open","write","getSvgContents","close","setTimeout","contentWindow","focus","print","parentNode","removeChild","body","appendChild","_downloadSvg","_callee2","contents","_context2","getSvgContentsWithInlinedImages","Blob","saveAs","_drawOnCanvas2","_callee3","_context3","t1","_downloadPng","_callee4","_context4","_downloadPdf","_callee5","doc","_context5","jsPDF","orientation","unit","format","addImage","save","React","contextTypes","intlShape","pointerToId","pointer","substring","prepareGedcom","entries","head","find","entry","tag","indis","fams","other","forEach","sortChildren","gedcom","comparator","idToIndiMap","Map","indi","indiId1","indiId2","b","idComparison","indi1","indi2","birth1","birth","birth2","date1","date","dateRange","date2","year","month","day","birthDatesComparator","newFams","fam","children","newChildren","sort","assign","sortFamilyChildren","IMAGE_EXTENSIONS","filterImage","newImages","fileName","url","match","has","push","get","title","startsWith","lowerName","toLowerCase","some","ext","endsWith","isImageFile","filterImages","newIndis","getSoftware","sour","tree","name","DATE_QUALIFIERS","formatDate","hasDay","hasMonth","hasYear","text","dateObject","Date","qualifier","formatOptions","formatMessage","defaultMessage","Intl","DateTimeFormat","join","translateDate","gedcomDate","dateOrRange","getDate","fromDate","toDate","to","translatedFromDate","translatedToDate","formatDateRage","EVENT_TAGS","EXCLUDED_TAGS","TAG_DESCRIPTIONS","translateTag","index_es","joinLines","lines","line","index","Linkify_default","properties","getData","subentry","last","noteDetails","nameDetails","className","split","filter","getDetails","tags","detailsFunction","flatMap","element","hasData","getOtherDetails","includes","toConsumableArray","note","dataDetails","Details","_React$Component","entriesWithData","dereferenced","dereference","place","eventDetails","getSelection","prepareData","cacheId","parseGedcom","gedcomEntriesToJson","Error","chartData","convertGedcom","serializedData","JSON","stringify","sessionStorage","setItem","loadFromUrl","_x","_x2","_loadFromUrl","handleCors","cachedData","urlToFetch","getItem","parse","status","statusText","loadGedcom","_x3","_x4","_x5","_loadGedcom","hash","GedcomLink","Link","pathname","search","queryString","Intro","Card","Content","Header","values","link","process","toISOString","slice","replace","normalize","input","toLocaleLowerCase","compare","score","naturalSort","ref","getHusbandLastName","husband","husbandId","names","LunrSearchIndex","self","lunr","field","boost","spouseLastName","add","normalizedName","normalizedSpouseLastName","query","s","getNameLine","nameTag","eventEntry","dateEntry","getDescriptionLine","birthDate","deathDate","WikiTreeLoginState","loadFileAsText","file","evt","readAsText","isImageFileName","lower","EmbeddedMessageType","TopBar","state","loadUrlDialogOpen","searchResults","wikiTreeLoginState","UNKNOWN","urlInputRef","wikiTreeLoginFormRef","wikiTreeReturnUrlRef","searchRef","searchIndex","_handleUpload","event","files","filesArray","gedcomFile","imageMap","imageFileNames","event_value","md5","location","history","setState","current","results","description","displaySearchResult","eventHandlers","setValue","initialize","buildSearchIndex","view","returnUrl","submit","Cookies","LOGGED_IN","NOT_LOGGED_IN","wikiTreeLoginUsername","_componentDidMount","checkWikiTreeLoginState","initializeSearchIndex","_this4","Modal","onClose","handleClose","centered","Icon","txt","Form","onSubmit","handleLoad","Input","placeholder","fluid","onChange","handleUrlChange","Actions","Button","secondary","onClick","primary","_this5","showingChart","Menu","Item","as","onPrint","Dropdown","trigger","onDownloadPdf","onDownloadPng","onDownloadSvg","changeView","allowAllRelativesChart","Search","onSearchChange","debounce","_","handleSearch","onResultSelect","handleResultSelect","noResultsMessage","selectFirstResult","_this6","standalone","openLoadUrlDialog","accept","multiple","handleUpload","htmlFor","_this7","showWikiTreeLogin","wikiTreeLogoUrl","wikiTreeLogin","alt","method","display","tooltip","username","attached","inverted","color","fileMenus","chartMenus","wikiTreeLoginMenu","sourceLink","poweredByLink","loadFromUrlModal","wikiTreeGet","request","requestData","apiUrl","responseBody","FormData","append","getAncestors","cacheKey","fields","ancestors","getRelatives","keys","keysToFetch","fetchedResults","getChildren","getSpouses","items","person","Name","clientLogin","_x7","_clientLogin","authcode","loadWikiTree","_x8","_x9","_loadWikiTree","everyone","firstPerson","spouseKeys","ancestorKeys","ancestorDetails","descendantGenerationLimit","toFetch","people","allSpouses","families","spouses","idToName","converted","hostname","clear","Spouses","personId","flat","Children","c","set","Id","Mother","Father","famId","getFamilyId","getSet","wife","Set","convertPerson","spouse","familySpouses","Gender","_ref","_ref2","slicedToArray","husb","child","marriage_date","marriage_location","parsedDate","parseDate","marriage","buildGedcom","spouse1","spouse2","FirstName","firstName","LastNameAtBirth","lastName","famc","sex","BirthDate","DeathDate","BirthLocation","DataStatus","DeathLocation","death","PhotoData","path","dataStatus","matchedDate","dataRange","gedcomIndis","escapedId","level","newSet","ErrorMessage","Message","negative","message","ErrorPopup","Portal","onDismiss","App","loading","embedded","showErrorPopup","wikiTreeSource","chartRef","updateDisplay","gen","String","downloadPdf","downloadPng","downloadSvg","onDismissErrorPopup","renderMainArea","error","loadingMore","Loader","active","inline","chart_Chart","showSidePanel","Responsive","minWidth","details_Details","source","otherStateChanges","changes","_onMessage","PARENT_READY","postMessage","READY","GEDCOM","event_label","setError","componentDidUpdate","_componentDidUpdate","getParam","parsedGen","chartTypes","software","loadMoreFromWikitree","_data","onMessage","Number","isNaN","isNewData","t2","Route","top_bar_TopBar","Switch","exact","component","Redirect","addLocaleData","locale_en","locale_pl","messages","pl","messages_pl","language","navigator","browser","detect","ReactDOM","querySelector","HashRouter"],"mappings":"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","file":"static/js/main.4ce3b963.chunk.js","sourcesContent":["/** Sends an event to Google Analytics. */\nexport function analyticsEvent(action: string, data?: any) {\n  (window as any).gtag('event', action, data);\n}\n","import * as d3 from 'd3';\nimport * as React from 'react';\nimport jsPDF from 'jspdf';\nimport {intlShape} from 'react-intl';\nimport {saveAs} from 'file-saver';\nimport {\n  JsonGedcomData,\n  ChartHandle,\n  IndiInfo,\n  createChart,\n  DetailedRenderer,\n  HourglassChart,\n  RelativesChart,\n  FancyChart,\n  CircleRenderer,\n} from 'topola';\n\n/** Called when the view is dragged with the mouse. */\nfunction zoomed() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement!;\n  parent.scrollLeft = -d3.event.transform.x;\n  parent.scrollTop = -d3.event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n  const svg = d3.select('#chart');\n  const parent = (svg.node() as HTMLElement).parentElement as Element;\n  const x = parent.scrollLeft + parent.clientWidth / 2;\n  const y = parent.scrollTop + parent.clientHeight / 2;\n  d3.select(parent).call(d3.zoom().translateTo, x, y);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n  const reader = new FileReader();\n  reader.readAsDataURL(blob);\n  return new Promise<string>((resolve, reject) => {\n    reader.onload = (e) => resolve((e.target as FileReader).result as string);\n  });\n}\n\nasync function inlineImage(image: SVGImageElement) {\n  const href = image.href.baseVal;\n  if (!href) {\n    return;\n  }\n  try {\n    const response = await fetch(href);\n    const blob = await response.blob();\n    const dataUrl = await loadAsDataUrl(blob);\n    image.href.baseVal = dataUrl;\n  } catch (e) {\n    console.warn('Failed to load image:', e);\n  }\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nasync function inlineImages(svg: Element): Promise<void> {\n  const images = Array.from(svg.getElementsByTagName('image'));\n  await Promise.all(images.map(inlineImage));\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = URL.createObjectURL(blob);\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    image.addEventListener('load', () => resolve(image));\n  });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawOnCanvas(image: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  // Scale image for better quality.\n  canvas.width = image.width * 2;\n  canvas.height = image.height * 2;\n\n  const ctx = canvas.getContext('2d')!;\n  const oldFill = ctx.fillStyle;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = oldFill;\n\n  ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n  return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    canvas.toBlob((blob) => {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    }, type);\n  });\n}\n\n/** Supported chart types. */\nexport enum ChartType {\n  Hourglass,\n  Relatives,\n  Fancy,\n}\n\nexport interface ChartProps {\n  data: JsonGedcomData;\n  selection: IndiInfo;\n  chartType: ChartType;\n  onSelection: (indiInfo: IndiInfo) => void;\n}\n\n/** Component showing the genealogy chart and handling transition animations. */\nexport class Chart extends React.PureComponent<ChartProps, {}> {\n  private chart?: ChartHandle;\n  /** Animation is in progress. */\n  private animating = false;\n  /** Rendering is required after the current animation finishes. */\n  private rerenderRequired = false;\n\n  private getChartType() {\n    switch (this.props.chartType) {\n      case ChartType.Hourglass:\n        return HourglassChart;\n      case ChartType.Relatives:\n        return RelativesChart;\n      case ChartType.Fancy:\n        return FancyChart;\n      default:\n        // Fall back to hourglass chart.\n        return HourglassChart;\n    }\n  }\n\n  private getRendererType() {\n    switch (this.props.chartType) {\n      case ChartType.Fancy:\n        return CircleRenderer;\n      default:\n        // Use DetailedRenderer by default.\n        return DetailedRenderer;\n    }\n  }\n\n  /**\n   * Renders the chart or performs a transition animation to a new state.\n   * If indiInfo is not given, it means that it is the initial render and no\n   * animation is performed.\n   */\n  private renderChart(args: {initialRender: boolean} = {initialRender: false}) {\n    // Wait for animation to finish if animation is in progress.\n    if (!args.initialRender && this.animating) {\n      this.rerenderRequired = true;\n      return;\n    }\n\n    if (args.initialRender) {\n      (d3.select('#chart').node() as HTMLElement).innerHTML = '';\n      this.chart = createChart({\n        json: this.props.data,\n        chartType: this.getChartType(),\n        renderer: this.getRendererType(),\n        svgSelector: '#chart',\n        indiCallback: (info) => this.props.onSelection(info),\n        animate: true,\n        updateSvgSize: false,\n        locale: this.context.intl.locale,\n      });\n    } else {\n      this.chart!.setData(this.props.data);\n    }\n    const chartInfo = this.chart!.render({\n      startIndi: this.props.selection.id,\n      baseGeneration: this.props.selection.generation,\n    });\n    const svg = d3.select('#chart');\n    const parent = (svg.node() as HTMLElement).parentElement as Element;\n\n    d3.select(parent)\n      .on('scroll', scrolled)\n      .call(\n        d3\n          .zoom()\n          .scaleExtent([1, 1])\n          .translateExtent([[0, 0], chartInfo.size])\n          .on('zoom', zoomed),\n      );\n\n    const scrollTopTween = (scrollTop: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollTop, scrollTop);\n        return (t: number) => {\n          parent.scrollTop = i(t);\n        };\n      };\n    };\n    const scrollLeftTween = (scrollLeft: number) => {\n      return () => {\n        const i = d3.interpolateNumber(parent.scrollLeft, scrollLeft);\n        return (t: number) => {\n          parent.scrollLeft = i(t);\n        };\n      };\n    };\n\n    const dx = parent.clientWidth / 2 - chartInfo.origin[0];\n    const dy = parent.clientHeight / 2 - chartInfo.origin[1];\n    const offsetX = d3.max([0, (parent.clientWidth - chartInfo.size[0]) / 2]);\n    const offsetY = d3.max([0, (parent.clientHeight - chartInfo.size[1]) / 2]);\n    const svgTransition = svg\n      .transition()\n      .delay(200)\n      .duration(500);\n    const transition = args.initialRender ? svg : svgTransition;\n    transition\n      .attr('transform', `translate(${offsetX}, ${offsetY})`)\n      .attr('width', chartInfo.size[0])\n      .attr('height', chartInfo.size[1]);\n    if (args.initialRender) {\n      parent.scrollLeft = -dx;\n      parent.scrollTop = -dy;\n    } else {\n      svgTransition\n        .tween('scrollLeft', scrollLeftTween(-dx))\n        .tween('scrollTop', scrollTopTween(-dy));\n    }\n\n    // After the animation is finished, rerender the chart if required.\n    this.animating = true;\n    chartInfo.animationPromise.then(() => {\n      this.animating = false;\n      if (this.rerenderRequired) {\n        this.rerenderRequired = false;\n        this.renderChart({initialRender: false});\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.renderChart({initialRender: true});\n  }\n\n  componentDidUpdate(prevProps: ChartProps) {\n    const initialRender = this.props.chartType !== prevProps.chartType;\n    this.renderChart({initialRender});\n  }\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    return (\n      <div id=\"svgContainer\">\n        <svg id=\"chart\" />\n      </div>\n    );\n  }\n\n  private getSvgContents() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  private async getSvgContentsWithInlinedImages() {\n    const svg = document.getElementById('chart')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    await inlineImages(svg);\n    return new XMLSerializer().serializeToString(svg);\n  }\n\n  /** Shows the print dialog to print the currently displayed chart. */\n  print() {\n    const printWindow = document.createElement('iframe');\n    printWindow.style.position = 'absolute';\n    printWindow.style.top = '-1000px';\n    printWindow.style.left = '-1000px';\n    printWindow.onload = () => {\n      printWindow.contentDocument!.open();\n      printWindow.contentDocument!.write(this.getSvgContents());\n      printWindow.contentDocument!.close();\n      // Doesn't work on Firefox without the setTimeout.\n      setTimeout(() => {\n        printWindow.contentWindow!.focus();\n        printWindow.contentWindow!.print();\n        printWindow.parentNode!.removeChild(printWindow);\n      }, 500);\n    };\n    document.body.appendChild(printWindow);\n  }\n\n  async downloadSvg() {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    saveAs(blob, 'topola.svg');\n  }\n\n  private async drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const contents = await this.getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    return await drawOnCanvas(await loadImage(blob));\n  }\n\n  async downloadPng() {\n    const canvas = await this.drawOnCanvas();\n    const blob = await canvasToBlob(canvas, 'image/png');\n    saveAs(blob, 'topola.png');\n  }\n\n  async downloadPdf() {\n    const canvas = await this.drawOnCanvas();\n    const doc = new jsPDF({\n      orientation: canvas.width > canvas.height ? 'l' : 'p',\n      unit: 'pt',\n      format: [canvas.width, canvas.height],\n    });\n    doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n    doc.save('topola.pdf');\n  }\n}\n","import {\n  JsonFam,\n  JsonGedcomData,\n  JsonIndi,\n  gedcomEntriesToJson,\n  JsonImage,\n} from 'topola';\nimport {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\n\nexport interface GedcomData {\n  /** The HEAD entry. */\n  head: GedcomEntry;\n  /** INDI entries mapped by id. */\n  indis: {[key: string]: GedcomEntry};\n  /** FAM entries mapped by id. */\n  fams: {[key: string]: GedcomEntry};\n  /** Other entries mapped by id, e.g. NOTE, SOUR. */\n  other: {[key: string]: GedcomEntry};\n}\n\nexport interface TopolaData {\n  chartData: JsonGedcomData;\n  gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nexport function pointerToId(pointer: string): string {\n  return pointer.substring(1, pointer.length - 1);\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n  const head = entries.find((entry) => entry.tag === 'HEAD')!;\n  const indis: {[key: string]: GedcomEntry} = {};\n  const fams: {[key: string]: GedcomEntry} = {};\n  const other: {[key: string]: GedcomEntry} = {};\n  entries.forEach((entry) => {\n    if (entry.tag === 'INDI') {\n      indis[pointerToId(entry.pointer)] = entry;\n    } else if (entry.tag === 'FAM') {\n      fams[pointerToId(entry.pointer)] = entry;\n    } else if (entry.pointer) {\n      other[pointerToId(entry.pointer)] = entry;\n    }\n  });\n  return {head, indis, fams, other};\n}\n\nfunction strcmp(a: string, b: string) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/** Birth date comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n  const idToIndiMap = new Map<string, JsonIndi>();\n  gedcom.indis.forEach((indi) => {\n    idToIndiMap[indi.id] = indi;\n  });\n\n  return (indiId1: string, indiId2: string) => {\n    const idComparison = strcmp(indiId1, indiId2);\n    const indi1: JsonIndi = idToIndiMap[indiId1];\n    const indi2: JsonIndi = idToIndiMap[indiId2];\n    const birth1 = indi1 && indi1.birth;\n    const birth2 = indi2 && indi2.birth;\n    const date1 =\n      birth1 && (birth1.date || (birth1.dateRange && birth1.dateRange.from));\n    const date2 =\n      birth2 && (birth2.date || (birth2.dateRange && birth2.dateRange.from));\n    if (!date1 || !date1.year || !date2 || !date2.year) {\n      return idComparison;\n    }\n    if (date1.year !== date2.year) {\n      return date1.year - date2.year;\n    }\n    if (!date1.month || !date2.month) {\n      return idComparison;\n    }\n    if (date1.month !== date2.month) {\n      return date1.month - date2.month;\n    }\n    if (date1.day && date2.day && date1.day !== date2.day) {\n      return date1.month - date2.month;\n    }\n    return idComparison;\n  };\n}\n\n/**\n * Sorts children by birth date in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(\n  fam: JsonFam,\n  comparator: (id1: string, id2: string) => number,\n): JsonFam {\n  if (!fam.children) {\n    return fam;\n  }\n  const newChildren = fam.children.sort(comparator);\n  return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birth date.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n  const comparator = birthDatesComparator(gedcom);\n  const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, comparator));\n  return Object.assign({}, gedcom, {fams: newFams});\n}\n\nconst IMAGE_EXTENSIONS = ['.jpg', '.png', '.gif'];\n\n/** Returns true if the given file name has a known image extension. */\nfunction isImageFile(fileName: string): boolean {\n  const lowerName = fileName.toLowerCase();\n  return IMAGE_EXTENSIONS.some((ext) => lowerName.endsWith(ext));\n}\n\n/**\n * Removes images that are not HTTP links or do not have known image extensions.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n  if (!indi.images || indi.images.length === 0) {\n    return indi;\n  }\n  const newImages: JsonImage[] = [];\n  indi.images.forEach((image) => {\n    const fileName = image.url.match(/[^/\\\\]*$/)![0];\n    // If the image file has been loaded into memory, use it.\n    if (images.has(fileName)) {\n      newImages.push({url: images.get(fileName)!, title: image.title});\n    } else if (image.url.startsWith('http') && isImageFile(image.url)) {\n      newImages.push(image);\n    }\n  });\n  return Object.assign({}, indi, {images: newImages});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n  gedcom: JsonGedcomData,\n  images: Map<string, string>,\n): JsonGedcomData {\n  const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n  return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birth date\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n  gedcom: string,\n  images: Map<string, string>,\n): TopolaData {\n  const entries = parseGedcom(gedcom);\n  const json = gedcomEntriesToJson(entries);\n  if (\n    !json ||\n    !json.indis ||\n    !json.indis.length ||\n    !json.fams ||\n    !json.fams.length\n  ) {\n    throw new Error('Failed to read GEDCOM file');\n  }\n\n  return {\n    chartData: filterImages(sortChildren(json), images),\n    gedcom: prepareGedcom(entries),\n  };\n}\n\nexport function getSoftware(head: GedcomEntry): string | null {\n  const sour =\n    head && head.tree && head.tree.find((entry) => entry.tag === 'SOUR');\n  const name =\n    sour && sour.tree && sour.tree.find((entry) => entry.tag === 'NAME');\n  return (name && name.data) || null;\n}\n","import {Date as TopolaDate, DateRange, getDate} from 'topola';\nimport {InjectedIntl} from 'react-intl';\n\nconst DATE_QUALIFIERS = new Map([\n  ['abt', 'about'],\n  ['cal', 'calculated'],\n  ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: InjectedIntl) {\n  const hasDay = date.day !== undefined;\n  const hasMonth = date.month !== undefined;\n  const hasYear = date.year !== undefined;\n  if (!hasDay && !hasMonth && !hasYear) {\n    return date.text || '';\n  }\n  const dateObject = new Date(\n    hasYear ? date.year! : 0,\n    hasMonth ? date.month! - 1 : 0,\n    hasDay ? date.day! : 1,\n  );\n\n  const qualifier = date.qualifier && date.qualifier.toLowerCase();\n  const translatedQualifier =\n    qualifier &&\n    intl.formatMessage({\n      id: `date.${qualifier}`,\n      defaultMessage: DATE_QUALIFIERS.get(qualifier) || qualifier,\n    });\n\n  const formatOptions = {\n    day: hasDay ? 'numeric' : undefined,\n    month: hasMonth ? 'long' : undefined,\n    year: hasYear ? 'numeric' : undefined,\n  };\n  const translatedDate = new Intl.DateTimeFormat(\n    intl.locale,\n    formatOptions,\n  ).format(dateObject);\n\n  return [translatedQualifier, translatedDate].join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: InjectedIntl) {\n  const fromDate = dateRange.from;\n  const toDate = dateRange.to;\n  const translatedFromDate = fromDate && formatDate(fromDate, intl);\n  const translatedToDate = toDate && formatDate(toDate, intl);\n  if (translatedFromDate && translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.between',\n        defaultMessage: 'between {from} and {to}',\n      },\n      {from: translatedFromDate, to: translatedToDate},\n    );\n  }\n  if (translatedFromDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.after',\n        defaultMessage: 'after {from}',\n      },\n      {from: translatedFromDate},\n    );\n  }\n  if (translatedToDate) {\n    return intl.formatMessage(\n      {\n        id: 'date.before',\n        defaultMessage: 'before {to}',\n      },\n      {to: translatedToDate},\n    );\n  }\n  return '';\n}\n\n/** Formats a date given in GEDCOM format. */\nexport function translateDate(gedcomDate: string, intl: InjectedIntl) {\n  const dateOrRange = getDate(gedcomDate);\n  if (!dateOrRange) {\n    return '';\n  }\n  if (dateOrRange.date) {\n    return formatDate(dateOrRange.date, intl);\n  }\n  if (dateOrRange.dateRange) {\n    return formatDateRage(dateOrRange.dateRange, intl);\n  }\n  return '';\n}\n","import * as React from 'react';\nimport flatMap from 'array.prototype.flatmap';\nimport Linkify from 'react-linkify';\nimport {FormattedMessage, InjectedIntl} from 'react-intl';\nimport {GedcomData, pointerToId} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {intlShape} from 'react-intl';\nimport {translateDate} from './date_util';\n\ninterface Props {\n  gedcom: GedcomData;\n  indi: string;\n}\n\nconst EVENT_TAGS = ['BIRT', 'BAPM', 'CHR', 'DEAT', 'BURI', 'EVEN'];\nconst EXCLUDED_TAGS = ['NAME', 'SEX', 'FAMC', 'FAMS', 'NOTE', 'SOUR'];\nconst TAG_DESCRIPTIONS = new Map([\n  ['BAPM', 'Baptism'],\n  ['BIRT', 'Birth'],\n  ['BURI', 'Burial'],\n  ['CHR', 'Christening'],\n  ['DEAT', 'Death'],\n  ['EMAIL', 'E-mail'],\n  ['EVEN', 'Event'],\n  ['OCCU', 'Occupation'],\n  ['TITL', 'Title'],\n  ['WWW', 'WWW'],\n]);\n\nfunction translateTag(tag: string) {\n  return (\n    <FormattedMessage\n      id={`gedcom.${tag}`}\n      defaultMessage={TAG_DESCRIPTIONS.get(tag) || tag}\n    />\n  );\n}\n\nfunction joinLines(lines: (JSX.Element | string)[]) {\n  return (\n    <>\n      {lines.map((line, index) => (\n        <div key={index}>\n          <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n          <br />\n        </div>\n      ))}\n    </>\n  );\n}\n\n/**\n * Returns the data for the given GEDCOM entry as an array of lines. Supports\n * continuations with CONT and CONC.\n */\nfunction getData(entry: GedcomEntry) {\n  const result = [entry.data];\n  entry.tree.forEach((subentry) => {\n    if (subentry.tag === 'CONC' && subentry.data) {\n      const last = result.length - 1;\n      result[last] += subentry.data;\n    } else if (subentry.tag === 'CONT' && subentry.data) {\n      result.push(subentry.data);\n    }\n  });\n  return result;\n}\n\nfunction eventDetails(entry: GedcomEntry, intl: InjectedIntl) {\n  const lines = [];\n  if (entry.data && entry.data.length > 1) {\n    lines.push(<i>{entry.data}</i>);\n  }\n  const date = entry.tree.find((subentry) => subentry.tag === 'DATE');\n  if (date && date.data) {\n    lines.push(translateDate(date.data, intl));\n  }\n  const place = entry.tree.find((subentry) => subentry.tag === 'PLAC');\n  if (place && place.data) {\n    lines.push(...getData(place));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction dataDetails(entry: GedcomEntry) {\n  const lines = [];\n  if (entry.data) {\n    lines.push(...getData(entry));\n  }\n  entry.tree\n    .filter((subentry) => subentry.tag === 'NOTE')\n    .forEach((note) =>\n      getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n    );\n  if (!lines.length) {\n    return null;\n  }\n  return (\n    <>\n      <div className=\"ui sub header\">{translateTag(entry.tag)}</div>\n      <span>{joinLines(lines)}</span>\n    </>\n  );\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n  return joinLines(\n    getData(entry).map((line, index) => <i key={index}>{line}</i>),\n  );\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n  return (\n    <h2 className=\"ui header\">\n      {entry.data\n        .split('/')\n        .filter((name) => !!name)\n        .map((name, index) => (\n          <div key={index}>\n            {name}\n            <br />\n          </div>\n        ))}\n    </h2>\n  );\n}\n\nfunction getDetails(\n  entries: GedcomEntry[],\n  tags: string[],\n  detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n  return flatMap(tags, (tag) =>\n    entries\n      .filter((entry) => entry.tag === tag)\n      .map((entry) => detailsFunction(entry)),\n  )\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * Returns true if there is displayable information in this entry.\n * Returns false if there is no data in this entry or this is only a reference\n * to another entry.\n */\nfunction hasData(entry: GedcomEntry) {\n  return entry.tree.length > 0 || (entry.data && !entry.data.startsWith('@'));\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n  return entries\n    .filter(\n      (entry) =>\n        !EXCLUDED_TAGS.includes(entry.tag) && !EVENT_TAGS.includes(entry.tag),\n    )\n    .filter(hasData)\n    .map((entry) => dataDetails(entry))\n    .filter((element) => element !== null)\n    .map((element, index) => (\n      <div className=\"ui segment\" key={index}>\n        {element}\n      </div>\n    ));\n}\n\n/**\n * If the entry is a reference to a top-level entry, the referenced entry is\n * returned. Otherwise, returns the given entry unmodified.\n */\nfunction dereference(entry: GedcomEntry, gedcom: GedcomData) {\n  if (entry.data) {\n    const dereferenced = gedcom.other[pointerToId(entry.data)];\n    if (dereferenced) {\n      return dereferenced;\n    }\n  }\n  return entry;\n}\n\nexport class Details extends React.Component<Props, {}> {\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  render() {\n    const entries = this.props.gedcom.indis[this.props.indi].tree;\n    const entriesWithData = entries\n      .map((entry) => dereference(entry, this.props.gedcom))\n      .filter(hasData);\n\n    return (\n      <div className=\"ui segments\" id=\"details\">\n        {getDetails(entries, ['NAME'], nameDetails)}\n        {getDetails(entries, EVENT_TAGS, (entry) =>\n          eventDetails(entry, this.context.intl as InjectedIntl),\n        )}\n        {getOtherDetails(entriesWithData)}\n        {getDetails(entriesWithData, ['NOTE'], noteDetails)}\n      </div>\n    );\n  }\n}\n","import {convertGedcom, TopolaData} from './gedcom_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n  data: JsonGedcomData,\n  indi?: string,\n  generation?: number,\n): IndiInfo {\n  return {\n    id: indi || data.indis[0].id,\n    generation: generation || 0,\n  };\n}\n\nfunction prepareData(\n  gedcom: string,\n  cacheId: string,\n  images?: Map<string, string>,\n): TopolaData {\n  const data = convertGedcom(gedcom, images || new Map());\n  const serializedData = JSON.stringify(data);\n  try {\n    sessionStorage.setItem(cacheId, serializedData);\n  } catch (e) {\n    console.warn('Failed to store data in session storage: ' + e);\n  }\n  return data;\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport async function loadFromUrl(\n  url: string,\n  handleCors: boolean,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(url);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  const urlToFetch = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/' + url\n    : url;\n\n  const response = await window.fetch(urlToFetch);\n  if (response.status !== 200) {\n    throw new Error(response.statusText);\n  }\n  const gedcom = await response.text();\n  return prepareData(gedcom, url);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport async function loadGedcom(\n  hash: string,\n  gedcom?: string,\n  images?: Map<string, string>,\n): Promise<TopolaData> {\n  try {\n    const cachedData = sessionStorage.getItem(hash);\n    if (cachedData) {\n      return JSON.parse(cachedData);\n    }\n  } catch (e) {\n    console.warn('Failed to load data from session storage: ' + e);\n  }\n  if (!gedcom) {\n    throw new Error('Error loading data. Please upload your file again.');\n  }\n  return prepareData(gedcom, hash, images);\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {Card} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\n/** Link that loads a GEDCOM file from URL. */\nfunction GedcomLink(props: {url: string; text: string}) {\n  return (\n    <Link\n      to={{pathname: '/view', search: queryString.stringify({url: props.url})}}\n    >\n      {props.text}\n    </Link>\n  );\n}\n\nfunction formatBuildDate(dateString: string) {\n  return new Date(dateString)\n    .toISOString()\n    .slice(0, 16)\n    .replace('T', ' ');\n}\n\n/** The intro page. */\nexport function Intro() {\n  return (\n    <Card className=\"intro\">\n      <Card.Content>\n        <Card.Header>\n          <FormattedMessage\n            id=\"intro.title\"\n            defaultMessage=\"Topola Genealogy Viewer\"\n          />\n        </Card.Header>\n      </Card.Content>\n      <Card.Content>\n        <p>\n          <FormattedMessage\n            id=\"intro.description\"\n            defaultMessage={\n              'Topola Genealogy is a genealogy tree viewer that lets you' +\n              ' browse the structure of the family.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.instructions\"\n            defaultMessage={\n              'Use the LOAD FROM URL or LOAD FROM FILE buttons above to load' +\n              ' a GEDCOM file. You can export a GEDCOM file from most of the' +\n              ' existing genealogy programs and web sites.'\n            }\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"intro.examples\"\n            defaultMessage={\n              'Here are some examples from the web that you can view:'\n            }\n          />\n        </p>\n        <ul>\n          <li>\n            <GedcomLink\n              url=\"http://genpol.com/module-Downloads-prep_hand_out-lid-32.html\"\n              text=\"Karol Wojtyła\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://genpol.com/module-Downloads-display-lid-32.html\">\n              GENPOL\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"https://webtreeprint.com/tp_downloader.php?path=famous_gedcoms/shakespeare.ged\"\n              text=\"Shakespeare\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"https://webtreeprint.com/tp_famous_gedcoms.php\">\n              webtreeprint.com\n            </a>\n            )\n          </li>\n          <li>\n            <GedcomLink\n              url=\"http://genealogyoflife.com/tng/gedcom/HarryPotter.ged\"\n              text=\"Harry Potter\"\n            />{' '}\n            (<FormattedMessage id=\"intro.from\" defaultMessage=\"from\" />{' '}\n            <a href=\"http://famousfamilytrees.blogspot.com/\">\n              Famous Family Trees\n            </a>\n            )\n          </li>\n        </ul>\n        <p>\n          <b>\n            <FormattedMessage id=\"intro.privacy\" defaultMessage=\"Privacy\" />\n          </b>\n          :\n          <FormattedMessage\n            id=\"intro.privacy_note\"\n            defaultMessage={\n              'When using the \"load from file\" option, this site does not' +\n              ' send your data anywhere and files loaded from disk do not' +\n              ' leave your computer. When using \"load from URL\", data is' +\n              ' passed through the {link} service to deal with an issue with' +\n              ' cross-site file loading in the browser (CORS).'\n            }\n            values={{\n              link: (\n                <a href=\"https://cors-anywhere.herokuapp.com/\">cors-anywhere</a>\n              ),\n            }}\n          />\n        </p>\n        <p className=\"ui right aligned version\">\n          version: {formatBuildDate(process.env.REACT_APP_GIT_TIME!)} (\n          <a\n            href={`https://github.com/PeWu/topola-viewer/commit/${\n              process.env.REACT_APP_GIT_SHA\n            }`}\n          >\n            {process.env.REACT_APP_GIT_SHA}\n          </a>\n          )\n        </p>\n      </Card.Content>\n    </Card>\n  );\n}\n","import naturalSort from 'javascript-natural-sort';\nimport lunr from 'lunr';\nimport {GedcomData, pointerToId} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\n\nconst MAX_RESULTS = 8;\n\nexport interface SearchResult {\n  id: string;\n  indi: GedcomEntry;\n}\n\nexport interface SearchIndex {\n  search(input: string): SearchResult[];\n}\n\n/** Removes accents from letters, e.g. ó->o, ę->e. */\nfunction normalize(input: string) {\n  return input\n    .toLocaleLowerCase()\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/\\u0142/g, 'l'); // Special case: ł is not affected by NFD.\n}\n\n/** Comparator to sort by score first, then by id. */\nfunction compare(a: lunr.Index.Result, b: lunr.Index.Result) {\n  if (a.score !== b.score) {\n    return b.score - a.score;\n  }\n  return naturalSort(a.ref, b.ref);\n}\n\n/** Returns all last names of all husbands as a space-separated string. */\nfunction getHusbandLastName(indi: GedcomEntry, gedcom: GedcomData): string {\n  return indi.tree\n    .filter((entry) => entry.tag === 'FAMS')\n    .map((entry) => gedcom.fams[pointerToId(entry.data)])\n    .filter((entry) => !!entry)\n    .map((entry) => {\n      const husband = entry.tree.find((entry) => entry.tag === 'HUSB');\n      const husbandId = husband && pointerToId(husband.data);\n      return (\n        husbandId &&\n        husbandId !== pointerToId(indi.pointer) &&\n        gedcom.indis[husbandId]\n      );\n    })\n    .filter((entry) => !!entry)\n    .flatMap((husband) =>\n      (husband as GedcomEntry).tree\n        .filter((entry) => entry.tag === 'NAME')\n        .map((entry) => {\n          const names = entry.data.split('/');\n          return names.length >= 2 ? names[1] : '';\n        }),\n    )\n    .join(' ');\n}\n\nclass LunrSearchIndex implements SearchIndex {\n  private index: lunr.Index | undefined;\n\n  constructor(private gedcom: GedcomData) {}\n\n  initialize() {\n    const self = this;\n    this.index = lunr(function() {\n      this.ref('id');\n      this.field('id');\n      this.field('name', {boost: 10});\n      this.field('normalizedName', {boost: 8});\n      this.field('spouseLastName', {boost: 2});\n      this.field('normalizedSpouseLastName', {boost: 2});\n\n      for (let id in self.gedcom.indis) {\n        const indi = self.gedcom.indis[id];\n        const name = indi.tree\n          .filter((entry) => entry.tag === 'NAME')\n          .map((entry) => entry.data)\n          .join(' ');\n        const spouseLastName = getHusbandLastName(indi, self.gedcom);\n        this.add({\n          id,\n          name,\n          normalizedName: normalize(name),\n          spouseLastName,\n          normalizedSpouseLastName: normalize(spouseLastName),\n        });\n      }\n    });\n  }\n\n  public search(input: string) {\n    const query = input\n      .split(' ')\n      .filter((s) => !!s)\n      .map((s) => `+${s}*`)\n      .join(' ');\n    const results = this.index!.search(query);\n    return results\n      .sort(compare)\n      .slice(0, MAX_RESULTS)\n      .map((result) => ({id: result.ref, indi: this.gedcom.indis[result.ref]}));\n  }\n}\n\n/** Builds a search index from data. */\nexport function buildSearchIndex(gedcom: GedcomData): SearchIndex {\n  const index = new LunrSearchIndex(gedcom);\n  index.initialize();\n  return index;\n}\n","import * as React from 'react';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {InjectedIntl} from 'react-intl';\nimport {SearchResult} from './search_index';\nimport {translateDate} from './date_util';\n\nfunction getNameLine(result: SearchResult) {\n  const nameTag = result.indi.tree.find((entry) => entry.tag === 'NAME');\n  const name =\n    nameTag &&\n    nameTag.data\n      .split('/')\n      .filter((s) => !!s)\n      .join(' ');\n  if (result.id.length > 8) {\n    return name;\n  }\n  return (\n    <>\n      {name} <i>({result.id})</i>\n    </>\n  );\n}\n\nfunction getDate(indi: GedcomEntry, tag: string, intl: InjectedIntl) {\n  const eventEntry = indi.tree.find((entry) => entry.tag === tag);\n  const dateEntry =\n    eventEntry && eventEntry.tree.find((entry) => entry.tag === 'DATE');\n  return (dateEntry && translateDate(dateEntry.data, intl)) || '';\n}\n\nfunction getDescriptionLine(indi: GedcomEntry, intl: InjectedIntl) {\n  const birthDate = getDate(indi, 'BIRT', intl);\n  const deathDate = getDate(indi, 'DEAT', intl);\n  if (!deathDate) {\n    return birthDate;\n  }\n  return `${birthDate} – ${deathDate}`;\n}\n\n/** Produces an object that is displayed in the Semantic UI Search results. */\nexport function displaySearchResult(result: SearchResult, intl: InjectedIntl) {\n  return {\n    id: result.id,\n    key: result.id,\n    title: getNameLine(result),\n    description: getDescriptionLine(result.indi, intl),\n  };\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport Cookies from 'js-cookie';\nimport debounce from 'debounce';\nimport md5 from 'md5';\nimport {analyticsEvent} from './analytics';\nimport {buildSearchIndex, SearchIndex} from './search_index';\nimport {displaySearchResult} from './search_util';\nimport {FormattedMessage, intlShape} from 'react-intl';\nimport {GedcomData} from './gedcom_util';\nimport {IndiInfo} from 'topola';\nimport {Link} from 'react-router-dom';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {\n  Header,\n  Button,\n  Icon,\n  Menu,\n  Modal,\n  Input,\n  Form,\n  Dropdown,\n  Search,\n  SearchProps,\n  SearchResultProps,\n} from 'semantic-ui-react';\n\nenum WikiTreeLoginState {\n  UNKNOWN,\n  NOT_LOGGED_IN,\n  LOGGED_IN,\n}\n\n/** Menus and dialogs state. */\ninterface State {\n  loadUrlDialogOpen: boolean;\n  url?: string;\n  wikiTreeLoginState: WikiTreeLoginState;\n  wikiTreeLoginUsername?: string;\n  searchResults: SearchResultProps[];\n}\n\ninterface EventHandlers {\n  onSelection: (indiInfo: IndiInfo) => void;\n  onPrint: () => void;\n  onDownloadPdf: () => void;\n  onDownloadPng: () => void;\n  onDownloadSvg: () => void;\n}\n\ninterface Props {\n  /** True if the application is currently showing a chart. */\n  showingChart: boolean;\n  /** Data used for the search index. */\n  gedcom?: GedcomData;\n  standalone: boolean;\n  /** Whether to show the \"All relatives\" chart type in the menu. */\n  allowAllRelativesChart: boolean;\n  eventHandlers: EventHandlers;\n  /** Whether to show the 'Log in to WikiTree' button. */\n  showWikiTreeLogin: boolean;\n}\n\nfunction loadFileAsText(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (evt: ProgressEvent) => {\n      resolve((evt.target as FileReader).result as string);\n    };\n    reader.readAsText(file);\n  });\n}\n\nfunction isImageFileName(fileName: string) {\n  const lower = fileName.toLowerCase();\n  return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\nexport class TopBar extends React.Component<\n  RouteComponentProps & Props,\n  State\n> {\n  state: State = {\n    loadUrlDialogOpen: false,\n    searchResults: [],\n    wikiTreeLoginState: WikiTreeLoginState.UNKNOWN,\n  };\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  urlInputRef: React.RefObject<Input> = React.createRef();\n  wikiTreeLoginFormRef: React.RefObject<HTMLFormElement> = React.createRef();\n  wikiTreeReturnUrlRef: React.RefObject<HTMLInputElement> = React.createRef();\n  searchRef?: {setValue(value: string): void};\n  searchIndex?: SearchIndex;\n\n  /** Handles the \"Upload file\" button. */\n  private async handleUpload(event: React.SyntheticEvent<HTMLInputElement>) {\n    const files = (event.target as HTMLInputElement).files;\n    if (!files || !files.length) {\n      return;\n    }\n    const filesArray = Array.from(files);\n    (event.target as HTMLInputElement).value = ''; // Reset the file input.\n    analyticsEvent('upload_files_selected', {\n      event_value: files.length,\n    });\n\n    const gedcomFile =\n      filesArray.length === 1\n        ? filesArray[0]\n        : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n          filesArray[0];\n\n    // Convert uploaded images to object URLs.\n    const images = filesArray\n      .filter(\n        (file) => file.name !== gedcomFile.name && isImageFileName(file.name),\n      )\n      .map((file) => ({\n        name: file.name,\n        url: URL.createObjectURL(file),\n      }));\n    const imageMap = new Map(\n      images.map((entry) => [entry.name, entry.url] as [string, string]),\n    );\n\n    const data = await loadFileAsText(gedcomFile);\n    const imageFileNames = images\n      .map((image) => image.name)\n      .sort()\n      .join('|');\n    // Hash GEDCOM contents with uploaded image file names.\n    const hash = md5(md5(data) + imageFileNames);\n\n    // Use history.replace() when reuploading the same file and history.push() when loading\n    // a new file.\n    const search = queryString.parse(this.props.location.search);\n    const historyPush =\n      search.file === hash\n        ? this.props.history.replace\n        : this.props.history.push;\n\n    historyPush({\n      pathname: '/view',\n      search: queryString.stringify({file: hash}),\n      state: {data, images: imageMap},\n    });\n  }\n\n  /** Opens the \"Load from URL\" dialog. */\n  private openLoadUrlDialog() {\n    this.setState(\n      Object.assign({}, this.state, {loadUrlDialogOpen: true}),\n      () => this.urlInputRef.current!.focus(),\n    );\n  }\n\n  /** Cancels the \"Load from URL\" dialog. */\n  private handleClose() {\n    this.setState(Object.assign({}, this.state, {loadUrlDialogOpen: false}));\n  }\n\n  /** Upload button clicked in the \"Load from URL\" dialog. */\n  private handleLoad() {\n    this.setState(\n      Object.assign({}, this.state, {\n        loadUrlDialogOpen: false,\n      }),\n    );\n    if (this.state.url) {\n      analyticsEvent('url_selected');\n      this.props.history.push({\n        pathname: '/view',\n        search: queryString.stringify({url: this.state.url}),\n      });\n    }\n  }\n\n  /** Called when the URL input is typed into. */\n  private handleUrlChange(event: React.SyntheticEvent) {\n    this.setState(\n      Object.assign({}, this.state, {\n        url: (event.target as HTMLInputElement).value,\n      }),\n    );\n  }\n\n  /** On search input change. */\n  private handleSearch(input: string | undefined) {\n    if (!input) {\n      return;\n    }\n    const results = this.searchIndex!.search(input).map((result) =>\n      displaySearchResult(result, this.context.intl),\n    );\n    this.setState(Object.assign({}, this.state, {searchResults: results}));\n  }\n\n  /** On search result selected. */\n  private handleResultSelect(id: string) {\n    analyticsEvent('search_result_selected');\n    this.props.eventHandlers.onSelection({id, generation: 0});\n    this.searchRef!.setValue('');\n  }\n\n  private initializeSearchIndex() {\n    if (this.props.gedcom) {\n      this.searchIndex = buildSearchIndex(this.props.gedcom);\n    }\n  }\n\n  changeView(view: string) {\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    if (search.view !== view) {\n      search.view = view;\n      location.search = queryString.stringify(search);\n      this.props.history.push(location);\n    }\n  }\n\n  /**\n   * Redirect to the WikiTree Apps login page with a return URL pointing to\n   * Topola Viewer hosted on apps.wikitree.com.\n   */\n  private wikiTreeLogin() {\n    const wikiTreeTopolaUrl =\n      'https://apps.wikitree.com/apps/wiech13/topola-viewer';\n    // Append '&' because the login page appends '?authcode=...' to this URL.\n    // TODO: remove ?authcode if it is in the current URL.\n    const returnUrl = `${wikiTreeTopolaUrl}${window.location.hash}&`;\n    this.wikiTreeReturnUrlRef.current!.value = returnUrl;\n    this.wikiTreeLoginFormRef.current!.submit();\n  }\n\n  private checkWikiTreeLoginState() {\n    const wikiTreeLoginState =\n      Cookies.get('wikidb_wtb_UserID') !== undefined\n        ? WikiTreeLoginState.LOGGED_IN\n        : WikiTreeLoginState.NOT_LOGGED_IN;\n    if (this.state.wikiTreeLoginState !== wikiTreeLoginState) {\n      const wikiTreeLoginUsername = Cookies.get('wikidb_wtb_UserName');\n      this.setState(\n        Object.assign({}, this.state, {\n          wikiTreeLoginState,\n          wikiTreeLoginUsername,\n        }),\n      );\n    }\n  }\n\n  async componentDidMount() {\n    this.checkWikiTreeLoginState();\n    this.initializeSearchIndex();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    this.checkWikiTreeLoginState();\n    if (prevProps.gedcom !== this.props.gedcom) {\n      this.initializeSearchIndex();\n    }\n  }\n\n  private loadFromUrlModal() {\n    return (\n      <Modal\n        open={this.state.loadUrlDialogOpen}\n        onClose={() => this.handleClose()}\n        centered={false}\n      >\n        <Header>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"load_from_url.title\"\n            defaultMessage=\"Load from URL\"\n            children={(txt) => txt}\n          />\n        </Header>\n        <Modal.Content>\n          <Form onSubmit={() => this.handleLoad()}>\n            <Input\n              placeholder=\"https://\"\n              fluid\n              onChange={(e) => this.handleUrlChange(e)}\n              ref={this.urlInputRef}\n            />\n            <p>\n              <FormattedMessage\n                id=\"load_from_url.comment\"\n                defaultMessage={\n                  'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                }\n                values={{\n                  link: (\n                    <a href=\"https://cors-anywhere.herokuapp.com/\">\n                      cors-anywhere.herokuapp.com\n                    </a>\n                  ),\n                }}\n              />\n            </p>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button secondary onClick={() => this.handleClose()}>\n            <FormattedMessage\n              id=\"load_from_url.cancel\"\n              defaultMessage=\"Cancel\"\n            />\n          </Button>\n          <Button primary onClick={() => this.handleLoad()}>\n            <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\" />\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  private chartMenus() {\n    if (!this.props.showingChart) {\n      return null;\n    }\n    return (\n      <>\n        <Menu.Item as=\"a\" onClick={() => this.props.eventHandlers.onPrint()}>\n          <Icon name=\"print\" />\n          <FormattedMessage id=\"menu.print\" defaultMessage=\"Print\" />\n        </Menu.Item>\n\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"download\" />\n              <FormattedMessage id=\"menu.download\" defaultMessage=\"Download\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPdf()}\n            >\n              <FormattedMessage id=\"menu.pdf_file\" defaultMessage=\"PDF file\" />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadPng()}\n            >\n              <FormattedMessage id=\"menu.png_file\" defaultMessage=\"PNG file\" />\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => this.props.eventHandlers.onDownloadSvg()}\n            >\n              <FormattedMessage id=\"menu.svg_file\" defaultMessage=\"SVG file\" />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Dropdown\n          trigger={\n            <div>\n              <Icon name=\"eye\" />\n              <FormattedMessage id=\"menu.view\" defaultMessage=\"View\" />\n            </div>\n          }\n          className=\"item\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => this.changeView('hourglass')}>\n              <Icon name=\"hourglass\" />\n              <FormattedMessage\n                id=\"menu.hourglass\"\n                defaultMessage=\"Hourglass chart\"\n              />\n            </Dropdown.Item>\n            {this.props.allowAllRelativesChart ? (\n              <Dropdown.Item onClick={() => this.changeView('relatives')}>\n                <Icon name=\"users\" />\n                <FormattedMessage\n                  id=\"menu.relatives\"\n                  defaultMessage=\"All relatives\"\n                />\n              </Dropdown.Item>\n            ) : null}\n            <Dropdown.Item onClick={() => this.changeView('fancy')}>\n              <Icon name=\"users\" />\n              <FormattedMessage\n                id=\"menu.fancy\"\n                defaultMessage=\"Fancy tree (experimental)\"\n              />\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <Search\n          onSearchChange={debounce(\n            (_: React.MouseEvent<HTMLElement>, data: SearchProps) =>\n              this.handleSearch(data.value),\n            200,\n          )}\n          onResultSelect={(_, data) => this.handleResultSelect(data.result.id)}\n          results={this.state.searchResults}\n          noResultsMessage={this.context.intl.formatMessage({\n            id: 'menu.search.no_results',\n            defaultMessage: 'No results found',\n          })}\n          placeholder={this.context.intl.formatMessage({\n            id: 'menu.search.placeholder',\n            defaultMessage: 'Search for people',\n          })}\n          selectFirstResult={true}\n          ref={(ref) =>\n            (this.searchRef = (ref as unknown) as {\n              setValue(value: string): void;\n            })\n          }\n        />\n      </>\n    );\n  }\n\n  private fileMenus() {\n    if (!this.props.standalone) {\n      return null;\n    }\n    return (\n      <>\n        <Link to=\"/\">\n          <Menu.Item>\n            <b>Topola Genealogy</b>\n          </Menu.Item>\n        </Link>\n        <Menu.Item as=\"a\" onClick={() => this.openLoadUrlDialog()}>\n          <Icon name=\"cloud download\" />\n          <FormattedMessage\n            id=\"menu.load_from_url\"\n            defaultMessage=\"Load from URL\"\n          />\n        </Menu.Item>\n        <input\n          className=\"hidden\"\n          type=\"file\"\n          accept=\".ged,image/*\"\n          id=\"fileInput\"\n          multiple\n          onChange={(e) => this.handleUpload(e)}\n        />\n        <label htmlFor=\"fileInput\">\n          <Menu.Item as=\"a\">\n            <Icon name=\"folder open\" />\n            <FormattedMessage\n              id=\"menu.load_from_file\"\n              defaultMessage=\"Load from file\"\n            />\n          </Menu.Item>\n        </label>\n      </>\n    );\n  }\n\n  private wikiTreeLoginMenu() {\n    if (!this.props.showWikiTreeLogin) {\n      return null;\n    }\n    const wikiTreeLogoUrl =\n      'https://www.wikitree.com/photo.php/a/a5/WikiTree_Images.png';\n    switch (this.state.wikiTreeLoginState) {\n      case WikiTreeLoginState.NOT_LOGGED_IN:\n        return (\n          <Menu.Item as=\"a\" onClick={() => this.wikiTreeLogin()}>\n            <img\n              src={wikiTreeLogoUrl}\n              alt=\"WikiTree logo\"\n              style={{width: '24px', height: '24px'}}\n            />\n            <FormattedMessage\n              id=\"menu.wikitree_login\"\n              defaultMessage=\"Log in to WikiTree\"\n            />\n            <form\n              action=\"https://apps.wikitree.com/api.php\"\n              method=\"POST\"\n              style={{display: 'hidden'}}\n              ref={this.wikiTreeLoginFormRef}\n            >\n              <input type=\"hidden\" name=\"action\" value=\"clientLogin\" />\n              <input\n                type=\"hidden\"\n                name=\"returnURL\"\n                ref={this.wikiTreeReturnUrlRef}\n              />\n            </form>\n          </Menu.Item>\n        );\n      case WikiTreeLoginState.LOGGED_IN:\n        const tooltip = this.state.wikiTreeLoginUsername\n          ? this.context.intl.formatMessage(\n              {\n                id: 'menu.wikitree_popup_username',\n                defaultMessage: 'Logged in to WikiTree as {username}',\n              },\n              {username: this.state.wikiTreeLoginUsername},\n            )\n          : this.context.intl.formatMessage({\n              id: 'menu.wikitree_popup',\n              defaultMessage: 'Logged in to WikiTree',\n            });\n        return (\n          <Menu.Item title={tooltip}>\n            <img\n              src={wikiTreeLogoUrl}\n              alt=\"WikiTree logo\"\n              style={{width: '24px', height: '24px'}}\n            />\n            <FormattedMessage\n              id=\"menu.wikitree_logged_in\"\n              defaultMessage=\"Logged in\"\n            />\n          </Menu.Item>\n        );\n      default:\n        return null;\n    }\n  }\n\n  private sourceLink() {\n    return (\n      <Menu.Item\n        as=\"a\"\n        href=\"https://github.com/PeWu/topola-viewer\"\n        target=\"_blank\"\n      >\n        <FormattedMessage id=\"menu.github\" defaultMessage=\"Source on GitHub\" />\n      </Menu.Item>\n    );\n  }\n\n  private poweredByLink() {\n    return (\n      <Menu.Item\n        as=\"a\"\n        href=\"https://pewu.github.com/topola-viewer\"\n        target=\"_blank\"\n      >\n        <FormattedMessage\n          id=\"menu.powered_by\"\n          defaultMessage=\"Powered by Topola\"\n        />\n      </Menu.Item>\n    );\n  }\n\n  render() {\n    return (\n      <Menu attached=\"top\" inverted color=\"blue\" size=\"large\">\n        {this.fileMenus()}\n        {this.chartMenus()}\n        <Menu.Menu position=\"right\">\n          {this.wikiTreeLoginMenu()}\n          {this.props.standalone ? this.sourceLink() : this.poweredByLink()}\n        </Menu.Menu>\n        {this.loadFromUrlModal()}\n      </Menu>\n    );\n  }\n}\n","import * as queryString from 'query-string';\nimport * as React from 'react';\nimport {analyticsEvent} from './analytics';\nimport {Chart, ChartType} from './chart';\nimport {Details} from './details';\nimport {FormattedMessage} from 'react-intl';\nimport {getSelection, loadFromUrl, loadGedcom} from './load_data';\nimport {getSoftware, TopolaData} from './gedcom_util';\nimport {IndiInfo} from 'topola';\nimport {intlShape} from 'react-intl';\nimport {Intro} from './intro';\nimport {Loader, Message, Portal, Responsive} from 'semantic-ui-react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {TopBar} from './top_bar';\nimport {loadWikiTree} from './wikitree';\n\n/** Shows an error message in the middle of the screen. */\nfunction ErrorMessage(props: {message?: string}) {\n  return (\n    <Message negative className=\"error\">\n      <Message.Header>\n        <FormattedMessage\n          id=\"error.failed_to_load_file\"\n          defaultMessage={'Failed to load file'}\n        />\n      </Message.Header>\n      <p>{props.message}</p>\n    </Message>\n  );\n}\n\ninterface ErrorPopupProps {\n  message?: string;\n  open: boolean;\n  onDismiss: () => void;\n}\n\n/**\n * Shows a dismissable error message in the bottom left corner of the screen.\n */\nfunction ErrorPopup(props: ErrorPopupProps) {\n  return (\n    <Portal open={props.open} onClose={props.onDismiss}>\n      <Message negative className=\"errorPopup\" onDismiss={props.onDismiss}>\n        <Message.Header>\n          <FormattedMessage id=\"error.error\" defaultMessage={'Error'} />\n        </Message.Header>\n        <p>{props.message}</p>\n      </Message>\n    </Portal>\n  );\n}\n\n/**\n * Message types used in embedded mode.\n * When the parent is ready to receive messages, it sends PARENT_READY.\n * When the child (this app) is ready to receive messages, it sends READY.\n * When the child receives PARENT_READY, it sends READY.\n * When the parent receives READY, it sends data in a GEDCOM message.\n */\nenum EmbeddedMessageType {\n  GEDCOM = 'gedcom',\n  READY = 'ready',\n  PARENT_READY = 'parent_ready',\n}\n\n/** Message sent to parent or received from parent in embedded mode. */\ninterface EmbeddedMessage {\n  message: EmbeddedMessageType;\n}\n\ninterface GedcomMessage extends EmbeddedMessage {\n  message: EmbeddedMessageType.GEDCOM;\n  gedcom?: string;\n}\n\n/** Returs true if the changes object has values that are different than those in state. */\nfunction hasUpdatedValues<T>(state: T, changes: Partial<T> | undefined) {\n  if (!changes) {\n    return false;\n  }\n  return Object.entries(changes).some(\n    ([key, value]) => value !== undefined && state[key] !== value,\n  );\n}\n\ninterface State {\n  /** Loaded data. */\n  data?: TopolaData;\n  /** Selected individual. */\n  selection?: IndiInfo;\n  /** Hash of the GEDCOM contents. */\n  hash?: string;\n  /** Error to display. */\n  error?: string;\n  /** True if data is currently being loaded. */\n  loading: boolean;\n  /** URL of the data that is loaded or is being loaded. */\n  url?: string;\n  /** Whether the side panel is shown. */\n  showSidePanel?: boolean;\n  /** Whether the app is in embedded mode, i.e. embedded in an iframe. */\n  embedded: boolean;\n  /** Whether the app is in standalone mode, i.e. showing 'open file' menus. */\n  standalone: boolean;\n  /** Type of displayed chart. */\n  chartType: ChartType;\n  /** Whether to show the error popup. */\n  showErrorPopup: boolean;\n  /** True if data is loaded from WikiTree. */\n  wikiTreeSource: boolean;\n  loadingMore?: boolean;\n}\n\nexport class App extends React.Component<RouteComponentProps, {}> {\n  state: State = {\n    loading: false,\n    embedded: false,\n    standalone: true,\n    chartType: ChartType.Hourglass,\n    showErrorPopup: false,\n    wikiTreeSource: false,\n  };\n  chartRef: Chart | null = null;\n\n  /** Make intl appear in this.context. */\n  static contextTypes = {\n    intl: intlShape,\n  };\n\n  private isNewData(\n    hash: string | undefined,\n    url: string | undefined,\n    gedcom: string | undefined,\n    source: string | undefined,\n  ): boolean {\n    return (\n      !!(hash && hash !== this.state.hash) ||\n      !!(url && this.state.url !== url) ||\n      (!!gedcom && !this.state.loading && !this.state.data) ||\n      (source === 'wikitree' &&\n        !this.state.loading &&\n        !this.state.data &&\n        !this.state.error)\n    );\n  }\n\n  /** Sets the state with a new individual selection and chart type. */\n  private updateDisplay(\n    selection: IndiInfo,\n    otherStateChanges?: Partial<State>,\n  ) {\n    if (\n      !this.state.selection ||\n      this.state.selection.id !== selection.id ||\n      this.state.selection!.generation !== selection.generation ||\n      hasUpdatedValues(this.state, otherStateChanges)\n    ) {\n      this.setState(\n        Object.assign({}, this.state, {selection}, otherStateChanges),\n      );\n    }\n  }\n\n  /** Sets error message after data load failure. */\n  private setError(error: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        error: error,\n        loading: false,\n      }),\n    );\n  }\n\n  private async onMessage(message: EmbeddedMessage) {\n    if (message.message === EmbeddedMessageType.PARENT_READY) {\n      // Parent didn't receive the first 'ready' message, so we need to send it again.\n      window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n    } else if (message.message === EmbeddedMessageType.GEDCOM) {\n      const gedcom = (message as GedcomMessage).gedcom;\n      if (!gedcom) {\n        return;\n      }\n      try {\n        const data = await loadGedcom('', gedcom);\n        const software = getSoftware(data.gedcom.head);\n        analyticsEvent('embedded_file_loaded', {\n          event_label: software,\n        });\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            selection: getSelection(data.chartData),\n            error: undefined,\n            loading: false,\n          }),\n        );\n      } catch (error) {\n        analyticsEvent('embedded_file_error');\n        this.setError(error.message);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();\n  }\n\n  async componentDidUpdate() {\n    if (this.props.location.pathname !== '/view') {\n      return;\n    }\n\n    const search = queryString.parse(this.props.location.search);\n    const getParam = (name: string) => {\n      const value = search[name];\n      return typeof value === 'string' ? value : undefined;\n    };\n\n    const showSidePanel = getParam('sidePanel') !== 'false'; // True by default.\n    const embedded = getParam('embedded') === 'true'; // False by default.\n\n    if (embedded && !this.state.embedded) {\n      this.setState(\n        Object.assign({}, this.state, {\n          embedded: true,\n          standalone: false,\n          showSidePanel,\n        }),\n      );\n      // Notify the parent window that we are ready.\n      window.parent.postMessage('ready', '*');\n      window.addEventListener('message', (data) => this.onMessage(data.data));\n    }\n    if (embedded) {\n      // If the app is embedded, do not run the normal loading code.\n      return;\n    }\n\n    const url = getParam('url');\n    const indi = getParam('indi');\n    const parsedGen = Number(getParam('gen'));\n    const generation = !isNaN(parsedGen) ? parsedGen : undefined;\n    const hash = getParam('file');\n    const handleCors = getParam('handleCors') !== 'false'; // True by default.\n    const standalone = getParam('standalone') !== 'false'; // True by default.\n    const view = getParam('view');\n    const source = getParam('source');\n    const authcode = getParam('?authcode');\n\n    const chartTypes = new Map<string | undefined, ChartType>([\n      ['relatives', ChartType.Relatives],\n      ['fancy', ChartType.Fancy],\n    ]);\n    // Hourglass is the default view.\n    const chartType = chartTypes.get(view) || ChartType.Hourglass;\n\n    const gedcom = this.props.location.state && this.props.location.state.data;\n    const images =\n      this.props.location.state && this.props.location.state.images;\n\n    if (!url && !hash && !source) {\n      this.props.history.replace({pathname: '/'});\n    } else if (this.isNewData(hash, url, gedcom, source)) {\n      try {\n        // Set loading state.\n        this.setState(\n          Object.assign({}, this.state, {\n            data: undefined,\n            selection: undefined,\n            hash,\n            error: undefined,\n            loading: true,\n            url,\n            standalone,\n            chartType,\n          }),\n        );\n        const data =\n          source === 'wikitree'\n            ? await loadWikiTree(indi!, authcode)\n            : hash\n            ? await loadGedcom(hash, gedcom, images)\n            : await loadFromUrl(url!, handleCors);\n\n        const software = getSoftware(data.gedcom.head);\n        if (source === 'wikitree') {\n          analyticsEvent('wikitree_loaded');\n        } else {\n          analyticsEvent(hash ? 'upload_file_loaded' : 'url_file_loaded', {\n            event_label: software,\n            event_value: (images && images.size) || 0,\n          });\n        }\n\n        // Set state with data.\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            hash,\n            selection: getSelection(data.chartData, indi, generation),\n            error: undefined,\n            loading: false,\n            url,\n            showSidePanel,\n            standalone,\n            chartType,\n            wikiTreeSource: source === 'wikitree',\n          }),\n        );\n      } catch (error) {\n        analyticsEvent(hash ? 'upload_file_error' : 'url_file_error');\n        this.setError(error.message);\n      }\n    } else if (this.state.data && this.state.selection) {\n      // Update selection if it has changed in the URL.\n      const selection = getSelection(\n        this.state.data.chartData,\n        indi,\n        generation,\n      );\n      const loadMoreFromWikitree =\n        source === 'wikitree' &&\n        (!this.state.selection || this.state.selection.id !== selection.id);\n      this.updateDisplay(selection, {\n        chartType,\n        loadingMore: loadMoreFromWikitree || undefined,\n      });\n      if (loadMoreFromWikitree) {\n        const data = await loadWikiTree(indi!);\n        this.setState(\n          Object.assign({}, this.state, {\n            data,\n            hash,\n            selection: getSelection(data.chartData, indi, generation),\n            error: undefined,\n            loading: false,\n            url,\n            showSidePanel,\n            standalone,\n            chartType,\n            wikiTreeSource: source === 'wikitree',\n            loadingMore: false,\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Called when the user clicks an individual box in the chart.\n   * Updates the browser URL.\n   */\n  private onSelection = (selection: IndiInfo) => {\n    analyticsEvent('selection_changed');\n    if (this.state.embedded) {\n      // In embedded mode the URL doesn't change.\n      this.updateDisplay(selection);\n      return;\n    }\n    const location = this.props.location;\n    const search = queryString.parse(location.search);\n    search.indi = selection.id;\n    search.gen = String(selection.generation);\n    location.search = queryString.stringify(search);\n    this.props.history.push(location);\n  };\n\n  private onPrint = () => {\n    analyticsEvent('print');\n    this.chartRef && this.chartRef.print();\n  };\n\n  private showErrorPopup(message: string) {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: true,\n        error: message,\n      }),\n    );\n  }\n\n  private onDownloadPdf = async () => {\n    analyticsEvent('download_pdf');\n    try {\n      this.chartRef && (await this.chartRef.downloadPdf());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_pdf',\n          defaultMessage:\n            'Failed to generate PDF file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadPng = async () => {\n    analyticsEvent('download_png');\n    try {\n      this.chartRef && (await this.chartRef.downloadPng());\n    } catch (e) {\n      this.showErrorPopup(\n        this.context.intl.formatMessage({\n          id: 'error.failed_png',\n          defaultMessage:\n            'Failed to generate PNG file.' +\n            ' Please try with a smaller diagram or download an SVG file.',\n        }),\n      );\n    }\n  };\n\n  private onDownloadSvg = () => {\n    analyticsEvent('download_svg');\n    this.chartRef && this.chartRef.downloadSvg();\n  };\n\n  onDismissErrorPopup = () => {\n    this.setState(\n      Object.assign({}, this.state, {\n        showErrorPopup: false,\n      }),\n    );\n  };\n\n  private renderMainArea = () => {\n    if (this.state.data && this.state.selection) {\n      return (\n        <div id=\"content\">\n          <ErrorPopup\n            open={this.state.showErrorPopup}\n            message={this.state.error}\n            onDismiss={this.onDismissErrorPopup}\n          />\n          {this.state.loadingMore ? (\n            <Loader active inline size=\"small\" />\n          ) : null}\n          <Chart\n            data={this.state.data.chartData}\n            selection={this.state.selection}\n            chartType={this.state.chartType}\n            onSelection={this.onSelection}\n            ref={(ref) => (this.chartRef = ref)}\n          />\n          {this.state.showSidePanel ? (\n            <Responsive minWidth={768} id=\"sidePanel\">\n              <Details\n                gedcom={this.state.data.gedcom}\n                indi={this.state.selection.id}\n              />\n            </Responsive>\n          ) : null}\n        </div>\n      );\n    }\n    if (this.state.error) {\n      return <ErrorMessage message={this.state.error!} />;\n    }\n    return <Loader active size=\"large\" />;\n  };\n\n  render() {\n    return (\n      <>\n        <Route\n          render={(props: RouteComponentProps) => (\n            <TopBar\n              {...props}\n              gedcom={this.state.data && this.state.data.gedcom}\n              allowAllRelativesChart={!this.state.wikiTreeSource}\n              showingChart={\n                !!(\n                  this.props.history.location.pathname === '/view' &&\n                  this.state.data &&\n                  this.state.selection\n                )\n              }\n              standalone={this.state.standalone}\n              eventHandlers={{\n                onSelection: this.onSelection,\n                onPrint: this.onPrint,\n                onDownloadPdf: this.onDownloadPdf,\n                onDownloadPng: this.onDownloadPng,\n                onDownloadSvg: this.onDownloadSvg,\n              }}\n              showWikiTreeLogin={this.state.wikiTreeSource}\n            />\n          )}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={Intro} />\n          <Route exact path=\"/view\" render={this.renderMainArea} />\n          <Redirect to={'/'} />\n        </Switch>\n      </>\n    );\n  }\n}\n","import Cookies from 'js-cookie';\nimport {Date, JsonFam, JsonIndi} from 'topola';\nimport {GedcomData, TopolaData} from './gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\n\n/** WikiTree API getAncestors request. */\ninterface GetAncestorsRequest {\n  action: 'getAncestors';\n  key: string;\n  fields: string;\n}\n\n/** WikiTree API getRelatives request. */\ninterface GetRelatives {\n  action: 'getRelatives';\n  keys: string;\n  getChildren?: true;\n  getSpouses?: true;\n}\n\ninterface ClientLogin {\n  action: 'clientLogin';\n  authcode: string;\n}\n\ntype WikiTreeRequest = GetAncestorsRequest | GetRelatives | ClientLogin;\n\n/** Person structure returned from WikiTree API. */\ninterface Person {\n  Id: number;\n  Name: string;\n  FirstName: string;\n  LastNameAtBirth: string;\n  Spouses: {[key: number]: Person};\n  Children: {[key: number]: Person};\n  Mother: number;\n  Father: number;\n  Gender: string;\n  BirthDate: string;\n  DeathDate: string;\n  BirthLocation: string;\n  DeathLocation: string;\n  marriage_location: string;\n  marriage_date: string;\n  DataStatus?: {\n    BirthDate: string;\n    DeathDate: string;\n  };\n  PhotoData?: {\n    path: string;\n  };\n}\n\n/** Sends a request to the WikiTree API. Returns the parsed response JSON. */\nasync function wikiTreeGet(request: WikiTreeRequest, handleCors: boolean) {\n  const requestData = new FormData();\n  requestData.append('format', 'json');\n  for (const key in request) {\n    requestData.append(key, request[key]);\n  }\n  const apiUrl = handleCors\n    ? 'https://cors-anywhere.herokuapp.com/https://apps.wikitree.com/api.php'\n    : 'https://apps.wikitree.com/api.php';\n  const response = await window.fetch(apiUrl, {\n    method: 'POST',\n    body: requestData,\n  });\n  const responseBody = await response.text();\n  return JSON.parse(responseBody);\n}\n\n/**\n * Retrieves ancestors from WikiTree for the given person ID.\n * Uses sessionStorage for caching responses.\n */\nasync function getAncestors(key: string, handleCors: boolean) {\n  const cacheKey = `wikitree:ancestors:${key}`;\n  const cachedData = sessionStorage.getItem(cacheKey);\n  if (cachedData) {\n    return JSON.parse(cachedData);\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getAncestors',\n      key: key,\n      fields: '*',\n    },\n    handleCors,\n  );\n  const result = response[0].ancestors as Person[];\n  sessionStorage.setItem(cacheKey, JSON.stringify(result));\n  return result;\n}\n\n/**\n * Retrieves relatives from WikiTree for the given array of person IDs.\n * Uses sessionStorage for caching responses.\n */\nasync function getRelatives(keys: string[], handleCors: boolean) {\n  const result: Person[] = [];\n  const keysToFetch: string[] = [];\n  keys.forEach((key) => {\n    const cachedData = sessionStorage.getItem(`wikitree:relatives:${key}`);\n    if (cachedData) {\n      result.push(JSON.parse(cachedData));\n    } else {\n      keysToFetch.push(key);\n    }\n  });\n  if (keysToFetch.length === 0) {\n    return result;\n  }\n  const response = await wikiTreeGet(\n    {\n      action: 'getRelatives',\n      keys: keysToFetch.join(','),\n      getChildren: true,\n      getSpouses: true,\n    },\n    handleCors,\n  );\n  if (response[0].items === null) {\n    throw new Error(`WikiTree profile ${keysToFetch[0]} not found.`);\n  }\n  const fetchedResults = response[0].items.map(\n    (x: {person: Person}) => x.person,\n  ) as Person[];\n  fetchedResults.forEach((person) => {\n    sessionStorage.setItem(\n      `wikitree:relatives:${person.Name}`,\n      JSON.stringify(person),\n    );\n  });\n  return result.concat(fetchedResults);\n}\n\nexport async function clientLogin(authcode: string) {\n  const response = await wikiTreeGet(\n    {\n      action: 'clientLogin',\n      authcode,\n    },\n    false,\n  );\n  return response.clientLogin;\n}\n\n/**\n * Loads data from WikiTree to populate an hourglass chart starting from the\n * given person ID.\n */\nexport async function loadWikiTree(\n  key: string,\n  authcode?: string,\n): Promise<TopolaData> {\n  // Work around CORS if not in apps.wikitree.com domain.\n  const handleCors = window.location.hostname !== 'apps.wikitree.com';\n\n  if (!handleCors && !Cookies.get('wikidb_wtb_UserID') && authcode) {\n    const loginResult = await clientLogin(authcode);\n    if (loginResult.result === 'Success') {\n      sessionStorage.clear();\n    }\n  }\n\n  const everyone: Person[] = [];\n\n  // Fetch the ancestors of the input person and ancestors of his/her spouses.\n  const firstPerson = await getRelatives([key], handleCors);\n  if (!firstPerson[0].Name) {\n    throw new Error(\n      `WikiTree profile ${key} is not accessible. Try logging in.`,\n    );\n  }\n\n  const spouseKeys = Object.values(firstPerson[0].Spouses).map((s) => s.Name);\n  const ancestors = await Promise.all(\n    [key]\n      .concat(spouseKeys)\n      .map((personId) => getAncestors(personId, handleCors)),\n  );\n  const ancestorKeys = ancestors\n    .flat()\n    .map((person) => person.Name)\n    .filter((key) => !!key);\n  const ancestorDetails = await getRelatives(ancestorKeys, handleCors);\n  everyone.push(...ancestorDetails);\n\n  // Limit the number of generations of descendants because there may be tens of\n  // generations for some profiles.\n  const descendantGenerationLimit = 10;\n\n  // Fetch descendants recursively.\n  let toFetch = [key];\n  let generation = 0;\n  while (toFetch.length > 0 && generation <= descendantGenerationLimit) {\n    const people = await getRelatives(toFetch, handleCors);\n    everyone.push(...people);\n    const allSpouses = people.flatMap((person) =>\n      Object.values(person.Spouses),\n    );\n    everyone.push(...allSpouses);\n    // Fetch all children.\n    toFetch = people.flatMap((person) =>\n      Object.values(person.Children).map((c) => c.Name),\n    );\n    generation++;\n  }\n\n  // Map from person id to the set of families where they are a spouse.\n  const families = new Map<number, Set<string>>();\n  // Map from family id to the set of children.\n  const children = new Map<string, Set<number>>();\n  // Map from famliy id to the spouses.\n  const spouses = new Map<\n    string,\n    {wife?: number; husband?: number; spouse?: Person}\n  >();\n  // Map from numerical id to human-readable id.\n  const idToName = new Map<number, string>();\n\n  everyone.forEach((person) => {\n    idToName.set(person.Id, person.Name);\n    if (person.Mother || person.Father) {\n      const famId = getFamilyId(person.Mother, person.Father);\n      getSet(families, person.Mother).add(famId);\n      getSet(families, person.Father).add(famId);\n      getSet(children, famId).add(person.Id);\n      spouses.set(famId, {\n        wife: person.Mother || undefined,\n        husband: person.Father || undefined,\n      });\n    }\n  });\n\n  const indis: JsonIndi[] = [];\n  const converted = new Set<number>();\n  everyone.forEach((person) => {\n    if (converted.has(person.Id)) {\n      return;\n    }\n    converted.add(person.Id);\n    const indi = convertPerson(person);\n    if (person.Spouses) {\n      Object.values(person.Spouses).forEach((spouse) => {\n        const famId = getFamilyId(person.Id, spouse.Id);\n        getSet(families, person.Id).add(famId);\n        getSet(families, spouse.Id).add(famId);\n        const familySpouses =\n          person.Gender === 'Male'\n            ? {wife: spouse.Id, husband: person.Id, spouse}\n            : {wife: person.Id, husband: spouse.Id, spouse};\n        spouses.set(famId, familySpouses);\n      });\n    }\n    indi.fams = Array.from(getSet(families, person.Id));\n    indis.push(indi);\n  });\n\n  const fams = Array.from(spouses.entries()).map(([key, value]) => {\n    const fam: JsonFam = {\n      id: key,\n    };\n    const wife = value.wife && idToName.get(value.wife);\n    if (wife) {\n      fam.wife = wife;\n    }\n    const husband = value.husband && idToName.get(value.husband);\n    if (husband) {\n      fam.husb = husband;\n    }\n    fam.children = Array.from(getSet(children, key)).map(\n      (child) => idToName.get(child)!,\n    );\n    if (\n      value.spouse &&\n      ((value.spouse.marriage_date &&\n        value.spouse.marriage_date !== '0000-00-00') ||\n        value.spouse.marriage_location)\n    ) {\n      const parsedDate = parseDate(value.spouse.marriage_date);\n      fam.marriage = Object.assign({}, parsedDate, {\n        place: value.spouse.marriage_location,\n      });\n    }\n    return fam;\n  });\n\n  const gedcom = buildGedcom(indis);\n  return {chartData: {indis, fams}, gedcom};\n}\n\n/** Creates a family identifier given 2 spouse identifiers. */\nfunction getFamilyId(spouse1: number, spouse2: number) {\n  if (spouse2 > spouse1) {\n    return `${spouse1}_${spouse2}`;\n  }\n  return `${spouse2}_${spouse1}`;\n}\n\nfunction convertPerson(person: Person): JsonIndi {\n  const indi: JsonIndi = {\n    id: person.Name,\n  };\n  if (person.FirstName !== 'Unknown') {\n    indi.firstName = person.FirstName;\n  }\n  if (person.LastNameAtBirth !== 'Unknown') {\n    indi.lastName = person.LastNameAtBirth;\n  }\n  if (person.Mother || person.Father) {\n    indi.famc = getFamilyId(person.Mother, person.Father);\n  }\n  if (person.Gender === 'Male') {\n    indi.sex = 'M';\n  } else if (person.Gender === 'Female') {\n    indi.sex = 'F';\n  }\n  if (\n    (person.BirthDate && person.DeathDate !== '0000-00-00') ||\n    person.BirthLocation\n  ) {\n    const parsedDate = parseDate(\n      person.BirthDate,\n      person.DataStatus && person.DataStatus.BirthDate,\n    );\n    indi.birth = Object.assign({}, parsedDate, {place: person.BirthLocation});\n  }\n  if (\n    (person.DeathDate && person.DeathDate !== '0000-00-00') ||\n    person.DeathLocation\n  ) {\n    const parsedDate = parseDate(\n      person.DeathDate,\n      person.DataStatus && person.DataStatus.DeathDate,\n    );\n    indi.death = Object.assign({}, parsedDate, {place: person.DeathLocation});\n  }\n  if (person.PhotoData) {\n    indi.images = [{url: `https://wikitree.com${person.PhotoData.path}`}];\n  }\n  return indi;\n}\n\n/**\n * Parses a date in the format returned by WikiTree and converts in to\n * the format defined by Topola.\n */\nfunction parseDate(date: string, dataStatus?: string) {\n  if (!date) {\n    return undefined;\n  }\n  const matchedDate = date.match(/(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)/);\n  if (!matchedDate) {\n    return {text: date};\n  }\n  const parsedDate: Date = {};\n  if (matchedDate[1] !== '0000') {\n    parsedDate.year = ~~matchedDate[1];\n  }\n  if (matchedDate[2] !== '00') {\n    parsedDate.month = ~~matchedDate[2];\n  }\n  if (matchedDate[3] !== '00') {\n    parsedDate.day = ~~matchedDate[3];\n  }\n  if (dataStatus === 'after') {\n    return {dataRange: {from: parsedDate}};\n  }\n  if (dataStatus === 'before') {\n    return {dataRange: {to: parsedDate}};\n  }\n  if (dataStatus === 'guess') {\n    parsedDate.qualifier = 'abt';\n  }\n  return {date: parsedDate};\n}\n\n/**\n * Creates a GEDCOM structure for the purpose of displaying the details\n * panel.\n */\nfunction buildGedcom(indis: JsonIndi[]): GedcomData {\n  const gedcomIndis: {[key: string]: GedcomEntry} = {};\n  indis.forEach((indi) => {\n    // WikiTree URLs replace spaces with underscores.\n    const escapedId = indi.id.replace(' ', '_');\n    gedcomIndis[indi.id] = {\n      level: 0,\n      pointer: `@${indi.id}@`,\n      tag: 'INDI',\n      data: '',\n      tree: [\n        {\n          level: 1,\n          pointer: '',\n          tag: 'NAME',\n          data: `${indi.firstName || ''} /${indi.lastName || ''}/`,\n          tree: [],\n        },\n        {\n          level: 1,\n          pointer: '',\n          tag: 'WWW',\n          data: `https://www.wikitree.com/wiki/${escapedId}`,\n          tree: [],\n        },\n      ],\n    };\n  });\n\n  return {\n    head: {level: 0, pointer: '', tag: 'HEAD', data: '', tree: []},\n    indis: gedcomIndis,\n    fams: {},\n    other: {},\n  };\n}\n\n/**\n * Returns a set which is a value from a SetMultimap. If the key doesn't exist,\n * an empty set is added to the map.\n */\nfunction getSet<K, V>(map: Map<K, Set<V>>, key: K): Set<V> {\n  const set = map.get(key);\n  if (set) {\n    return set;\n  }\n  const newSet = new Set<V>();\n  map.set(key, newSet);\n  return newSet;\n}\n","import * as locale_en from 'react-intl/locale-data/en';\nimport * as locale_pl from 'react-intl/locale-data/pl';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_pl from './translations/pl.json';\nimport {addLocaleData} from 'react-intl';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\naddLocaleData([...locale_en, ...locale_pl]);\n\nconst messages = {\n  pl: messages_pl,\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\n\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n  ReactDOM.render(\n    <p>\n      Topola Genealogy Viewer does not support Internet Explorer. Please try a\n      different browser.\n    </p>,\n    document.querySelector('#root'),\n  );\n} else {\n  ReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n      <Router>\n        <Route component={App} />\n      </Router>\n    </IntlProvider>,\n    document.querySelector('#root'),\n  );\n}\n"],"sourceRoot":""}